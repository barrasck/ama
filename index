<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AMA LOGISTIC - Inicio de Sesión</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.0/xlsx.full.min.js"></script>
    <style>
/* Variables CSS para colores recurrentes */
:root {
    --primary: #004085;
    --primary-dark: #003366;
    --danger: #dc3545;
    --danger-dark: #c82333;
    --success: #28a745;
    --success-dark: #218838;
    --blue: #007bff;
    --blue-dark: #0056b3;
    --warning: #ffc107;
    --warning-dark: #e0a800;
    --white: #ffffff;
    --gray: #777;
    --light-gray: #ccc;
    --background-login: #f0f2f5;
    --background-internal: #f8f9fa;
    --table-border: #eee;
}

/* Reset y estilos base */
* {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}

body {
    font-family: 'Lato', sans-serif;
    color: #333;
    min-height: 100vh;
}

/* Estilos para la página de login */
.login-page {
    font-family: 'Poppins', sans-serif;
    background: var(--background-login);
    display: flex;
    justify-content: center;
    align-items: center;
}

.login-container {
    background: rgba(255, 255, 255, 0.95);
    padding: 2.5rem;
    border-radius: 15px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    text-align: center;
    max-width: 400px;
    width: 90%;
    animation: fadeIn 1s ease-in-out;
}

@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-20px); }
    to { opacity: 1; transform: translateY(0); }
}

.login-container h1 {
    color: var(--primary);
    font-size: 1.75rem;
    margin-bottom: 1.25rem;
    font-weight: 600;
}

.login-container p {
    font-size: 0.875rem;
    color: #555;
    margin-bottom: 1.875rem;
    line-height: 1.6;
}

.login-container input {
    width: 100%;
    padding: 0.75rem;
    margin: 0.625rem 0;
    border: 1px solid var(--light-gray);
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.3s ease;
}

.login-container input:focus {
    border-color: var(--primary);
    outline: none;
}

.login-container button {
    background: var(--primary);
    color: var(--white);
    font-weight: bold;
    border: none;
    padding: 0.75rem;
    width: 100%;
    margin-top: 1.25rem;
    border-radius: 8px;
    cursor: pointer;
    font-size: 1rem;
    transition: background 0.3s ease;
}

.login-container button:hover {
    background: var(--primary-dark);
}

.login-container .logo {
    width: 100px;
    margin-bottom: 1.25rem;
}

.login-container .footer {
    margin-top: 1.25rem;
    font-size: 0.75rem;
    color: var(--gray);
}

.login-container .footer a {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
}

.login-container .footer a:hover {
    text-decoration: underline;
}

/* Estilos para la página interna */
.internal-page {
    background: var(--background-internal);
}

/* Estilos para la barra de navegación */
.navbar {
    background: var(--primary);
    padding: 0 0.5rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    color: var(--white);
    font-size: 1.125rem;
    font-weight: bold;
    position: fixed;
    top: 0;
    width: 100%;
    z-index: 1000;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    height: 50px;
}

.navbar-left {
    display: flex;
    align-items: center;
    gap: 0.625rem;
    margin-left: -0.625rem;
}

.usuario-actual {
    font-size: 0.875rem;
    font-weight: normal;
    position: relative;
    top: 1px;
}

.btn-cerrar-sesion {
    background: var(--danger);
    color: var(--white);
    border: none;
    padding: 0.375rem 0.75rem;
    border-radius: 5px;
    cursor: pointer;
    font-size: 0.875rem;
    transition: background 0.3s ease;
    margin-right: 1.5rem;
}

.btn-cerrar-sesion:hover {
    background: var(--danger-dark);
}

/* Estilos para botones genéricos */
button, .btn {
    background: var(--primary);
    color: var(--white);
    font-weight: bold;
    border: none;
    padding: 0.75rem;
    border-radius: 8px;
    cursor: pointer;
    transition: background 0.3s ease;
    text-align: center;
}

button:hover, .btn:hover {
    background: var(--primary-dark);
}

.btn-mas-informacion {
    background: var(--blue);
    padding: 0.3125rem 0.625rem;
    border-radius: 4px;
}

.btn-mas-informacion:hover {
    background: var(--blue-dark);
}

.btn-registrar-trabajador, .btn-generar-carnet, .btn-exportar {
    background: var(--success);
    padding: 0.625rem;
    width: 100%;
    margin-top: 0.625rem;
}

.btn-registrar-trabajador:hover, .btn-generar-carnet:hover, .btn-exportar:hover {
    background: var(--success-dark);
}

.btn-X {
    position: fixed;
    right: 290px;
    background: var(--white);
    color: var(--gray);
    padding: 0.625rem;
    border-radius: 5px;
    z-index: 1000;
}

.btn-X:hover {
    background: var(--white);
}

.btn-editar, .btn-eliminar {
    padding: 0.375rem 0.75rem;
    font-size: 0.75rem;
    border-radius: 20px;
    margin: 0 0.25rem;
}

.btn-editar {
    background: var(--warning);
    color: #000;
}

.btn-editar:hover {
    background: var(--warning-dark);
}

.btn-eliminar {
    background: var(--danger);
    color: var(--white);
}

.btn-eliminar:hover {
    background: var(--danger-dark);
}

.btn-registrar {
    background: var(--primary);
    color: var(--white);
    padding: 0.5rem 1rem;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
}

/* Estilos para la barra de pestañas */
.tabs, .sub-tabs, .nav-modulos {
    display: flex;
    background: var(--blue);
    padding: 0.125rem;
    position: fixed;
    top: 47px;
    width: 100%;
    z-index: 1000;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
    height: 30px;
}

.nav-modulos {
    background: #f0f0f0;
    position: static;
    height: auto;
    box-shadow: none;
}

.sub-tabs {
    position: static;
    margin: 0.9375rem 0;
    height: auto;
}

.tabs button, .sub-tabs button, .nav-modulos button {
    background: transparent;
    border: none;
    color: var(--white);
    font-size: 0.875rem;
    padding: 0 1.25rem;
    font-weight: bold;
    cursor: pointer;
    transition: background 0.3s ease;
    height: 100%;
    display: flex;
    align-items: center;
    border-right: 1px solid rgba(255, 255, 255, 0.2);
}

.nav-modulos button {
    background: var(--primary);
    padding: 0.5rem 0.9375rem;
    margin-right: 0.3125rem;
    border-radius: 4px;
}

.sub-tabs button {
    padding: 0.5rem 0.9375rem;
    border-radius: 5px;
}

.tabs button:hover, .sub-tabs button:hover, .nav-modulos button:hover {
    background: rgba(255, 255, 255, 0.2);
}

.nav-modulos button:hover {
    background: var(--primary-dark);
}

.tabs button:last-child {
    border-right: none;
}

/* Estilos para el contenedor principal */
.container, .form-container {
    max-width: 1200px;
    margin: 6.25rem auto 2.5rem;
    background: var(--white);
    padding: 2rem;
    border-radius: 12px;
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: column;
}

.form-container {
    margin: 1.25rem auto;
}

.table-container {
    padding: 0 1rem;
}

/* Estilos para formularios y tablas */
.container input, .container select, .modal-contenido input, .modal-contenido select {
    width: 100%;
    padding: 0.5rem;
    margin-top: 0.3125rem;
    border: 1px solid var(--light-gray);
    border-radius: 5px;
    font-size: 0.875rem;
}

input, select {
    padding: 0.375rem;
    border: 1px solid var(--light-gray);
    border-radius: 5px;
    font-size: 0.75rem;
}

textarea {
    height: 100px;
    width: 100%;
    resize: vertical;
}

input[type="file"] {
    width: 100%;
    padding: 0.625rem;
    border: 1px solid var(--light-gray);
    border-radius: 5px;
    background: #f9f9f9;
    font-size: 0.875rem;
    cursor: pointer;
}

input[type="file"]::file-selector-button {
    background: var(--primary);
    color: var(--white);
    border: none;
    padding: 0.5rem 0.75rem;
    border-radius: 5px;
    cursor: pointer;
    transition: background 0.3s ease;
}

input[type="file"]::file-selector-button:hover {
    background: var(--primary-dark);
}

input[type="checkbox"] {
    transform: scale(0.8);
    margin-right: 0.3125rem;
    width: auto;
}

.form-group label, .modal-contenido label, label {
    font-weight: bold;
    margin: 0.5rem 0 0.3125rem;
    font-size: 0.8125rem;
    display: block;
}

.form-group.full-width label, label-opcion1 {
    font-size: 0.75rem;
    color: #333;
    display: inline-block;
    margin-right: 0.625rem;
}

/* Estilos generales para tablas */
table, #colillaPago table {
    width: 100%;
    margin-top: 1.25rem;
    border-collapse: collapse;
    table-layout: fixed; /* Fija el diseño para respetar los anchos */
    background: var(--white);
    border: 1px solid var(--table-border);
}

th, td, #colillaPago th, #colillaPago td {
    border: 1px solid var(--light-gray);
    text-align: center; /* Centrar el texto por defecto */
    font-size: 0.875rem;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    height: 40px; /* Establece la altura fija deseada para todas las celdas */
}

th, #colillaPago th {
    background: var(--primary);
    color: var(--white);
    text-align: center;
    height: 40px; /* Asegura la misma altura para los encabezados */
}

/* Filas alternadas para mejorar legibilidad */
table tbody tr:nth-child(even) {
    background-color: #f9f9f9;
}

/* --- Tabla de Registro de Trabajadores (role="grid") --- */
table[role="grid"] th:nth-child(1),
table[role="grid"] td:nth-child(1) {
    width: 5%;
}

table[role="grid"] th:nth-child(2),
table[role="grid"] td:nth-child(2) {
    width: 25%;
    text-align: left; /* Alinear nombre a la izquierda */
}

table[role="grid"] th:nth-child(3),
table[role="grid"] td:nth-child(3) {
    width: 10%;
}

table[role="grid"] th:nth-child(4),
table[role="grid"] td:nth-child(4) {
    width: 15%;
}

table[role="grid"] th:nth-child(5),
table[role="grid"] td:nth-child(5) {
    width: 9%;
}

table[role="grid"] th:nth-child(6),
table[role="grid"] td:nth-child(6) {
    width: 13%;
}

table[role="grid"] th:nth-child(7),
table[role="grid"] td:nth-child(7) {
    width: 10%;
}

table[role="grid"] td:nth-child(8) {
    overflow: visible;
    text-overflow: initial;
    display: flex;
    align-items: center;
    justify-content: center;
    /* La altura fija se aplica en el selector general de td */
}

table[role="grid"] .acciones {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 0.25rem;
    height: 100%; /* Asegura que ocupe toda la altura de la celda */
}

table[role="grid"] .btn-mas-informacion {
    background: var(--blue);
    color: var(--white);
    padding: 0.5rem 0.75rem;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: auto;
    font-size: 0.9rem;
    height: auto;
}

table[role="grid"] .btn-mas-informacion:hover {
    background: var(--blue-dark);
}

table[role="grid"] .btn-editar,
table[role="grid"] .btn-eliminar {
    font-size: 1.1rem;
    padding: 0.5rem;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 35px;
    height: auto;
    margin: 0 0.1rem;
}

table[role="grid"] .btn-editar:hover {
    background: var(--warning-dark);
}

table[role="grid"] .btn-eliminar:hover {
    background: var(--danger-dark);
}

/* --- Tabla de Gestión de Usuarios (clase .tabla-usuarios) --- */
table.tabla-usuarios th:nth-child(1),
table.tabla-usuarios td:nth-child(1) {
    width: 5%; /* "#" */
}

table.tabla-usuarios th:nth-child(2),
table.tabla-usuarios td:nth-child(2) {
    width: 30%; /* "Nombre" */
}

table.tabla-usuarios th:nth-child(3),
table.tabla-usuarios td:nth-child(3) {
    width: 30%; /* "Correo" */
}

table.tabla-usuarios th:nth-child(4),
table.tabla-usuarios td:nth-child(4) {
    width: 20%; /* "Rol" */
}

table.tabla-usuarios th:nth-child(5),
table.tabla-usuarios td:nth-child(5) {
    width: 15%; /* "Acciones" */
}

/* Asegurar que los botones se vean bien */
table.tabla-usuarios .acciones {
    display: flex;
    justify-content: center;
    gap: 0.25rem;
}

/* --- Tabla de Tarifas (clase .tarifas-table) --- */
table.tarifas-table th:nth-child(1),
table.tarifas-table td:nth-child(1) {
    width: 30%; /* "Concepto" */
}

table.tarifas-table th:nth-child(2),
table.tarifas-table td:nth-child(2) {
    width: 20%; /* "Valor" */
}

table.tarifas-table th:nth-child(3),
table.tarifas-table td:nth-child(3) {
    width: 20%; /* "Fecha" */
}

table.tarifas-table th:nth-child(4),
table.tarifas-table td:nth-child(4) {
    width: 30%; /* "Acciones" */
}

table.tarifas-table td.text-right {
    text-align: right;
}

table.tarifas-table tbody tr {
    display: table-row;
    visibility: visible;
}

/* Asegurar que los botones se vean bien */
table.tarifas-table .acciones {
    display: flex;
    justify-content: center;
    gap: 0.25rem;
}

/* --- Tabla de Colilla de Pago (#colillaPago table) --- */
#colillaPago table th:nth-child(1),
#colillaPago table td:nth-child(1) {
    width: 40%; /* "Concepto" (puede ser diferente según tu estructura) */
}

#colillaPago table th:nth-child(2),
#colillaPago table td:nth-child(2) {
    width: 20%; /* "Valor" */
}

#colillaPago table th:nth-child(3),
#colillaPago table td:nth-child(3) {
    width: 20%; /* "Fecha" */
}

#colillaPago table th:nth-child(4),
#colillaPago table td:nth-child(4) {
    width: 20%; /* "Otra columna" */
}

/* --- Tabla Optimizada (.tabla-optimizada) --- */
/* Estilos genéricos para tablas con clase .tabla-optimizada (para otras tablas como "Registro de Trabajadores") */
/* Estilos genéricos para tablas con clase .tabla-optimizada (para otras tablas como "Registro de Trabajadores") */
table.tabla-optimizada {
    background: var(--white);
    margin: 1rem 0;
    border-radius: 8px;
    width: 100%;
    border-collapse: collapse;
}

table.tabla-optimizada th {
    padding: 0.9375rem 1.25rem;
    background: var(--primary);
    color: var(--white);
    font-weight: bold;
    text-align: center;
}

table.tabla-optimizada td {
    padding: 0.75rem 1.25rem;
    border-bottom: 1px solid var(--table-border);
    font-size: 0.875rem;
    text-align: center;
}

/* Anchos genéricos para tablas .tabla-optimizada (como "Registro de Trabajadores") */
table.tabla-optimizada:not(#operacion table.tabla-optimizada) th:nth-child(1),
table.tabla-optimizada:not(#operacion table.tabla-optimizada) td:nth-child(1) {
    width: 10%;
}

table.tabla-optimizada:not(#operacion table.tabla-optimizada) th:nth-child(2),
table.tabla-optimizada:not(#operacion table.tabla-optimizada) td:nth-child(2) {
    width: 30%;
}

table.tabla-optimizada:not(#operacion table.tabla-optimizada) th:nth-child(3),
table.tabla-optimizada:not(#operacion table.tabla-optimizada) td:nth-child(3) {
    width: 30%;
}

table.tabla-optimizada:not(#operacion table.tabla-optimizada) th:nth-child(4),
table.tabla-optimizada:not(#operacion table.tabla-optimizada) td:nth-child(4) {
    width: 30%;
}

/* Estilo específico para exceso de horas */
.exceso-horas {
    background: #ffcccc !important;
    font-weight: bold;
    color: red;
}

/* Estilos específicos para la tabla de "Registro de Jornadas" (dentro de #operacion) */
#operacion table.tabla-optimizada {
    table-layout: fixed; /* Fija el diseño para respetar los anchos */
    border: 1px solid var(--table-border);
    overflow: hidden; /* Para bordes redondeados */
}

/* Estilos para los encabezados y celdas de la tabla de jornadas */
#operacion table.tabla-optimizada th,
#operacion table.tabla-optimizada td {
    border: 1px solid var(--light-gray);
    padding: 0.5rem;
    text-align: center;
    font-size: 0.6875rem; /* 11px */
}

/* Ajustar el tamaño de fuente de los encabezados */
#operacion table.tabla-optimizada th {
    font-size: 0.6875rem;
}

/* Filas alternadas para mejorar legibilidad */
#operacion table.tabla-optimizada tbody tr:nth-child(even) {
    background-color: #f9f9f9 !important; /* Aumentar especificidad */
}

/* Resaltar filas al pasar el cursor */
#operacion table.tabla-optimizada tbody tr:hover {
    background-color: #f1f5f9 !important; /* Aumentar especificidad */
}

/* Definir anchos ajustados para las columnas */
#operacion table.tabla-optimizada th:nth-child(1),
#operacion table.tabla-optimizada td:nth-child(1) {
    width: 20%; /* "Cliente" */
    white-space: normal; /* Permitir texto multilínea */
    overflow: visible;
    text-overflow: initial;
}

#operacion table.tabla-optimizada th:nth-child(2),
#operacion table.tabla-optimizada td:nth-child(2) {
    width: 20%; /* "Colaborador" */
    white-space: normal; /* Permitir texto multilínea */
    overflow: visible;
    text-overflow: initial;
}

#operacion table.tabla-optimizada th:nth-child(3),
#operacion table.tabla-optimizada td:nth-child(3) {
    width: 10%; /* "Fecha" */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

#operacion table.tabla-optimizada th:nth-child(4),
#operacion table.tabla-optimizada td:nth-child(4) {
    width: 8%; /* "Hora Inicio" */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

#operacion table.tabla-optimizada th:nth-child(5),
#operacion table.tabla-optimizada td:nth-child(5) {
    width: 8%; /* "Hora Fin" */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

#operacion table.tabla-optimizada th:nth-child(6),
#operacion table.tabla-optimizada td:nth-child(6) {
    width: 6%; /* "Horas" */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

#operacion table.tabla-optimizada th:nth-child(7),
#operacion table.tabla-optimizada td:nth-child(7) {
    width: 6%; /* "Tipo" */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

#operacion table.tabla-optimizada th:nth-child(8),
#operacion table.tabla-optimizada td:nth-child(8) {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

#operacion table.tabla-optimizada th:nth-child(9),
#operacion table.tabla-optimizada td:nth-child(9) {
    width: 8%; /* "Valor" */
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

#operacion table.tabla-optimizada th:nth-child(10),
#operacion table.tabla-optimizada td:nth-child(10) {
    width: 8%; /* "Acciones" */
    overflow: visible;
    text-overflow: initial;
}

/* Estilizar los botones de acciones */
#operacion table.tabla-optimizada .btn-editar,
#operacion table.tabla-optimizada .btn-eliminar {
    font-size: 0.875rem;
    padding: 0.25rem;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    display: inline-flex;
    justify-content: center;
    align-items: center;
    width: 25px;
    height: 25px;
    position: relative; /* Para los tooltips */
}

/* Colores de los botones */
#operacion table.tabla-optimizada .btn-editar {
    background: var(--warning);
    color: #000;
}

#operacion table.tabla-optimizada .btn-editar:hover {
    background: var(--warning-dark);
}

#operacion table.tabla-optimizada .btn-eliminar {
    background: var(--danger);
    color: var(--white);
}

#operacion table.tabla-optimizada .btn-eliminar:hover {
    background: var(--danger-dark);
}

/* Asegurar que los botones se muestren correctamente */
#operacion table.tabla-optimizada .acciones {
    display: flex;
    justify-content: center;
    gap: 0.25rem;
}

/* Estilizar los indicadores de ordenamiento */
#operacion table.tabla-optimizada th.sortable {
    cursor: pointer;
    position: relative;
}

#operacion table.tabla-optimizada th.sortable .fas {
    margin-left: 0.25rem;
    font-size: 0.625rem;
    opacity: 0.7;
}

#operacion table.tabla-optimizada th.sortable:hover .fas {
    opacity: 1 !important; /* Aumentar especificidad */
}

/* Estilizar el estado */
#operacion table.tabla-optimizada .estado-pendiente {
    color: red;
    font-weight: bold;
}

#operacion table.tabla-optimizada .estado-completo {
    color: green;
    font-weight: bold;
}

/* Añadir tooltips a los botones de acciones */
#operacion table.tabla-optimizada .btn-editar::after,
#operacion table.tabla-optimizada .btn-eliminar::after {
    content: attr(data-tooltip);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: #333;
    color: #fff;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.75rem;
    white-space: nowrap;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.2s ease;
}

#operacion table.tabla-optimizada .btn-editar:hover::after,
#operacion table.tabla-optimizada .btn-eliminar:hover::after {
    opacity: 1;
    visibility: visible;
}

/* Responsividad */
@media (max-width: 768px) {
    #operacion table.tabla-optimizada {
        display: block;
        overflow-x: auto;
        white-space: nowrap;
    }
}
.total, #colillaPago .total {
    font-weight: bold;
    text-align: right;
    margin-top: 0.9375rem;
    font-size: 1.125rem;
    color: var(--blue);
}

/* Estilos para el modal */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    justify-content: center;
    align-items: center;
}

.modal-contenido {
    display: flex;
    flex-direction: column;
    padding: 1.25rem;
    border-radius: 8px;
    background: var(--white);
    max-width: 860px;
    max-height: 67vh;
    overflow-y: auto;
    width: 100%;
}

.modal-cerrar {
    background: var(--danger);
    color: var(--white);
    border: none;
    padding: 0.625rem;
    border-radius: 5px;
    cursor: pointer;
    margin-top: 0.625rem;
    width: 100%;
}

.modal-cerrar:hover {
    background: var(--danger-dark);
}

#fotoTrabajadorDetalle {
    max-width: 150px;
    border-radius: 50%;
    border: 2px solid var(--primary);
    margin-bottom: 0.625rem;
}

/* Estilos para formularios en modal y página */
.form-grid, .detalles-trabajador {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.9375rem;
    padding: 0.625rem;
}

.form-group {
    display: flex;
    flex-direction: column;
    margin-bottom: 0.625rem;
}

.form-group span {
    background: var(--background-internal);
    padding: 0.3125rem;
    border-radius: 5px;
    border: 1px solid var(--light-gray);
    min-height: 10px;
}

.contenedor-formulario {
    position: relative;
    max-height: 400px;
    overflow-y: auto;
    padding-bottom: 50px;
}

.contenedor-formulario::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 50px;
    background: linear-gradient(to bottom, rgba(255, 255, 255, 0), var(--white));
    pointer-events: none;
}

.photo-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    grid-column: span 3;
    margin: 1.875rem 0 1.25rem;
}

.photo-section img {
    width: 170px;
    height: 170px;
    border-radius: 50%;
    object-fit: cover;
    margin-bottom: 0.625rem;
    border: 2px solid var(--light-gray);
}

.full-width {
    grid-column: span 3;
}

/* Estilos para secciones y subsecciones */
.seccion, .subseccion {
    display: none;
    padding: 1.25rem;
    border: 1px solid var(--light-gray);
    margin-top: 0.9375rem;
    background: #f9f9f9;
}

.seccion.activo, .subseccion.activa {
    display: block;
}

/* Estilos para colilla de pago y estados */
#formularioColilla, #colillaPago {
    margin-top: 1.25rem;
}

.estado-pendiente {
    color: red;
    font-weight: bold;
}

.estado-completo {
    color: green;
    font-weight: bold;
}

.titulo-centrado {
    text-align: center;
}

/* Estilos para acciones en tablas */
.acciones {
    display: flex;
    gap: 0.3125rem;
    justify-content: center;
    align-items: center;

}

.acciones button {
    width: auto;
    padding: 0.3125rem 0.625rem;
    font-size: 0.5rem;
    border-radius: 4px;
}

/* Estilos para checklist y KPIs */
#operacionesChecklist {
    display: flex;
    flex-wrap: wrap;
    gap: 0.3125rem;
    justify-content: center;
}

#operacionesChecklist label {
    display: flex;
    align-items: center;
    gap: 0.3125rem;
}

.kpi-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.25rem;
}

.kpi-box {
    background: var(--white);
    padding: 1.25rem;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba( 0, 0, 0, 0.1);
    text-align: center;
}

.kpi-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--primary);
    margin-top: 0.625rem;
}

.checklist-item {
    margin: 0.625rem 0;
    padding: 0.625rem;
    border: 1px solid var(--light-gray);
    border-radius: 5px;
}

/* Estilos para barras de progreso */
.progress-container {
    width: 100%;
    height: 20px;
    background: #eee;
    border-radius: 10px;
    margin: 0.625rem 0;
}

.progress-bar {
    height: 100%;
    background: #4CAF50;
    border-radius: 10px;
    transition: width 0.3s ease;
}

.comparativo-numbers {
    display: flex;
    justify-content: space-between;
    margin-top: 0.9375rem;
}

.prefacturado {
    color: #2196F3;
}

.nomina {
    color: #FF9800;
}

/* Estilos para jornadas */
.jornadas-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
}

.filtros-compactos {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.filtro-group {
    display: flex;
    gap: 0.5rem;
}

.input-fecha, .select-filtro {
    flex: 1;
    padding: 0.5rem;
    border: 1px solid var(--light-gray);
    border-radius: 6px;
}

/* Estilos para el resumen de jornadas */
.resumen-jornadas {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.resumen-card {
    background: var(--white);
    padding: 1rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    text-align: center;
    transition: transform 0.2s ease;
}

.resumen-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.resumen-card.highlight {
    background: var(--success);
    color: var(--white);
}

.text-center {
    text-align: center;
}

.text-right {
    text-align: right;
}

/* Estilos para la sección financiera */
.button-group {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.button-group button {
    background: var(--blue);
    color: var(--white);
    padding: 0.5rem 1rem;
    border-radius: 5px;
    border: none;
    cursor: pointer;
    transition: background 0.3s ease;
}

.button-group button:hover {
    background: var(--blue-dark);
}

/* Media Queries */
@media (max-width: 768px) {
    .container, .form-container {
        margin: 0.625rem;
        padding: 1rem;
    }

    .header-actions {
        flex-direction: column;
        width: 100%;
    }

    .header-actions button {
        width: 100%;
        margin: 0.3125rem 0;
    }

    .filtros-compactos {
        grid-template-columns: 1fr;
    }

    .resumen-jornadas {
        grid-template-columns: 1fr;
    }

    /* Responsividad para todas las tablas */
    table, table[role="grid"], table.tabla-usuarios, table.tarifas-table, #colillaPago table, table.tabla-optimizada {
        display: block;
        overflow-x: auto;
        white-space: nowrap;
    }
}
    </style>
</head>
<body class="login-page">
<!-- Pantalla de inicio de sesión -->
<div class="login-container">
    <img
            src=""
            alt=""
            width="
0"
            height="0"
    >
    <h1>Bienvenido a AMA LOGISTICS</h1>
    <p>Optimización, Control y Eficiencia en la Gestión Logística</p>
    <input type="text" id="usuario" placeholder="Usuario" required>
    <input type="password" id="contrasena" placeholder="Contraseña" required onkeypress="if(event.key === 'Enter') iniciarSesion()">
    <button onclick="iniciarSesion()">Iniciar Sesión</button>
    <div class="footer">
        © 2023 AMA LOGISTIC. Todos los derechos reservados. | <a href="#">Política de Privacidad</a>
    </div>
</div>

<!-- Contenido principal (oculto hasta el inicio de sesión) -->
<div id="mainContent" style="display: none;">
    <div class="navbar">
        <span>AMA LOGISTIC - Sistema de Gestión</span>
        <div class="navbar-left">
            <span class="usuario-actual">Usuario: <span id="nombreUsuarioActual"></span></span>
            <button class="btn-cerrar-sesion" onclick="cerrarSesion()">Cerrar Sesión</button>
        </div>
    </div>
    <div class="tabs">
        <button onclick="mostrarSeccion('recursosHumanos')">Recursos Humanos</button>
        <button onclick="mostrarSeccion('hseq')">HSEQ</button>
        <button onclick="mostrarSeccion('operacion')">Operación</button>
        <button onclick="mostrarSeccion('financiera')">Financiera</button>
        <button onclick="mostrarSeccion('informe')">Informe</button>
        <button onclick="mostrarSeccion('personal')">Personal</button>
    </div>
<!-- Sección de Recursos Humanos -->
<div id="recursosHumanos" class="container">
    <h4>Recursos Humanos</h4>
    <div class="button-group">
        <button onclick="mostrarSubseccion('registro')" class="btn">Registro de Trabajadores</button>
        <button onclick="mostrarSubseccion('usuarios')" class="btn">Gestión de Usuarios</button>
    </div>

    <!-- Subsección de Registro de Trabajadores -->
    <section id="registro" class="subseccion" aria-label="Registro de Trabajadores">
        <h3>Registro de Trabajadores</h3>
        <div class="button-group">
            <button onclick="abrirModalTrabajador()" class="btn btn-primary">Ingresar Nuevo Trabajador</button>
            <button onclick="triggerImportTrabajadores()" class="btn btn-primary">
                <i class="fas fa-file-import" aria-hidden="true"></i> Importar Trabajadores
            </button>
            <button onclick="exportarTrabajadoresExcel()" class="btn btn-primary">
                <i class="fas fa-file-excel" aria-hidden="true"></i> Exportar Trabajadores
            </button>
        </div>
        <input type="file" id="importTrabajadoresFile" accept=".xlsx,.xls" style="display: none;" onchange="importarTrabajadoresExcel(event)">
        <h5>Lista de Trabajadores</h5>
        <input type="text" id="filtroTrabajadores" placeholder="Buscar por nombre o documento" 
               oninput="filtrarTrabajadores()" aria-label="Filtrar trabajadores">
        <table role="grid">
            <thead>
                <tr>
                    <th scope="col">#</th>
                    <th scope="col">Nombre y Apellidos</th>
                    <th scope="col">Tipo de Documento</th>
                    <th scope="col">Número de Documento</th>
                    <th scope="col">Estado</th>
		    <th scope="col">Fecha ARL</th>
                    <th scope="col">Más Información</th>
                    <th scope="col">Acciones</th>
                </tr>
            </thead>
            <tbody id="listaTrabajadores"></tbody>
        </table>
    </section>

    <!-- Modal para Ingresar Nuevo Trabajador -->
    <dialog id="modalNuevoTrabajador" class="modal">
        <div class="modal-contenido">
            <button onclick="cerrarModalTrabajador()" class="btn-close" aria-label="Cerrar modal">×</button>
            <h2>Ingresar Nuevo Trabajador</h2>
            <form id="formNuevoTrabajador" onsubmit="guardarTrabajador(event)">
                <section class="details-section">
                    <h4>Datos Básicos</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nuevoNombre">Nombre y Apellidos:</label>
                            <input type="text" id="nuevoNombre" name="nombre" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoCorreo">Correo Electrónico:</label>
                            <input type="email" id="nuevoCorreo" name="correo" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoTipoDocumento">Tipo de Documento:</label>
                            <select id="nuevoTipoDocumento" name="tipoDocumento" required>
                                <option value="">Seleccione</option>
                                <option value="CC">Cédula de Ciudadanía</option>
                                <option value="CE">Cédula de Extranjería</option>
                                <option value="TI">Tarjeta de Identidad</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="nuevoNumeroDocumento">Número de Documento:</label>
                            <input type="text" id="nuevoNumeroDocumento" name="numeroDocumento" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoFechaNacimiento">Fecha de Nacimiento:</label>
                            <input type="date" id="nuevoFechaNacimiento" name="fechaNacimiento" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoRh">RH:</label>
                            <select id="nuevoRh" name="rh" required>
                                <option value="">Seleccione</option>
                                <option value="A+">A+</option>
                                <option value="A-">A-</option>
                                <option value="B+">B+</option>
                                <option value="B-">B-</option>
                                <option value="AB+">AB+</option>
                                <option value="AB-">AB-</option>
                                <option value="O+">O+</option>
                                <option value="O-">O-</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="nuevoGenero">Género:</label>
                            <select id="nuevoGenero" name="genero" required>
                                <option value="">Seleccione</option>
                                <option value="Masculino">Masculino</option>
                                <option value="Femenino">Femenino</option>
                                <option value="Otro">Otro</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="nuevoCiudad">Ciudad:</label>
                            <input type="text" id="nuevoCiudad" name="ciudad" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoBarrio">Barrio de Residencia:</label>
                            <input type="text" id="nuevoBarrio" name="barrio" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoDireccion">Dirección de Residencia:</label>
                            <input type="text" id="nuevoDireccion" name="direccion" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoTelefonoContacto">Teléfono de Contacto:</label>
                            <input type="tel" id="nuevoTelefonoContacto" name="telefonoContacto" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoTelefonoEmergencia">Teléfono de Emergencia:</label>
                            <input type="tel" id="nuevoTelefonoEmergencia" name="telefonoEmergencia" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoEstadoCivil">Estado Civil:</label>
                            <select id="nuevoEstadoCivil" name="estadoCivil" required>
                                <option value="">Seleccione</option>
                                <option value="Soltero">Soltero</option>
                                <option value="Casado">Casado</option>
                                <option value="Unión Libre">Unión Libre</option>
                                <option value="Divorciado">Divorciado</option>
                                <option value="Viudo">Viudo</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="nuevoNumeroHijos">Número de Hijos:</label>
                            <input type="number" id="nuevoNumeroHijos" name="numeroHijos" min="0" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoEdadHijos">Edad de los Hijos:</label>
                            <input type="text" id="nuevoEdadHijos" name="edadHijos" placeholder="Ej: 5, 8, 12">
                        </div>
                        <div class="form-group">
                            <label for="nuevoArlFecha">Fecha Inicio ARL:</label>
                            <input type="date" id="nuevoArlFecha" name="arlFecha" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoEps">EPS:</label>
                            <input type="text" id="nuevoEps" name="eps" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoPension">Pensión:</label>
                            <input type="text" id="nuevoPension" name="pension" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoCesantias">Cesantías:</label>
                            <input type="text" id="nuevoCesantias" name="cesantias" required>
                        </div>
                    </div>

                    <h4>Anexos</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nuevoAnexoPdf">Subir Documento PDF:</label>
                            <input type="file" id="nuevoAnexoPdf" name="anexoPdf" accept=".pdf" multiple>
                        </div>
                    </div>

                    <h4>Información Académica</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nuevoTituloObtenido">Título Obtenido:</label>
                            <input type="text" id="nuevoTituloObtenido" name="tituloObtenido" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoInstitucion">Institución:</label>
                            <input type="text" id="nuevoInstitucion" name="institucion" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoCiudadAcademica">Ciudad Académica:</label>
                            <input type="text" id="nuevoCiudadAcademica" name="ciudadAcademica" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoUltimoGrado">Último Grado:</label>
                            <input type="text" id="nuevoUltimoGrado" name="ultimoGrado" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoAnioCulminado">Año Culminado:</label>
                            <input type="number" id="nuevoAnioCulminado" name="anioCulminado" min="1900" max="2025" required>
                        </div>
                    </div>

                    <h4>Información Laboral</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nuevoUltimaExperiencia">Última Experiencia Laboral:</label>
                            <input type="text" id="nuevoUltimaExperiencia" name="ultimaExperiencia" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoEmpresa">Empresa:</label>
                            <input type="text" id="nuevoEmpresa" name="empresa" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoCargo">Cargo:</label>
                            <input type="text" id="nuevoCargo" name="cargo" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoFechaIngresoLaboral">Fecha de Ingreso Laboral:</label>
                            <input type="date" id="nuevoFechaIngresoLaboral" name="fechaIngresoLaboral" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoFechaRetiroLaboral">Fecha de Retiro Laboral:</label>
                            <input type="date" id="nuevoFechaRetiroLaboral" name="fechaRetiroLaboral">
                        </div>
                        <div class="form-group">
                            <label for="nuevoTelefonoLaboral">Teléfono Laboral:</label>
                            <input type="tel" id="nuevoTelefonoLaboral" name="telefonoLaboral" required>
                        </div>
                    </div>

                    <h4>Acudiente</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nuevoParentesco">Parentesco:</label>
                            <input type="text" id="nuevoParentesco" name="parentesco" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoNombreFamiliar">Nombre del Familiar:</label>
                            <input type="text" id="nuevoNombreFamiliar" name="nombreFamiliar" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoTelefonoFamiliar">Teléfono del Familiar:</label>
                            <input type="tel" id="nuevoTelefonoFamiliar" name="telefonoFamiliar" required>
                        </div>
                    </div>

                    <h4>Contrato</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nuevoModeloContrato">Modelo de Contrato:</label>
                            <input type="text" id="nuevoModeloContrato" name="modeloContrato" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoCapacitacionesRecibidas">Capacitaciones Recibidas:</label>
                            <input type="text" id="nuevoCapacitacionesRecibidas" name="capacitacionesRecibidas">
                        </div>
                        <div class="form-group">
                            <label for="nuevoDocumentosEntregados">Documentos Entregados:</label>
                            <input type="text" id="nuevoDocumentosEntregados" name="documentosEntregados">
                        </div>
                    </div>

                    <h4>Cuenta Bancaria</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nuevoTipoCuenta">Tipo de Cuenta:</label>
                            <select id="nuevoTipoCuenta" name="tipoCuenta" required>
                                <option value="">Seleccione</option>
                                <option value="Ahorros">Ahorros</option>
                                <option value="Corriente">Corriente</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="nuevoBanco">Banco:</label>
                            <input type="text" id="nuevoBanco" name="banco" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoTipoDocumentoTitular">Tipo de Documento del Titular:</label>
                            <select id="nuevoTipoDocumentoTitular" name="tipoDocumentoTitular" required>
                                <option value="">Seleccione</option>
                                <option value="CC">Cédula de Ciudadanía</option>
                                <option value="CE">Cédula de Extranjería</option>
                                <option value="TI">Tarjeta de Identidad</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="nuevoNombreTitular">Nombre del Titular:</label>
                            <input type="text" id="nuevoNombreTitular" name="nombreTitular" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoNumeroDocumentoTitular">Número de Documento del Titular:</label>
                            <input type="text" id="nuevoNumeroDocumentoTitular" name="numeroDocumentoTitular" required>
                        </div>
                        <div class="form-group">
                            <label for="nuevoNumeroCuenta">Número de Cuenta:</label>
                            <input type="text" id="nuevoNumeroCuenta" name="numeroCuenta" required>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="nuevoFoto">Foto del Trabajador:</label>
                        <input type="file" id="nuevoFoto" name="foto" accept="image/*">
                    </div>
                </section>
                <button type="submit" class="btn btn-primary">Guardar Trabajador</button>
            </form>
        </div>
    </dialog>

    <!-- Modal para Más Información -->
    <dialog id="modalMasInformacion" class="modal">
        <div class="modal-contenido">
            <button onclick="cerrarModalMasInformacion()" class="btn-close" aria-label="Cerrar modal">×</button>
            <h2>Hoja de Vida del Trabajador</h2>
            <div class="worker-details">
                <section class="photo-section">
                    <img id="fotoTrabajadorDetalle" src="" alt="Foto del trabajador" class="worker-photo">
                </section>
                <section class="details-section">
                    <h4>Datos Básicos</h4>
                    <dl class="form-grid" id="detallesTrabajador">
                        <div class="form-group"><dt>ID del Trabajador:</dt><dd id="trabajadorId"></dd></div>
                        <div class="form-group"><dt>Nombre y Apellidos:</dt><dd id="trabajadorNombre"></dd></div>
                        <div class="form-group"><dt>Correo Electrónico:</dt><dd id="trabajadorCorreo"></dd></div>
                        <div class="form-group"><dt>Tipo de Documento:</dt><dd id="trabajadorTipoDocumento"></dd></div>
                        <div class="form-group"><dt>Número de Documento:</dt><dd id="trabajadorNumeroDocumento"></dd></div>
                        <div class="form-group"><dt>Fecha de Nacimiento:</dt><dd id="trabajadorFechaNacimiento"></dd></div>
                        <div class="form-group"><dt>RH:</dt><dd id="trabajadorRh"></dd></div>
                        <div class="form-group"><dt>Género:</dt><dd id="trabajadorGenero"></dd></div>
                        <div class="form-group"><dt>Ciudad:</dt><dd id="trabajadorCiudad"></dd></div>
                        <div class="form-group"><dt>Barrio de Residencia:</dt><dd id="trabajadorBarrio"></dd></div>
                        <div class="form-group"><dt>Dirección de Residencia:</dt><dd id="trabajadorDireccion"></dd></div>
                        <div class="form-group"><dt>Teléfono de Contacto:</dt><dd id="trabajadorTelefonoContacto"></dd></div>
                        <div class="form-group"><dt>Teléfono de Emergencia:</dt><dd id="trabajadorTelefonoEmergencia"></dd></div>
                        <div class="form-group"><dt>Estado Civil:</dt><dd id="trabajadorEstadoCivil"></dd></div>
                        <div class="form-group"><dt>Número de Hijos:</dt><dd id="trabajadorNumeroHijos"></dd></div>
                        <div class="form-group"><dt>Edad de los Hijos:</dt><dd id="trabajadorEdadHijos"></dd></div>
                        <div class="form-group"><dt>Estado ARL:</dt><dd id="trabajadorArlEstado"></dd></div>
                        <div class="form-group"><dt>Fecha Inicio ARL:</dt><dd id="trabajadorArlFecha"></dd></div>
                        <div class="form-group"><dt>EPS:</dt><dd id="trabajadorEps"></dd></div>
                        <div class="form-group"><dt>Pensión:</dt><dd id="trabajadorPension"></dd></div>
                        <div class="form-group"><dt>Cesantías:</dt><dd id="trabajadorCesantias"></dd></div>
                    </dl>

                    <h4>Anexos</h4>
                    <dl class="form-grid">
                        <div class="form-group"><dt>Documentos PDF:</dt><dd id="trabajadorAnexos"></dd></div>
                    </dl>

                    <h4>Paz y Salvo</h4>
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="pazYSalvoRazon">Razón del Paz y Salvo:</label>
                            <textarea id="pazYSalvoRazon" name="pazYSalvoRazon" rows="3"></textarea>
                        </div>
                        <button type="button" onclick="generarPazYSalvo()" class="btn btn-warning">Generar Paz y Salvo e Inactivar</button>
                    </div>
                </section>
            </div>
            <button onclick="generarCarnet()" class="btn btn-secondary">Generar Carnet</button>
        </div>
    </dialog>

    <!-- Subsección de Gestión de Usuarios -->
    <section id="usuarios" class="subseccion" aria-label="Gestión de Usuarios">
        <h3>Gestión de Usuarios</h3>
        <button onclick="abrirModalUsuario()" class="btn btn-primary">Agregar Nuevo Usuario</button>
        <div class="table-container">
            <h2>Lista de Usuarios</h2>
            <table role="grid">
                <thead>
                    <tr>
                        <th scope="col">Usuario</th>
                        <th scope="col">Registro Trabajadores</th>
                        <th scope="col">Registro Jornadas</th>
                        <th scope="col">Tarifas</th>
                        <th scope="col">Sedes</th>
                        <th scope="col">Acciones</th>
                    </tr>
                </thead>
                <tbody id="tablaUsuarios"></tbody>
            </table>
        </div>
    </section>
</div>

<!-- Sección de Gestión HSEQ -->
<div id="hseq" class="container">
    <h4>Gestión HSEQ</h4>
    <nav class="sub-tabs" role="tablist">
        <button role="tab" aria-controls="incidentes" onclick="mostrarSubseccionHSEQ('incidentes')">Incidentes/Accidentes</button>
        <button role="tab" aria-controls="capacitaciones" onclick="mostrarSubseccionHSEQ('capacitaciones')">Capacitaciones</button>
        <button role="tab" aria-controls="epp" onclick="mostrarSubseccionHSEQ('epp')">Control EPP</button>
        <button role="tab" aria-controls="checklist" onclick="mostrarSubseccionHSEQ('checklist')">Checklist</button>
        <button role="tab" aria-controls="riesgos" onclick="mostrarSubseccionHSEQ('riesgos')">Matriz de Riesgos</button>
    </nav>

    <section id="incidentes" class="subseccion active" role="tabpanel">
        <h3>Registro de Incidentes/Accidentes</h3>
        <button onclick="abrirModalIncidente()">Nuevo Registro</button>
        <table aria-label="Lista de incidentes">
            <thead>
                <tr>
                    <th>Fecha</th>
                    <th>Tipo</th>
                    <th>Descripción</th>
                    <th>Gravedad</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="listaIncidentes"></tbody>
        </table>
    </section>

    <section id="capacitaciones" class="subseccion" role="tabpanel">
        <h3>Evidencias de Capacitaciones</h3>
        <input type="file" id="evidenciaCapacitacion" multiple accept="image/*,.pdf" aria-label="Subir evidencias">
        <table aria-label="Lista de capacitaciones">
            <thead>
                <tr>
                    <th>Fecha</th>
                    <th>Tema</th>
                    <th>Archivos</th>
                    <th>Asistentes</th>
                </tr>
            </thead>
            <tbody id="listaCapacitaciones"></tbody>
        </table>
    </section>

    <section id="epp" class="subseccion" role="tabpanel">
        <h3>Control de Dotación y EPP</h3>
        <button onclick="abrirModalEPP()">Asignar EPP</button>
        <table aria-label="Lista de EPP">
            <thead>
                <tr>
                    <th>Trabajador</th>
                    <th>Equipo</th>
                    <th>Fecha Entrega</th>
                    <th>Vencimiento</th>
                    <th>Estado</th>
                </tr>
            </thead>
            <tbody id="listaEPP"></tbody>
        </table>
    </section>

    <section id="checklist" class="subseccion" role="tabpanel">
        <h3>Checklist de Inspecciones</h3>
        <div id="checklistContainer"></div>
        <button onclick="guardarChecklist()">Guardar Inspección</button>
    </section>

    <section id="riesgos" class="subseccion" role="tabpanel">
        <h3>Matriz de Riesgos</h3>
        <button onclick="actualizarMatriz()">Actualizar Matriz</button>
        <div id="matrizRiesgos"></div>
    </section>

    <section class="subseccion" role="region" aria-label="Panel de Control KPI">
        <h3>Panel de Control</h3>
        <div class="kpi-container">
            <div class="kpi-box">
                <h4>Tasa de Incidentes</h4>
                <div class="kpi-value" id="tasaIncidentes">0%</div>
            </div>
            <div class="kpi-box">
                <h4>Cumplimiento EPP</h4>
                <div class="kpi-value" id="cumplimientoEPP">0%</div>
            </div>
        </div>
    </section>
</div>

<!-- Modal Incidente -->
<div id="modalIncidente" class="modal" role="dialog" aria-modal="true">
    <div class="modal-contenido">
        <button class="btn-close" onclick="cerrarModalIncidente()" aria-label="Cerrar">×</button>
        <h3>Registro de Incidente</h3>
        <form id="formIncidente" onsubmit="guardarIncidente(event)">
            <input type="date" id="fechaIncidente" required aria-label="Fecha del incidente">
            <select id="tipoIncidente" required aria-label="Tipo de incidente">
                <option value="Accidente">Accidente</option>
                <option value="Incidente">Incidente</option>
                <option value="Casi Accidente">Casi Accidente</option>
            </select>
            <textarea id="descripcionIncidente" placeholder="Descripción" required aria-label="Descripción"></textarea>
            <select id="gravedadIncidente" required aria-label="Nivel de gravedad">
                <option value="Leve">Leve</option>
                <option value="Moderado">Moderado</option>
                <option value="Grave">Grave</option>
            </select>
            <button type="submit">Guardar</button>
        </form>
    </div>
</div>

<!-- Modal EPP -->
<div id="modalEPP" class="modal" role="dialog" aria-modal="true">
    <div class="modal-contenido">
        <button class="btn-close" onclick="cerrarModalEPP()" aria-label="Cerrar">×</button>
        <h3>Asignación de EPP</h3>
        <form id="formEPP" onsubmit="guardarEPP(event)">
            <div class="form-group">
                <label for="trabajadorEPP">Nombre y Apellidos:</label>
                <select id="trabajadorEPP" required>
                    <option value="">Seleccione un trabajador</option>
                    <option value="Juan Pérez">Juan Pérez</option>
                    <option value="María Gómez">María Gómez</option>
                </select>
            </div>
            <div class="form-group">
                <label for="tipoEPP">EPP entregado:</label>
                <select id="tipoEPP" required>
                    <option value="Casco">Casco</option>
                    <option value="Botas">Botas</option>
                    <option value="Guantes">Guantes</option>
                </select>
            </div>
            <div class="form-group">
                <label for="fechaEntregaEPP">Fecha de entrega de EPP:</label>
                <input type="date" id="fechaEntregaEPP" required>
            </div>
            <div class="form-group">
                <label for="vencimientoEPP">Fecha de vencimiento de EPP:</label>
                <input type="date" id="vencimientoEPP" required>
            </div>
            <button type="submit">Asignar</button>
        </form>
    </div>
</div>
<!-- Sección Operaciones -->
<div id="operacion" class="container">
    <div class="jornadas-header">
        <h4><i class="fas fa-calendar-alt" aria-hidden="true"></i> Registro de Jornadas</h4>
        <div class="header-actions">
            <button onclick="abrirModalJornada('nuevo')" class="btn btn-primary btn-registrar">
                <i class="fas fa-plus" aria-hidden="true"></i> Nuevo Turno
            </button>
            <button onclick="descargarExcel()" class="btn btn-export">
                <i class="fas fa-file-excel" aria-hidden="true"></i> Exportar a Excel
            </button>
            <button onclick="document.getElementById('importarTurnosExcel').click()" class="btn btn-import">
                <i class="fas fa-upload" aria-hidden="true"></i> Importar desde Excel
            </button>
            <input type="file" id="importarTurnosExcel" accept=".xlsx,.csv" style="display: none;" 
                   onchange="importarTurnosDesdeExcel(event)">
        </div>
    </div>
    <!-- Filtros para las jornadas -->
    <div class="filtros-compactos">
        <div class="filtro-group">
            <input type="date" id="fechaInicio" class="input-fecha" onchange="filtrarJornadas()" 
                   aria-label="Fecha de inicio">
            <input type="date" id="fechaFin" class="input-fecha" onchange="filtrarJornadas()" 
                   aria-label="Fecha de fin">
        </div>
        <div class="filtro-group">
            <select id="filtroSede" onchange="filtrarJornadas()" class="select-filtro" 
                    aria-label="Filtrar por sede de trabajo">
                <option value="">Todas las sedes</option>
            </select>
            <select id="filtroCliente" onchange="filtrarJornadas()" class="select-filtro" 
                    aria-label="Filtrar por cliente">
                <option value="">Todos los clientes</option>
            </select>
        </div>
    </div>
    <!-- Resumen de jornadas -->
    <div class="resumen-jornadas">
        <div class="resumen-card">
            <span>Horas Totales</span>
            <h3 id="totalHoras">0</h3>
        </div>
        <div class="resumen-card">
            <span>Horas Extras</span>
            <h3 id="totalExtras">0</h3>
        </div>
        <div class="resumen-card highlight">
            <span>Total a Pagar</span>
            <h3 id="totalPago">$0</h3>
        </div>
    </div>
    <!-- Tabla de jornadas -->
    <div class="table-container">
        <table class="tabla-optimizada" role="grid">
            <thead>
                <tr>
                    <th scope="col" class="sortable" data-sort="cliente">Cliente <i class="fas fa-sort"></i></th>
                    <th scope="col" class="sortable" data-sort="colaborador">Colaborador <i class="fas fa-sort"></i></th>
                    <th scope="col" class="text-center sortable" data-sort="fecha">Fecha <i class="fas fa-sort"></i></th>
                    <th scope="col" class="text-center sortable" data-sort="horaInicio">Hora Inicio <i class="fas fa-sort"></i></th>
                    <th scope="col" class="text-center sortable" data-sort="horaFin">Hora Fin <i class="fas fa-sort"></i></th>
                    <th scope="col" class="text-center sortable" data-sort="horas">Horas <i class="fas fa-sort"></i></th>
                    <th scope="col" class="text-center sortable" data-sort="tipo">Tipo <i class="fas fa-sort"></i></th>
                    <th scope="col" class="text-center sortable" data-sort="estado">Estado <i class="fas fa-sort"></i></th>
                    <th scope="col" class="text-right sortable" data-sort="valor">Valor <i class="fas fa-sort"></i></th>
                    <th scope="col" class="text-center">Acciones</th>
                </tr>
            </thead>
            <tbody id="tablaRegistrosJornadas"></tbody>
        </table>
    </div>
</div>
<!-- Sección Financiera -->
<div id="financiera" class="container">
    <h2>Financiera</h2>
    <div class="button-group">
        <button onclick="mostrarSubseccion('tarifas')">Configuración de Tarifas</button>
        <button onclick="mostrarSubseccion('nomina')">Generar Nómina</button>
        <button onclick="mostrarSubseccion('sedes')">Gestión de Sedes</button>
        <button onclick="mostrarSubseccion('prefacturacion')">Prefacturación</button>
        <button onclick="mostrarSubseccion('comparativo')">Comparativo</button>
        <button onclick="mostrarSubseccion('modificaciones')">Modificaciones</button>
        <button onclick="mostrarSubseccion('facturacion')">Facturación</button>
    </div>

    <div id="tarifas" class="subseccion" style="display: none;">
        <h3>Configuración de Tarifas</h3>
        <button onclick="abrirModalTarifa()" class="btn btn-primary">Agregar Nueva Tarifa</button>
        <h4>Tarifas Fijas para Nómina y Facturación</h4>
        <table class="tarifas-table">
            <thead>
                <tr>
                    <th>Tipo de Hora</th>
                    <th>Tarifa de Nómina (Pago a Colaboradores)</th>
                    <th>Tarifa de Facturación (Cobro a Clientes)</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="tablaTarifas">
                <tr>
                    <td>Hora Diurna</td>
                    <td>8000</td>
                    <td>10350</td>
                    <td><button onclick="editarTarifa(this)">Editar</button></td>
                </tr>
                <tr>
                    <td>Hora Extra Diurna</td>
                    <td>8000</td>
                    <td>12650</td>
                    <td><button onclick="editarTarifa(this)">Editar</button></td>
                </tr>
                <tr>
                    <td>Hora Nocturna</td>
                    <td>9500</td>
                    <td>10925</td>
                    <td><button onclick="editarTarifa(this)">Editar</button></td>
                </tr>
                <tr>
                    <td>Hora Extra Nocturna</td>
                    <td>12000</td>
                    <td>13800</td>
                    <td><button onclick="editarTarifa(this)">Editar</button></td>
                </tr>
                <tr>
                    <td>Hora Fin de Semana/Festiva</td>
                    <td>12500</td>
                    <td>14375</td>
                    <td><button onclick="editarTarifa(this)">Editar</button></td>
                </tr>
            </tbody>
        </table>
    </div>

    <div id="nomina" class="subseccion" style="display: none;">
        <h3>Generar Nómina</h3>
        <form id="nominaForm" class="form-inline">
            <label for="periodoNomina">Seleccione el período:</label>
            <input type="month" id="periodoNomina" required>
            <button type="submit" class="btn btn-primary">Generar Nómina</button>
        </form>
        <div id="resultadoNomina"></div>
    </div>

    <div id="prefacturacion" class="subseccion" style="display: none;">
        <h3>Prefacturación</h3>
        <!-- Form to Generate Prefactura -->
        <div class="bg-gray-50 shadow-md rounded-lg p-6 mb-6">
            <h4 class="text-lg font-bold text-gray-800">Generar Prefactura</h4>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                <div>
                    <label for="clientePrefacturaSeleccion" class="block text-gray-700 text-sm font-bold mb-2">Seleccionar Cliente:</label>
                    <select id="clientePrefacturaSeleccion" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                        <option value="">-- Seleccionar --</option>
                    </select>
                </div>
                <div>
                    <label for="fechaInicioPrefactura" class="block text-gray-700 text-sm font-bold mb-2">Fecha Inicio:</label>
                    <input type="date" id="fechaInicioPrefactura" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>
                <div>
                    <label for="fechaFinPrefactura" class="block text-gray-700 text-sm font-bold mb-2">Fecha Fin:</label>
                    <input type="date" id="fechaFinPrefactura" class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
                </div>
                <div>
                    <button onclick="generarPrefacturaPDF()" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-700 focus:outline-none focus:shadow-outline">Generar Prefactura (PDF)</button>
                </div>
            </div>
        </div>
        <!-- Prefacturas Table -->
        <div class="table-container">
            <h4 class="text-lg font-bold text-gray-800">Prefacturas Generadas</h4>
            <table class="tabla-optimizada">
                <thead>
                    <tr>
                        <th>Cliente</th>
                        <th>Período</th>
                        <th>Monto Total</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody id="tablaRegistrosPrefacturas"></tbody>
            </table>
        </div>
        <!-- Prefactura Summary -->
        <div id="resumenPrefacturaPDF" style="display: none;" class="bg-gray-100 shadow-md rounded-lg p-6 mt-6">
            <h4 class="text-lg font-semibold text-gray-800 mb-4">Resumen de Prefactura</h4>
            <div id="infoClientePrefactura"></div>
            <div id="detallePrefacturaPDF"></div>
            <p class="mt-4 font-bold text-gray-800">Monto Total: <span id="montoTotalPrefacturaPDF"></span></p>
            <button onclick="descargarPrefacturaPDF()" class="mt-4 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-700 focus:outline-none focus:shadow-outline">Descargar PDF</button>
        </div>
    </div>

    <div id="comparativo" class="subseccion" style="display: none;"></div>
    <div id="modificaciones" class="subseccion" style="display: none;"></div>

    <div id="facturacion" class="subseccion" style="display: none;">
        <h3>Facturación</h3>
        <form id="facturacionForm">
            <div class="form-group">
                <label>Cliente:</label>
                <input type="text" id="clienteFacturacion" required>
            </div>
            <div class="form-group">
                <label>Monto:</label>
                <input type="number" id="montoFacturacion" required>
            </div>
            <div class="form-group">
                <label>Fecha de emisión:</label>
                <input type="date" id="fechaFacturacion" required>
            </div>
            <button type="submit">Generar Factura</button>
        </form>
        <div id="resultadoFacturacion"></div>
    </div>

    <div id="sedes" class="subseccion" style="display: none;">
        <h3>Gestión de Sedes</h3>
        <button onclick="abrirModalSede()">Agregar Nueva Sede</button>
        <button onclick="document.getElementById('fileInput').click()">Importar desde Excel</button>
        <input type="file" id="fileInput" style="display: none;" onchange="importarDesdeExcel(event)">
        <h2>Lista de Sedes</h2>
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Cliente</th>
                    <th>NIT</th>
                    <th>Dirección</th>
                    <th>Ciudad</th>
                    <th>Teléfono</th>
                    <th>Fecha de Registro</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="tablaSedes"></tbody>
        </table>
    </div>
</div>
<!-- Sección de Informe -->
<div id="informe" class="container">
    <h2>Informes Generales</h2>
    <button onclick="generarInforme()">Generar Informe</button>
    <div id="resultadoInforme"></div>
</div>

<!-- Sección de Personal -->
<div id="personal" class="container">
    <h2>Modulo Colaborador</h2>
    <button onclick="mostrarColillaPago()">Mi colilla de pago</button>
    <!-- Formulario para seleccionar la quincena -->
    <div id="formularioColilla" style="display: none;">
        <label>Seleccione la quincena:</label>
        <input type="date" id="fechaInicioColilla" onchange="cargarColillaPago()">
        <input type="date" id="fechaFinColilla" onchange="cargarColillaPago()">
    </div>

    <!-- Tabla para mostrar la colilla de pago -->
    <div id="colillaPago" style="display: none;">
        <h3>Colilla de Pago</h3>
        <table>
            <thead>
            <tr>
                <th>Fecha</th>
                <th>Sede</th>
                <th>Horas Trabajadas</th>
                <th>Valor del Día</th>
                <th>Total a Pagar</th>
            </tr>
            </thead>
            <tbody id="tablaColillaPago"></tbody>
        </table>
        <div class="total" id="totalColillaPago"></div>
    </div>
    <div id="resultadoColilla"></div>
</div>

<!-- Modal para Registrar Trabajadores -->
<div id="modalTrabajadores" class="modal">
    <div class="modal-contenido">

        <!-- Botón (X) para cerrar el modal -->
        <button onclick="cerrarModalTrabajador()" class="btn-X">×</button>

        <!-- Eliminar el botón duplicado -->
        <!-- <button onclick="abrirModalTrabajador()" class="btn-registrar-trabajador">Registrar Trabajador</button> -->

        <h6>Registrar Trabajador</h6>
        <form id="registroForm">
            <div class="form-grid">
                <!-- Sección de la foto -->
                <div class="photo-section">
                    <img id="fotoTrabajadorPreview" alt="Foto del Trabajador">
                    <input type="file" id="fotoTrabajador" accept="image/*" required>
                </div>

                <!-- Información Básica -->
                <div class="form-group">
                    <label for="nombreApellidos">Nombre y Apellidos:</label>
                    <input type="text" id="nombreApellidos" required>
                </div>
                <div class="form-group">
                    <label for="correoElectronico">Correo Electrónico:</label>
                    <input type="email" id="correoElectronico" required>
                </div>
                <div class="form-group">
                    <label for="tipoDocumento">Tipo de Documento:</label>
                    <select id="tipoDocumento" required>
                        <option value="-">- -</option>
                        <option value="CC">Cédula de Ciudadanía</option>
                        <option value="CE">Cédula de Extranjería</option>
                        <option value="Pasaporte">Pasaporte</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="numeroDocumento">Número de Documento:</label>
                    <input type="text" id="numeroDocumento" required>
                </div>
                <div class="form-group">
                    <label for="fechaNacimiento">Fecha de Nacimiento:</label>
                    <input type="date" id="fechaNacimiento" onchange="validarEdad(this)" required>
                </div>
                <div class="form-group">
                    <label for="rh">RH:</label>
                    <select id="rh" required>
                        <option value="-">- -</option>
                        <option value="A+">A+</option>
                        <option value="A-">A-</option>
                        <option value="B+">B+</option>
                        <option value="B-">B-</option>
                        <option value="AB+">AB+</option>
                        <option value="AB-">AB-</option>
                        <option value="O+">O+</option>
                        <option value="O-">O-</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="genero">Género:</label>
                    <select id="genero" required>
                        <option value="-">- -</option>
                        <option value="Masculino">Masculino</option>
                        <option value="Femenino">Femenino</option>
                        <option value="Otro">Otro</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="ciudad">Ciudad:</label>
                    <input type="text" id="ciudad" required>
                </div>
                <div class="form-group">
                    <label for="barrioResidencia">Barrio de Residencia:</label>
                    <input type="text" id="barrioResidencia" required>
                </div>
                <div class="form-group">
                    <label for="direccionResidencia">Dirección de Residencia:</label>
                    <input type="text" id="direccionResidencia" required>
                </div>
                <div class="form-group">
                    <label for="telefonoContacto">Teléfono de Contacto:</label>
                    <input type="tel" id="telefonoContacto" required>
                </div>
                <div class="form-group">
                    <label for="telefonoEmergencia">Teléfono de Emergencia:</label>
                    <input type="tel" id="telefonoEmergencia" required>
                </div>
                <div class="form-group">
                    <label for="estadoCivil">Estado Civil:</label>
                    <select id="estadoCivil" required>
                        <option value="-">- -</option>
                        <option value="Soltero">Soltero</option>
                        <option value="Casado">Casado</option>
                        <option value="Divorciado">Divorciado</option>
                        <option value="Viudo">Viudo</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="numeroHijos">Número de Hijos:</label>
                    <input type="number" id="numeroHijos" min="0" required>
                </div>
                <div class="form-group">
                    <label for="edadHijos">Edad de los Hijos:</label>
                    <input type="text" id="edadHijos">
                </div>
                <div class="form-group">
                    <label for="arl">ARL:</label>
                    <select id="arl" required>
                        <option value="-">- -</option>
                        <option value="AXA Colpatria Seguros S.A.">AXA Colpatria Seguros S.A.</option>
                        <option value="ARL Colmena">ARL Colmena</option>
                        <option value="ARL La Equidad Seguros">ARL La Equidad Seguros</option>
                        <option value="ARL Liberty Seguros">ARL Liberty Seguros</option>
                        <option value="ARL Mapfre">ARL Mapfre</option>
                        <option value="ARL Positiva">ARL Positiva</option>
                        <option value="ARL Seguros Alfa">ARL Seguros Alfa</option>
                        <option value="ARL Seguros Aurora">ARL Seguros Aurora</option>
                        <option value="ARL Seguros Bolívar">ARL Seguros Bolívar</option>
                        <option value="ARL Sura">ARL Sura</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="eps">EPS:</label>
                    <select id="eps" required>
                        <option value="-">- -</option>
                        <option value="Aliansalud EPS">Aliansalud EPS</option>
                        <option value="Compensar EPS">Compensar EPS</option>
                        <option value="Sanitas EPS">Sanitas EPS</option>
                        <option value="EPS Sura">EPS Sura</option>
                        <option value="Salud Total EPS">Salud Total EPS</option>
                        <option value="Nueva EPS">Nueva EPS</option>
                        <option value="Coosalud EPS">Coosalud EPS</option>
                        <option value="Famisanar EPS">Famisanar EPS</option>
                        <option value="Capital Salud EPS">Capital Salud EPS</option>
                        <option value="SOS EPS">SOS EPS</option>
                        <option value="Mutual Ser EPS">Mutual Ser EPS</option>
                        <option value="Emssanar EPS">Emssanar EPS</option>
                        <option value="EPM Salud EPS">EPM Salud EPS</option>
                        <option value="Ecoopsos EPS">Ecoopsos EPS</option>
                        <option value="Anaswayuu EPS">Anaswayuu EPS</option>
                        <option value="Asmet Salud EPS">Asmet Salud EPS</option>
                        <option value="Cajacopi EPS">Cajacopi EPS</option>
                        <option value="Capresoca EPS">Capresoca EPS</option>
                        <option value="Dusakawi EPS">Dusakawi EPS</option>
                        <option value="Mallamas EPS">Mallamas EPS</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="pension">Pensión:</label>
                    <select id="pension" required>
                        <option value="-">- -</option>
                        <option value="Colpensiones">Colpensiones</option>
                        <option value="Porvenir">Porvenir</option>
                        <option value="Protección">Protección</option>
                        <option value="Colfondos">Colfondos</option>
                        <option value="Skandia">Skandia</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="cesantias">Cesantías:</label>
                    <select id="cesantias" required>
                        <option value="-">- -</option>
                        <option value="Porvenir">Porvenir</option>
                        <option value="Protección">Protección</option>
                        <option value="Colfondos">Colfondos</option>
                        <option value="Skandia">Skandia</option>
                        <option value="Fondo Nacional del Ahorro">Fondo Nacional del Ahorro</option>
                    </select>
                </div>

                <!-- Información Académica -->
                <div class="form-group full-width">
                    <h4>Información Académica</h4>
                </div>
                <div class="form-group">
                    <label for="tituloObtenido">Título Obtenido:</label>
                    <input type="text" id="tituloObtenido">
                </div>
                <div class="form-group">
                    <label for="institucion">Institución:</label>
                    <input type="text" id="institucion">
                </div>
                <div class="form-group">
                    <label for="ciudadAcademica">Ciudad Académica:</label>
                    <input type="text" id="ciudadAcademica">
                </div>
                <div class="form-group">
                    <label for="ultimoGrado">Último Grado:</label>
                    <input type="text" id="ultimoGrado">
                </div>
                <div class="form-group">
                    <label for="anioCulminado">Año Culminado:</label>
                    <input type="date" id="anioCulminado">
                </div>

                <!-- Información Laboral -->
                <div class="form-group full-width">
                    <h4>Información Laboral</h4>
                </div>
                <div class="form-group">
                    <label for="empresa">Empresa:</label>
                    <input type="text" id="empresa">
                </div>
                <div class="form-group">
                    <label for="cargo">Cargo:</label>
                    <input type="text" id="cargo">
                </div>
                <div class="form-group">
                    <label for="LaborEx">Labores:</label>
                    <input type="text" id="LaborEx">
                </div>
                <div class="form-group">
                    <label for="fechaIngresoLaboral">Fecha de Ingreso:</label>
                    <input type="date" id="fechaIngresoLaboral">
                </div>
                <div class="form-group">
                    <label for="fechaRetiroLaboral">Fecha de Retiro:</label>
                    <input type="date" id="fechaRetiroLaboral">
                </div>
                <div class="form-group">
                    <label for="telefonoLaboral">Teléfono:</label>
                    <input type="tel" id="telefonoLaboral">
                </div>

                <!-- Información Familiar -->
                <div class="form-group full-width">
                    <h4>Información Familiar</h4>
                </div>
                <div class="form-group">
                    <label for="parentesco">Parentesco:</label>
                    <input type="text" id="parentesco">
                </div>
                <div class="form-group">
                    <label for="nombreFamiliar">Nombre:</label>
                    <input type="text" id="nombreFamiliar">
                </div>
                <div class="form-group">
                    <label for="telefonoFamiliar">Teléfono:</label>
                    <input type="tel" id="telefonoFamiliar">
                </div>

                <!-- Contratación -->
                <div class="form-group full-width">
                    <h4>Contratación</h4>
                </div>
                <div class="form-group">
                    <label for="Modcontrato">Modelo de contrato:</label>
                    <select id="Modcontrato" required>
                        <option value="-">- -</option>
                        <option value="ObraLabor">Obra y Labor</option>
                        <option value="PrestacionServicios">Prestación de Servicios</option>
                        <option value="Indefinido">Indefinido</option>
                        <option value="Definido">Definido</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="PerfilCargo">Perfil del cargo:</label>
                    <select id="PerfilCargo" required>
                        <option value="-">- -</option>
                        <option value="GerenteGeneral">Gerente General</option>
                        <option value="GerenteAdministrativa">Gerente Administrativo</option>
                        <option value="IngenieroProyectos">Ingeniero de Proyectos</option>
                        <option value="JefeOperaciones">Jefe de Operaciones</option>
                        <option value="JefeRRHH">Jefe Recursos Humanos</option>
                        <option value="NominaYFacturacion">Nómina y Facturación</option>
                        <option value="CoordinadorOperaciones">Coordinador de Operaciones</option>
                        <option value="ContadorPublico">Contador Público</option>
                        <option value="CoordinadorComercial">Coordinador Comercial</option>
                        <option value="CoordinadorSST">Coordinador SST</option>
                        <option value="AuxiliarAdministrativo">Auxiliar Administrativo</option>
                        <option value="AnalistaOperacionesSAC">Analista de Operaciones y SAC</option>
                        <option value="Supervisor">Supervisor</option>
                        <option value="AnalistaContable">Analista Contable</option>
                        <option value="CoordinadorRRHH">Coordinador RRHH</option>
                        <option value="AuxiliarLogistico">Auxiliar Logístico</option>
                        <option value="Montacarguista">Montacarguista</option>
                        <option value="ConductorC1">Conductor C1</option>
                        <option value="ConductorC2">Conductor C2</option>
                        <option value="Motorizado">Motorizado</option>
                        <option value="Mensajero">Mensajero</option>
                    </select>
                </div>
                <!-- Capacitaciones Recibidas -->
                <div class="form-group full-width">
                    <h4>Capacitaciones Recibidas</h4>
                    <label><input type="checkbox" id="capacitacion1" name="capacitaciones" value="Inducción y reinducción"> Inducción y reinducción</label>
                    <label><input type="checkbox" id="capacitacion2" name="capacitaciones" value="Buenas practicas"> Buenas practicas</label>
                    <label><input type="checkbox" id="capacitacion3" name="capacitaciones" value="Accidentes"> Accidentes</label>
                    <label><input type="checkbox" id="capacitacion4" name="capacitaciones" value="Riesgos"> Riesgos</label>
                    <label><input type="checkbox" id="capacitacion5" name="capacitaciones" value="Comites y brigada"> Comites y brigada</label>
                    <label><input type="checkbox" id="capacitacion6" name="capacitaciones" value="Actos y condiciones inseguras"> Actos y condiciones inseguras</label>
                    <label><input type="checkbox" id="capacitacion7" name="capacitaciones" value="¿Que hacer en casos de emergencias?"> ¿Que hacer en casos de emergencias?</label>
                    <label><input type="checkbox" id="capacitacion8" name="capacitaciones" value="Dotación y EPP"> Dotación y EPP</label>
                    <label><input type="checkbox" id="capacitacion9" name="capacitaciones" value="Politica SST"> Politica SST</label>
                    <label><input type="checkbox" id="capacitacion10" name="capacitaciones" value="Politica de Prevención del Consumo de Alcohol, Tabaco y otras Sustancias Psicoactivas"> Politica de Prevención del Consumo de Alcohol, Tabaco y otras Sustancias Psicoactivas</label>
                </div>

                <!-- Documentos Recibidos -->
                <div class="form-group full-width">
                    <h4>Documentos Recibidos</h4>
                    <label><input type="checkbox" id="documento1" name="documentos" value="Formato único de hoja de vida"> Formato único de hoja de vida</label>
                    <label><input type="checkbox" id="documento2" name="documentos" value="Pruebas psicotecnicas"> Pruebas psicotecnicas</label>
                    <label><input type="checkbox" id="documento3" name="documentos" value="Fotocopia documentos de identidad"> Fotocopia documentos de identidad</label>
                    <label><input type="checkbox" id="documento4" name="documentos" value="Antecedentes disciplinarios (Procuraduría-Policía-Contraloria)"> Antecedentes disciplinarios (Procuraduría-Policía-Contraloria)</label>
                    <label><input type="checkbox" id="documento5" name="documentos" value="Certificados laborales"> Certificados laborales</label>
                    <label><input type="checkbox" id="documento6" name="documentos" value="Certificados de estudios"> Certificados de estudios</label>
                    <label><input type="checkbox" id="documento7" name="documentos" value="Certificados de experiencia laboral"> Certificados de experiencia laboral</label>
                    <label><input type="checkbox" id="documento8" name="documentos" value="Validación de referencias"> Validación de referencias</label>
                    <label><input type="checkbox" id="documento9" name="documentos" value="Certificado afiliación a E.P.S."> Certificado afiliación a E.P.S.</label>
                    <label><input type="checkbox" id="documento10" name="documentos" value="Certificado afiliación a A.F.P."> Certificado afiliación a A.F.P.</label>
                    <label><input type="checkbox" id="documento11" name="documentos" value="Fotocopia registro unitario (R.U.T.)"> Fotocopia registro unitario (R.U.T.)</label>
                    <label><input type="checkbox" id="documento12" name="documentos" value="Examen médico de ingreso"> Examen médico de ingreso</label>
                    <label><input type="checkbox" id="documento13" name="documentos" value="Certificación bancaria"> Certificación bancaria</label>
                    <label><input type="checkbox" id="documento14" name="documentos" value="Contrato y anexos"> Contrato y anexos</label>
                </div>
                <!-- Cuenta bancaria -->
                <div class="form-group full-width">
                    <h4>Cuenta Bancaria</h4>
                </div>
                <div class="form-group">
                    <label for="TipoCuenta">Tipo de Cuenta:</label>
                    <select id="TipoCuenta" required>
                        <option value="-">- -</option>
                        <option value="Ahorros">Ahorros</option>
                        <option value="Corriente">Corriente</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="Banco">Entidad:</label>
                    <select id="Banco" required>
                        <option value="-">- -</option>
                        <option value="Banco Caja Socia">Banco Caja Social</option>
                        <option value="Bancolombia">Bancolombia</option>
                        <option value="Banco de Bogotá">Banco de Bogotá</option>
                        <option value="Banco de Occidente">Banco de Occidente</option>
                        <option value="Banco Av Villas">Banco Av Villas</option>
                        <option value="Banco Popular">Banco Popular</option>
                        <option value="BBVA">BBVA</option>
                        <option value="MOVII">MOVII</option>
                        <option value="Banco Davivienda">Banco Davivienda</option>
                        <option value="Daviplata">Banco Daviplata</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="tipoDocumentoTitular">Tipo de Documento del titular:</label>
                    <select id="tipoDocumentoTitular" required>
                        <option value="-">- -</option>
                        <option value="Cédula de Ciudadanía">Cédula de Ciudadanía</option>
                        <option value="Cédula de Extranjería">Cédula de Extranjería</option>
                        <option value="Pasaporte">Pasaporte</option>
                        <option value="NIT">NIT</option>
                        <option value="Tarjeta de Identidad">Tarjeta de identidad</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="nombreTitular">Nombre del titular:</label>
                    <input type="text" id="nombreTitular" required>
                </div>
                <div class="form-group">
                    <label for="numeroDocumentotitular">Número de Documento titular:</label>
                    <input type="text" id="numeroDocumentoTitular" required>
                </div>
                <div class="form-group">
                    <label for="numeroCuenta">Número de Cuenta:</label>
                    <input type="text" id="numeroCuenta" required>
                </div>
            </div>
            <button type="submit" class="btn-registrar-trabajador">Registrar Trabajador</button>
        </form>
        <button class="modal-cerrar" onclick="cerrarModalTrabajador()">Cerrar</button>
    </div>
</div>




<div id="modalEditarTrabajador" class="modal">
    <div class="modal-contenido">
        <h2>Editar Trabajador</h2>
        <form id="editarTrabajadorForm">
            <input type="hidden" id="editarTrabajadorId">

            <div id="vistaPreviaEditarFoto" style="text-align: center; margin-bottom: 20px;">
                <img id="editarFotoTrabajadorPreview" src="" alt="Foto del Trabajador" style="max-width: 150px; border-radius: 50%; display: none;">
            </div>
            <label>Foto del Trabajador:</label>
            <input type="file" id="editarFotoTrabajador" accept="image/*">

            <div class="form-grid">
                <div class="form-group">
                    <label>Nombre y Apellidos:</label>
                    <input type="text" id="editarNombreApellidos" required>
                </div>
                <div class="form-group">
                    <label>Correo Electrónico:</label>
                    <input type="email" id="editarCorreoElectronico" required>
                </div>
                <div class="form-group">
                    <label>Tipo de Documento:</label>
                    <select id="editarTipoDocumento" required>
                        <option value="CC">Cédula de Ciudadanía</option>
                        <option value="CE">Cédula de Extranjería</option>
                        <option value="Pasaporte">Pasaporte</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Número de Documento:</label>
                    <input type="text" id="editarNumeroDocumento" required>
                </div>
                <div class="form-group">
                    <label>Fecha de Nacimiento:</label>
                    <input type="date" id="editarFechaNacimiento" required>
                </div>
                <div class="form-group">
                    <label>RH:</label>
                    <select id="editarRh" required>
                        <option value="A+">A+</option>
                        <option value="A-">A-</option>
                        <option value="B+">B+</option>
                        <option value="B-">B-</option>
                        <option value="AB+">AB+</option>
                        <option value="AB-">AB-</option>
                        <option value="O+">O+</option>
                        <option value="O-">O-</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Género:</label>
                    <select id="editarGenero" required>
                        <option value="Masculino">Masculino</option>
                        <option value="Femenino">Femenino</option>
                        <option value="Otro">Otro</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Ciudad:</label>
                    <input type="text" id="editarCiudad" required>
                </div>
                <div class="form-group">
                    <label>Barrio de Residencia:</label>
                    <input type="text" id="editarBarrioResidencia" required>
                </div>
                <div class="form-group">
                    <label>Dirección de Residencia:</label>
                    <input type="text" id="editarDireccionResidencia" required>
                </div>
                <div class="form-group">
                    <label>Teléfono de Contacto:</label>
                    <input type="tel" id="editarTelefonoContacto" required>
                </div>
                <div class="form-group">
                    <label>Teléfono de Emergencia:</label>
                    <input type="tel" id="editarTelefonoEmergencia" required>
                </div>
                <div class="form-group">
                    <label>Estado Civil:</label>
                    <select id="editarEstadoCivil" required>
                        <option value="Soltero">Soltero</option>
                        <option value="Casado">Casado</option>
                        <option value="Divorciado">Divorciado</option>
                        <option value="Viudo">Viudo</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Número de Hijos:</label>
                    <input type="number" id="editarNumeroHijos" min="0" required>
                </div>
                <div class="form-group">
                    <label>Edad de los Hijos:</label>
                    <input type="text" id="editarEdadHijos">
                </div>
                <div class="form-group">
                    <label>ARL:</label>
                    <select id="editarArl" required>
                        <option value="AXA Colpatria Seguros S.A.">AXA Colpatria Seguros S.A.</option>
                        <option value="ARL Colmena">ARL Colmena</option>
                        <option value="ARL La Equidad Seguros">ARL La Equidad Seguros</option>
                        <option value="ARL Liberty Seguros">ARL Liberty Seguros</option>
                        <option value="ARL Mapfre">ARL Mapfre</option>
                        <option value="ARL Positiva">ARL Positiva</option>
                        <option value="ARL Seguros Alfa">ARL Seguros Alfa</option>
                        <option value="ARL Seguros Aurora">ARL Seguros Aurora</option>
                        <option value="ARL Seguros Bolívar">ARL Seguros Bolívar</option>
                        <option value="ARL Sura">ARL Sura</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>EPS:</label>
                    <select id="editarEps" required>
                        <option value="Aliansalud EPS">Aliansalud EPS</option>
                        <option value="Compensar EPS">Compensar EPS</option>
                        <option value="Sanitas EPS">Sanitas EPS</option>
                        <option value="EPS Sura">EPS Sura</option>
                        <option value="Salud Total EPS">Salud Total EPS</option>
                        <option value="Nueva EPS">Nueva EPS</option>
                        <option value="Coosalud EPS">Coosalud EPS</option>
                        <option value="Famisanar EPS">Famisanar EPS</option>
                        <option value="Capital Salud EPS">Capital Salud EPS</option>
                        <option value="SOS EPS">SOS EPS</option>
                        <option value="Mutual Ser EPS">Mutual Ser EPS</option>
                        <option value="Emssanar EPS">Emssanar EPS</option>
                        <option value="EPM Salud EPS">EPM Salud EPS</option>
                        <option value="Ecoopsos EPS">Ecoopsos EPS</option>
                        <option value="Anaswayuu EPS">Anaswayuu EPS</option>
                        <option value="Asmet Salud EPS">Asmet Salud EPS</option>
                        <option value="Cajacopi EPS">Cajacopi EPS</option>
                        <option value="Capresoca EPS">Capresoca EPS</option>
                        <option value="Dusakawi EPS">Dusakawi EPS</option>
                        <option value="Mallamas EPS">Mallamas EPS</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Pensión:</label>
                    <select id="editarPension" required>
                        <option value="Colpensiones">Colpensiones</option>
                        <option value="Porvenir">Porvenir</option>
                        <option value="Protección">Protección</option>
                        <option value="Colfondos">Colfondos</option>
                        <option value="Skandia">Skandia</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Cesantías:</label>
                    <select id="editarCesantias" required>
                        <option value="Porvenir">Porvenir</option>
                        <option value="Protección">Protección</option>
                        <option value="Colfondos">Colfondos</option>
                        <option value="Skandia">Skandia</option>
                        <option value="Fondo Nacional del Ahorro">Fondo Nacional del Ahorro</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Título Obtenido:</label>
                    <input type="text" id="editarTituloObtenido">
                </div>
                <div class="form-group">
                    <label>Institución:</label>
                    <input type="text" id="editarInstitucion">
                </div>
                <div class="form-group">
                    <label>Ciudad Académica:</label>
                    <input type="text" id="editarCiudadAcademica">
                </div>
                <div class="form-group">
                    <label>Último Grado:</label>
                    <input type="text" id="editarUltimoGrado">
                </div>
                <div class="form-group">
                    <label>Año Culminado:</label>
                    <input type="date" id="editarAnioCulminado">
                </div>
                <div class="form-group">
                    <label>Última Experiencia Laboral:</label>
                    <input type="text" id="editarUltimaExperiencia">
                </div>
                <div class="form-group">
                    <label>Empresa:</label>
                    <input type="text" id="editarEmpresa">
                </div>
                <div class="form-group">
                    <label>Cargo:</label>
                    <input type="text" id="editarCargo">
                </div>
                <div class="form-group">
                    <label>Fecha de Ingreso Laboral:</label>
                    <input type="date" id="editarFechaIngresoLaboral">
                </div>
                <div class="form-group">
                    <label>Fecha de Retiro Laboral:</label>
                    <input type="date" id="editarFechaRetiroLaboral">
                </div>
                <div class="form-group">
                    <label>Teléfono Laboral:</label>
                    <input type="tel" id="editarTelefonoLaboral">
                </div>
                <div class="form-group">
                    <label>Parentesco:</label>
                    <input type="text" id="editarParentesco">
                </div>
                <div class="form-group">
                    <label>Nombre del Familiar:</label>
                    <input type="text" id="editarNombreFamiliar">
                </div>
                <div class="form-group">
                    <label>Teléfono del Familiar:</label>
                    <input type="tel" id="editarTelefonoFamiliar">
                </div>
                <div class="form-group">
                    <label>Modelo de Contrato:</label>
                    <select id="editarModcontrato" required>
                        <option value="ObraLabor">Obra y Labor</option>
                        <option value="PrestacionServicios">Prestación de Servicios</option>
                        <option value="Indefinido">Indefinido</option>
                        <option value="Definido">Definido</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Capacitaciones Recibidas:</label>
                    <input type="text" id="editarCapacitacionesRecibidas">
                </div>
                <div class="form-group">
                    <label>Documentos Entregados:</label>
                    <input type="text" id="editarDocrecibidos">
                </div>
                <div class="form-group">
                    <label>Tipo de Cuenta:</label>
                    <select id="editarTipoCuenta" required>
                        <option value="Ahorros">Ahorros</option>
                        <option value="Corriente">Corriente</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Banco:</label>
                    <select id="editarBanco" required>
                        <option value="BANCO_CAJA_SOCIAL">Banco Caja Social</option>
                        <option value="BANCOLOMBIA">Bancolombia</option>
                        <option value="BANCO_DE_BOGOTA">Banco de Bogotá</option>
                        <option value="BANCO_DE_OCCIDENTE">Banco de Occidente</option>
                        <option value="BANCO_AV_VILLAS">Banco Av Villas</option>
                        <option value="DALE">Dale</option>
                        <option value="BANCO_POPULAR">Banco Popular</option>
                        <option value="BBVA">BBVA</option>
                        <option value="MOVII">MOVII</option>
                        <option value="BANCO_DAVIVIENDA">Banco Davivienda</option>
                        <option value="DAVIPLATA">Banco Daviplata</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Tipo de Documento del Titular:</label>
                    <select id="editarTipoDocumentoTitular" required>
                        <option value="CC">Cédula de Ciudadanía</option>
                        <option value="CE">Cédula de Extranjería</option>
                        <option value="Pasaporte">Pasaporte</option>
                        <option value="NIT">NIT</option>
                        <option value="TarjetadeIdentidad">Tarjeta de identidad</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Nombre del Titular:</label>
                    <input type="text" id="editarNombreTitular" required>
                </div>
                <div class="form-group">
                    <label>Número de Documento del Titular:</label>
                    <input type="text" id="editarNumeroDocumentoTitular" required>
                </div>
                <div class="form-group">
                    <label>Número de Cuenta:</label>
                    <input type="text" id="editarNumeroCuenta" required>
                </div>

                <div class="form-group">
                    <label for="editarEstado">Estado del Trabajador:</label>
                    <select class="form-control" id="editarEstado">
                        <option value="Activo">Activo</option>
                        <option value="Inactivo">Inactivo</option>
                    </select>
                </div>
                <div class="form-group" id="motivoInactivacionContainer" style="display: none;">
                    <label for="editarMotivoInactivacion">Motivo de Inactivación:</label>
                    <textarea class="form-control" id="editarMotivoInactivacion" rows="3"></textarea>
                </div>
            </div>
            <button type="submit" class="btn-registrar-trabajador">Guardar cambios</button>
        </form>
        <button class="modal-cerrar" onclick="cerrarModalEditarTrabajador()">Cerrar</button>
    </div>
</div>

<div id="modalJornadas" class="modal">
    <div class="modal-contenido">
        <h2>Registrar Jornada Laboral</h2>
        <form id="registroJornadaForm">
            <div class="form-group">
                <label for="nombreTrabajadorJornada">Colaborador:</label>
                <select id="nombreTrabajadorJornada" required class="form-control">
                    <option value="">Seleccione un colaborador</option>
                </select>
            </div>

            <div class="form-group">
                <label for="ciudadJornada">Ciudad:</label>
                <select id="ciudadJornada" required onchange="actualizarClientesPorCiudad()" class="form-control">
                    <option value="">Seleccione ciudad</option>
                </select>
            </div>

            <div class="form-group">
                <label for="sede">Sede:</label>
                <select id="sede" required class="form-control">
                    <option value="">Seleccione una sede</option>
                </select>
            </div>

            <div class="form-group">
                <label for="fechaJornada">Fecha:</label>
                <input type="date" id="fechaJornada" required class="form-control">
            </div>

            <div class="form-group">
                <label for="horaInicio">Hora de inicio:</label>
                <input type="time" id="horaInicio" required class="form-control">
            </div>

            <div class="form-group">
                <label for="horaFin">Hora de fin:</label>
                <input type="time" id="horaFin" required class="form-control">
            </div>

            <div class="form-group">
                <label for="horasDescuento">Horas a descontar:</label>
                <input type="number" id="horasDescuento" min="0" step="0.5" value="0" class="form-control">
            </div>

            <div class="form-group">
                <label for="tipoJornada">Tipo de Jornada:</label>
                <select id="tipoJornada" required class="form-control">
                    <option value="diurna">Diurna</option>
                    <option value="nocturna">Nocturna</option>
                    <option value="dominical">Dominical/Festiva</option>
                </select>
            </div>

            <button type="submit" class="btn btn-primary">Registrar Jornada</button>
        </form>
        <button class="modal-cerrar btn btn-secondary mt-2" onclick="cerrarModalJornada()">Cerrar</button>
    </div>
</div>
<!-- Modal para Editar Jornadas Laborales -->
<div id="modalEditarJornada" class="modal">
    <div class="modal-contenido">
        <h2>Editar Jornada Laboral</h2>
        <form id="editarJornadaForm">
            <input type="hidden" id="editarJornadaId">
            <label>Nombre del trabajador:</label>
            <select id="editarNombreTrabajadorJornada" required disabled>
                <option value="">Seleccione un trabajador</option>
            </select>
            <label>Sede de trabajo:</label>
            <select id="editarSede" required onchange="cargarLineasEditar()">
                <option value="">Seleccione una sede</option>
            </select>
            <label>Línea:</label>
            <select id="editarLinea" required>
                <option value="">Seleccione una línea</option>
            </select>
            <label>Fecha:</label>
            <input type="date" id="editarFechaJornada" required>
            <label>Hora de inicio:</label>
            <input type="time" id="editarHoraInicio" required>
            <label>Hora de fin:</label>
            <input type="time" id="editarHoraFin" required>
            <label>Horas a descontar:</label>
            <input type="number" id="editarHorasDescuento" min="0" step="0.5" value="0">
            <label>Tipo de Jornada:</label>
            <select id="editarTipoJornada" required>
                <option value="diurna">Diurna</option>
                <option value="nocturna">Nocturna</option>
                <option value="dominical">Dominical/Festiva</option>
            </select>
            <button onclick="abrirModalTrabajador()" class="btn-registrar-trabajador">Guardar cambios</button>
        </form>
        <button class="modal-cerrar" onclick="cerrarModalEditarJornada()">Cerrar</button>
    </div>
</div>

<!-- Modal para Agregar Tarifas -->
<div id="modalTarifas" class="modal">
    <div class="modal-contenido">

        <h2>Agregar Tarifa</h2>
        <form id="tarifasForm">
            <label>Registrar Tarifas por Ciudad:</label>
            <select id="sedeTarifa" required onchange="cargarTarifas()">
                <option value="">Seleccione una ciudad</option>
            </select>
            <label>Cliente:</label>
            <select id="clienteTarifa" required>
                <option value="">Seleccione un cliente</option>
                <!-- Las opciones se llenarán dinámicamente con JavaScript -->
            </select>
            <label>Operación:</label>
            <select id="operacionTarifa" required>
                <option value="">Seleccione una operación</option>
                <option value="Picking">Picking</option>
                <option value="Packing">Packing</option>
                <option value="Descarque">Descarque</option>
                <option value="Bodega">Bodega</option>
                <option value="Ruta">Ruta</option>
                <option value="Conductor">Conductor</option>
                <option value="Montacargas">Montacargas</option>
                <option value="Auxiliar">Auxiliar</option>
                <option value="Asesor Call Center">Asesor Call Center</option>
                <option value="Mensajero">Mensajero</option>
                <option value="Motorizado">Motorizado</option>
                <option value="Maquila">Maquila</option>
            </select>

            <h4>Tarifas de Pago</h4>
            <label>Valor por hora diurna (pago):</label>
            <input type="number" id="tarifaDiurnaPago" min="0" required>
            <label>Valor por hora extra diurna (pago):</label>
            <input type="number" id="tarifaExtraDiurnaPago" min="0" required>
            <label>Valor por hora nocturna (pago):</label>
            <input type="number" id="tarifaNocturnaPago" min="0" required>
            <label>Valor por hora extra nocturna (pago):</label>
            <input type="number" id="tarifaExtraNocturnaPago" min="0" required>
            <label>Valor por hora dominical/festiva (pago):</label>
            <input type="number" id="tarifaDominicalPago" min="0" required>

            <h4>Tarifas de Cobro</h4>
            <label>Valor por hora diurna (cobro):</label>
            <input type="number" id="tarifaDiurnaCobro" min="0" required>
            <label>Valor por hora extra diurna (cobro):</label>
            <input type="number" id="tarifaExtraDiurnaCobro" min="0" required>
            <label>Valor por hora nocturna (cobro):</label>
            <input type="number" id="tarifaNocturnaCobro" min="0" required>
            <label>Valor por hora extra nocturna (cobro):</label>
            <input type="number" id="tarifaExtraNocturnaCobro" min="0" required>
            <label>Valor por hora dominical/festiva (cobro):</label>
            <input type="number" id="tarifaDominicalCobro" min="0" required>

            <button type="submit">Guardar Tarifa</button>
        </form>
        <button class="modal-cerrar" onclick="cerrarModalTarifa()">Cerrar</button>
    </div>
</div>

<!-- Modal para Editar Tarifas -->
<div id="modalEditarTarifa" class="modal">
    <div class="modal-contenido">
        <h2>Editar Tarifa</h2>
        <form id="editarTarifasForm">
            <label>Sede:</label>
            <input type="text" id="editarSedeTarifa" required>

            <label>Operación:</label>
            <input type="text" id="editarOperacionTarifa" required>

            <h4>Tarifas de Pago</h4>
            <label>Valor por hora diurna (pago):</label>
            <input type="number" id="editarTarifaDiurnaPago" required>

            <label>Valor por hora extra diurna (pago):</label>
            <input type="number" id="editarTarifaExtraDiurnaPago" required>

            <label>Valor por hora nocturna (pago):</label>
            <input type="number" id="editarTarifaNocturnaPago" required>

            <label>Valor por hora extra nocturna (pago):</label>
            <input type="number" id="editarTarifaExtraNocturnaPago" required>

            <label>Valor por hora dominical/festiva (pago):</label>
            <input type="number" id="editarTarifaDominicalPago" required>

            <h4>Tarifas de Cobro</h4>
            <label>Valor por hora diurna (cobro):</label>
            <input type="number" id="editarTarifaDiurnaCobro" required>

            <label>Valor por hora extra diurna (cobro):</label>
            <input type="number" id="editarTarifaExtraDiurnaCobro" required>

            <label>Valor por hora nocturna (cobro):</label>
            <input type="number" id="editarTarifaNocturnaCobro" required>

            <label>Valor por hora extra nocturna (cobro):</label>
            <input type="number" id="editarTarifaExtraNocturnaCobro" required>

            <label>Valor por hora dominical/festiva (cobro):</label>
            <input type="number" id="editarTarifaDominicalCobro" required>

            <button type="submit">Guardar Cambios</button>
        </form>
        <button class="modal-cerrar" onclick="cerrarModalEditarTarifa()">Cerrar</button>
    </div>
</div>

<!-- Modal para Agregar Sedes -->
<div id="modalSede" class="modal">
    <div class="modal-contenido">
        <h3>Agregar Nueva Sede</h3>
        <label>Ciudad:</label>
        <input type="text" id="ciudadSede" required>

        <label>Cliente:</label>
        <input type="text" id="clienteSede" required>

        <label>Operación:</label>
        <div id="operacionesChecklist">
            <label><input type="checkbox" name="operacion" value="Picking"> Picking</label><br>
            <label><input type="checkbox" name="operacion" value="Packing"> Packing</label><br>
            <label><input type="checkbox" name="operacion" value="Descarque"> Descarque</label><br>
            <label><input type="checkbox" name="operacion" value="Bodega"> Bodega</label><br>
            <label><input type="checkbox" name="operacion" value="Ruta"> Ruta</label><br>
            <label><input type="checkbox" name="operacion" value="Conductor"> Conductor</label><br>
            <label><input type="checkbox" name="operacion" value="Montacargas"> Montacargas</label><br>
            <label><input type="checkbox" name="operacion" value="Auxiliar"> Auxiliar</label><br>
            <label><input type="checkbox" name="operacion" value="Asesor Call Center"> Asesor Call Center</label><br>
            <label><input type="checkbox" name="operacion" value="Mensajero"> Mensajero</label><br>
            <label><input type="checkbox" name="operacion" value="Motorizado"> Motorizado</label><br>
            <label><input type="checkbox" name="operacion" value="Maquila"> Maquila</label><br>
        </div>

        <label>NIT:</label>
        <input type="text" id="nitSede" required>

        <label>Dirección:</label>
        <input type="text" id="direccionSede" required>

        <label>Teléfono:</label>
        <input type="text" id="telefonoSede" required>

        <div class="form-group">
            <label>Fecha de Creación:</label>
            <input type="date" id="fechaCreacion" required>
        </div>

        <button onclick="guardarSede()">Guardar</button>
        <button onclick="cerrarModalSede()">Cerrar</button>
    </div>
</div>

<!-- Modal para Agregar Usuarios -->
<div id="modalUsuarios" class="modal">
    <div class="modal-contenido">
        <h2>Agregar Usuario</h2>
        <form id="usuariosForm">
            <label>Nombre de usuario:</label>
            <input type="text" id="nombreUsuario" required>
            <label>Contraseña:</label>
            <input type="password" id="contrasenaUsuario" required>
            <label>Acceso a Registro de Trabajadores:</label>
            <input type="checkbox" id="accesoTrabajadores">
            <label>Acceso a Registro de Jornadas:</label>
            <input type="checkbox" id="accesoJornadas">
            <label>Acceso a Tarifas:</label>
            <input type="checkbox" id="accessoTarifas">
            <label>Acceso a Sedes:</label>
            <input type="checkbox" id="accessoSedes">
            <button type="submit">Guardar Usuario</button>
        </form>
        <button class="modal-cerrar" onclick="cerrarModalUsuario()">Cerrar</button>
    </div>
</div>

<!-- Modal para Editar Usuarios -->
<div id="modalEditarUsuario" class="modal">
    <div class="modal-contenido">
        <h2>Editar Usuario</h2>
        <form id="editarUsuarioForm">
            <input type="hidden" id="editarUsuarioId">
            <label>Nombre de usuario:</label>
            <input type="text" id="editarNombreUsuario" required disabled>
            <label>Acceso a Registro de Trabajadores:</label>
            <input type="checkbox" id="editarAccesoTrabajadores">
            <label>Acceso a Registro de Jornadas:</label>
            <input type="checkbox" id="editarAccesoJornadas">
            <label>Acceso a Tarifas:</label>
            <input type="checkbox" id="editarAccessoTarifas">
            <label>Acceso a Sedes:</label>
            <input type="checkbox" id="editarAccessoSedes">
            <button type="submit" class="btn-registrar-trabajador">Guardar cambios</button>
        </form>
        <button class="modal-cerrar" onclick="cerrarModalEditarUsuario()">Cerrar</button>
    </div>
</div>

<script>

let tarifas = JSON.parse(localStorage.getItem("tarifas")) || [];
let trabajadores = JSON.parse(localStorage.getItem("trabajadores")) || [];

// Tarifas fijas globales
const tarifasFijas = {
    tarifasPago: {
        diurna: 8000,
        extraDiurna: 8000,
        nocturna: 9500,
        extraNocturna: 12000,
        dominical: 12500
    },
    tarifasCobro: {
        diurna: 10350,
        extraDiurna: 12650,
        nocturna: 10925,
        extraNocturna: 13800,
        dominical: 14375
    }
};

let registrosJornadas = JSON.parse(localStorage.getItem("registrosJornadas")) || [];
let sedes = JSON.parse(localStorage.getItem("sedes")) || [];
let usuarios = JSON.parse(localStorage.getItem("usuarios")) || [];
let usuarioActual = null;
let idCounter = 0;

function inicializarContador() {
const contadorGuardado = localStorage.getItem('idCounter');
idCounter = contadorGuardado ? parseInt(contadorGuardado) : 0;
}

inicializarContador(); 

function generarIdUnico() {
idCounter++;
localStorage.setItem('idCounter', idCounter.toString());
return idCounter;
}

function iniciarSesion() {
const usuario = document.getElementById("usuario").value.trim();
const contrasena = document.getElementById("contrasena").value.trim();
const usuarioEncontrado = usuarios.find(u => 
    u.nombre.toLowerCase() === usuario.toLowerCase() && 
    u.contrasena === contrasena
);
if (usuarioEncontrado) {
    usuarioActual = usuarioEncontrado;
    document.body.classList.remove("login-page");
    document.body.classList.add("internal-page");
    document.body.style.backgroundImage = "none";
    document.querySelector(".login-container").style.display = "none";
    document.getElementById("mainContent").style.display = "block";
    document.getElementById("nombreUsuarioActual").textContent = usuarioActual.nombre;
    mostrarSeccion('personal'); // Mostrar la sección de Personal por defecto
    actualizarTabsSegunPermisos();
} else {
    Swal.fire("Error", "Usuario o contraseña incorrectos", "error");
}
}


function subirFoto(file) {
const formData = new FormData();
formData.append("foto", file);
fetch("/subir-foto", {
    method: "POST",
    body: formData
})
.then(response => response.json())
.then(data => {
    if (data.url) {
        // Guardar la URL en el localStorage
        localStorage.setItem("fotoTrabajador", data.url);
    }
});
}

function generarContraseñaSegura() {
const caracteres = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
let contraseña = "";
for (let i = 0; i < 10; i++) {
    contraseña += caracteres.charAt(Math.floor(Math.random() * caracteres.length));
}
return contraseña;
}

    // Cerrar sesión
    function cerrarSesion() {
        usuarioActual = null;
        document.body.classList.remove("internal-page");
        document.body.classList.add("login-page");
        document.body.style.backgroundImage = "url('https://via.placeholder.com/1920x1080')";
        document.querySelector(".login-container").style.display = "block";
        document.getElementById("mainContent").style.display = "none";
    }

    // Actualizar las pestañas según los permisos del usuario
function actualizarTabsSegunPermisos() {
const tabs = document.querySelectorAll(".tabs button");
tabs.forEach(tab => {
    const seccion = tab.getAttribute("onclick").replace("mostrarSeccion('", "").replace("')", "");
    if (usuarioActual.nombre === "Gerente") {
        tab.style.display = "inline-block"; // Mostrar todas las pestañas
    } else {
        if (!usuarioActual[`acceso${seccion.charAt(0).toUpperCase() + seccion.slice(1)}`]) {
            tab.style.display = "none";
        } else {
            tab.style.display = "inline-block";
        }
    }
});
}

// Inicialización de usuarios al cargar la página
document.addEventListener("DOMContentLoaded", function() {
let usuarios = JSON.parse(localStorage.getItem("usuarios")) || [];
if (usuarios.length === 0) {
    usuarios.push({
        nombre: "Gerente",
        contrasena: "AMALOGISTICA",
        accesoTrabajadores: true,
        accesoJornadas: true,
        accessoTarifas: true,
        accessoSedes: true
    });
    localStorage.setItem("usuarios", JSON.stringify(usuarios));
}
mostrarUsuarios(); // Llamar a la función después de inicializar
});

// Función para mostrar usuarios en la tabla
function mostrarUsuarios() {
let tbody = document.getElementById("tablaUsuarios");
tbody.innerHTML = "";
usuarios.forEach((usuario, index) => {
    let fila = `<tr>
        <td>${usuario.nombre}</td>
        <td>${usuario.accesoTrabajadores ? "✅" : "❌"}</td>
        <td>${usuario.accesoJornadas ? "✅" : "❌"}</td>
        <td>${usuario.accessoTarifas ? "✅" : "❌"}</td>
        <td>${usuario.accessoSedes ? "✅" : "❌"}</td>
        <td class="acciones">
            <button class="btn-editar" onclick="abrirModalEditarUsuario(${index})">Editar</button>
            <button class="btn-eliminar" onclick="eliminarUsuario(${index})">Eliminar</button>
        </td>
    </tr>`;
    tbody.innerHTML += fila;
});
}


function validarNumero(input) {
    input.value = input.value.replace(/[^0-9]/g, ''); // Eliminar caracteres no numéricos
}

function validarFechaNacimiento(input) {
    const fechaNacimiento = new Date(input.value);
    const hoy = new Date();
    const edad = hoy.getFullYear() - fechaNacimiento.getFullYear();

    // Verificar si la persona es mayor de 18 años
    if (edad < 18 || (edad === 18 && hoy < new Date(hoy.getFullYear(), fechaNacimiento.getMonth(), fechaNacimiento.getDate()))) {
        Swal.fire("Error", "El trabajador debe ser mayor de 18 años", "error");
        input.value = ""; // Limpiar el campo si no es válido
    }
}

function calcularEstadoARL(fechaInicio) {
    if (!fechaInicio || isNaN(new Date(fechaInicio))) return "Sin fecha";
    const hoy = new Date();
    const inicio = new Date(fechaInicio);
    const diffTime = hoy - inicio;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    if (diffDays < 0) return "No iniciada";
    if (diffDays <= 5) return "Renovar";
    if (diffDays <= 20) return "Próxima a vencer";
    return "Vigente";
}

// Función para generar paz y salvo (sin funcionalidad completa)
function generarPazYSalvo() {
    const razon = document.getElementById('pazYSalvoRazon').value;
    if (razon.trim() === '') {
        Swal.fire("Error", "Por favor, ingrese la razón del paz y salvo", "error");
        return;
    }
    // Aquí iría la lógica para guardar el paz y salvo (backend)
    console.log('Generando paz y salvo con razón:', razon);
    // Actualizar estado del trabajador a inactivo (se manejará en guardarCambiosTrabajador)
    const index = parseInt(document.getElementById("editarTrabajadorId").value);
    if (index >= 0 && index < trabajadores.length) {
        trabajadores[index].estado = "Inactivo";
        trabajadores[index].motivoInactivacion = razon;
        localStorage.setItem("trabajadores", JSON.stringify(trabajadores));
        actualizarListaTrabajadores();
        cerrarModalMasInformacion(); // Cierra el modal de "Más Información"
        Swal.fire("Éxito", "Paz y salvo generado. Trabajador inactivado.", "success");
        // O podrías cerrar el modal de edición si el paz y salvo se genera desde allí
        // cerrarModalEditarTrabajador();
    } else {
        Swal.fire("Error", "No se pudo actualizar el estado del trabajador.", "error");
    }
}

/*EDITAR*/
function abrirModalEditarTrabajador(index) {
    let trabajador = trabajadores[index];
    document.getElementById("editarTrabajadorId").value = index;

    // Cargar la foto del trabajador si está disponible
    const fotoTrabajadorPreview = document.getElementById("editarFotoTrabajadorPreview");
    if (trabajador.foto) {
        fotoTrabajadorPreview.src = trabajador.foto;
        fotoTrabajadorPreview.style.display = "block";
    } else {
        fotoTrabajadorPreview.style.display = "none";
    }

    // Cargar los demás campos
    document.getElementById("editarNombreApellidos").value = trabajador.nombreApellidos || "";
    document.getElementById("editarCorreoElectronico").value = trabajador.correoElectronico || "";
    document.getElementById("editarTipoDocumento").value = trabajador.tipoDocumento || "";
    document.getElementById("editarNumeroDocumento").value = trabajador.numeroDocumento || "";
    document.getElementById("editarFechaNacimiento").value = trabajador.fechaNacimiento || "";
    document.getElementById("editarRh").value = trabajador.rh || "";
    document.getElementById("editarGenero").value = trabajador.genero || "";
    document.getElementById("editarCiudad").value = trabajador.ciudad || "";
    document.getElementById("editarBarrioResidencia").value = trabajador.barrioResidencia || "";
    document.getElementById("editarDireccionResidencia").value = trabajador.direccionResidencia || "";
    document.getElementById("editarTelefonoContacto").value = trabajador.telefonoContacto || "";
    document.getElementById("editarTelefonoEmergencia").value = trabajador.telefonoEmergencia || "";
    document.getElementById("editarEstadoCivil").value = trabajador.estadoCivil || "";
    document.getElementById("editarNumeroHijos").value = trabajador.numeroHijos || "";
    document.getElementById("editarEdadHijos").value = trabajador.edadHijos || "";
    document.getElementById("editarArl").value = trabajador.arl || "";
    document.getElementById("editarEps").value = trabajador.eps || "";
    document.getElementById("editarPension").value = trabajador.pension || "";
    document.getElementById("editarCesantias").value = trabajador.cesantias || "";
    document.getElementById("editarTituloObtenido").value = trabajador.tituloObtenido || "";
    document.getElementById("editarInstitucion").value = trabajador.institucion || "";
    document.getElementById("editarCiudadAcademica").value = trabajador.ciudadAcademica || "";
    document.getElementById("editarUltimoGrado").value = trabajador.ultimoGrado || "";
    document.getElementById("editarAnioCulminado").value = trabajador.anioCulminado || "";
    document.getElementById("editarUltimaExperiencia").value = trabajador.ultimaExperiencia || "";
    document.getElementById("editarEmpresa").value = trabajador.empresa || "";
    document.getElementById("editarCargo").value = trabajador.cargo || "";
    document.getElementById("editarFechaIngresoLaboral").value = trabajador.fechaIngresoLaboral || "";
    document.getElementById("editarFechaRetiroLaboral").value = trabajador.fechaRetiroLaboral || "";
    document.getElementById("editarTelefonoLaboral").value = trabajador.telefonoLaboral || "";
    document.getElementById("editarParentesco").value = trabajador.parentesco || "";
    document.getElementById("editarNombreFamiliar").value = trabajador.nombreFamiliar || "";
    document.getElementById("editarTelefonoFamiliar").value = trabajador.telefonoFamiliar || "";
    document.getElementById("editarModcontrato").value = trabajador.Modcontrato || "";
    document.getElementById("editarCapacitacionesRecibidas").value = trabajador.capacitacionesRecibidas || "";
    document.getElementById("editarDocrecibidos").value = trabajador.Docrecibidos || "";
    document.getElementById("editarTipoCuenta").value = trabajador.tipoCuenta || "";
    document.getElementById("editarBanco").value = trabajador.banco || "";
    document.getElementById("editarTipoDocumentoTitular").value = trabajador.tipoDocumentoTitular || "";
    document.getElementById("editarNombreTitular").value = trabajador.nombreTitular || "";
    document.getElementById("editarNumeroDocumentoTitular").value = trabajador.numeroDocumentoTitular || "";
    document.getElementById("editarNumeroCuenta").value = trabajador.numeroCuenta || "";

    // Cargar el estado y motivo de inactivación
    document.getElementById("editarEstado").value = trabajador.estado || "Activo";
    const motivoInactivacionContainer = document.getElementById("motivoInactivacionContainer");
    if (trabajador.estado === "Inactivo" && trabajador.motivoInactivacion) {
        document.getElementById("editarMotivoInactivacion").value = trabajador.motivoInactivacion;
        motivoInactivacionContainer.style.display = "block";
    } else {
        document.getElementById("editarMotivoInactivacion").value = "";
        motivoInactivacionContainer.style.display = "none";
    }

    // Remover el listener anterior para evitar duplicados
    const editarEstadoSelect = document.getElementById("editarEstado");
    editarEstadoSelect.removeEventListener("change", toggleMotivoInactivacion);
    // Agregar el listener para mostrar/ocultar el motivo al cambiar el estado
    editarEstadoSelect.addEventListener("change", toggleMotivoInactivacion);

    // Mostrar el modal
    document.getElementById("modalEditarTrabajador").style.display = "flex";
}

function toggleMotivoInactivacion() {
    const motivoInactivacionContainer = document.getElementById("motivoInactivacionContainer");
    if (this.value === "Inactivo") {
        motivoInactivacionContainer.style.display = "block";
    } else {
        document.getElementById("editarMotivoInactivacion").value = "";
        motivoInactivacionContainer.style.display = "none";
    }
}

// Manejar la subida de la foto en el modal de edición
document.getElementById("fotoTrabajador").addEventListener("change", function () {
    const archivo = this.files[0];
    if (archivo) {
        const lector = new FileReader();
        lector.onload = function (e) {
            document.getElementById("fotoTrabajadorPreview").src = e.target.result;
            document.getElementById("fotoTrabajadorPreview").style.display = "block";
        };
        lector.readAsDataURL(archivo);
    }
});
document.getElementById("editarFotoTrabajador").addEventListener("change", function () {
    const archivo = this.files[0];
    if (archivo) {
        const lector = new FileReader();
        lector.onload = function (e) {
            document.getElementById("editarFotoTrabajadorPreview").src = e.target.result;
        };
        lector.readAsDataURL(archivo);
    }
});

document.getElementById("editarTrabajadorForm").addEventListener("submit", function(event) {
    event.preventDefault();
    let index = document.getElementById("editarTrabajadorId").value;
    if (index >= 0 && index < trabajadores.length) {
        let trabajador = trabajadores[index];

        // Actualizar todos los campos
        trabajador.nombreApellidos = document.getElementById("editarNombreApellidos").value;
        trabajador.correoElectronico = document.getElementById("editarCorreoElectronico").value;
        trabajador.tipoDocumento = document.getElementById("editarTipoDocumento").value;
        trabajador.numeroDocumento = document.getElementById("editarNumeroDocumento").value;
        trabajador.fechaNacimiento = document.getElementById("editarFechaNacimiento").value;
        trabajador.rh = document.getElementById("editarRh").value;
        trabajador.genero = document.getElementById("editarGenero").value;
        trabajador.ciudad = document.getElementById("editarCiudad").value;
        trabajador.barrioResidencia = document.getElementById("editarBarrioResidencia").value;
        trabajador.direccionResidencia = document.getElementById("editarDireccionResidencia").value;
        trabajador.telefonoContacto = document.getElementById("editarTelefonoContacto").value;
        trabajador.telefonoEmergencia = document.getElementById("editarTelefonoEmergencia").value;
        trabajador.estadoCivil = document.getElementById("editarEstadoCivil").value;
        trabajador.numeroHijos = document.getElementById("editarNumeroHijos").value;
        trabajador.edadHijos = document.getElementById("editarEdadHijos").value;
        trabajador.arl = document.getElementById("editarArl").value;
        trabajador.eps = document.getElementById("editarEps").value;
        trabajador.pension = document.getElementById("editarPension").value;
        trabajador.cesantias = document.getElementById("editarCesantias").value;
        trabajador.tituloObtenido = document.getElementById("editarTituloObtenido").value;
        trabajador.institucion = document.getElementById("editarInstitucion").value;
        trabajador.ciudadAcademica = document.getElementById("editarCiudadAcademica").value;
        trabajador.ultimoGrado = document.getElementById("editarUltimoGrado").value;
        trabajador.anioCulminado = document.getElementById("editarAnioCulminado").value;
        trabajador.ultimaExperiencia = document.getElementById("editarUltimaExperiencia").value;
        trabajador.empresa = document.getElementById("editarEmpresa").value;
        trabajador.cargo = document.getElementById("editarCargo").value;
        trabajador.fechaIngresoLaboral = document.getElementById("editarFechaIngresoLaboral").value;
        trabajador.fechaRetiroLaboral = document.getElementById("editarFechaRetiroLaboral").value;
        trabajador.telefonoLaboral = document.getElementById("editarTelefonoLaboral").value;
        trabajador.parentesco = document.getElementById("editarParentesco").value;
        trabajador.nombreFamiliar = document.getElementById("editarNombreFamiliar").value;
        trabajador.telefonoFamiliar = document.getElementById("editarTelefonoFamiliar").value;
        trabajador.Modcontrato = document.getElementById("editarModcontrato").value;
        trabajador.capacitacionesRecibidas = document.getElementById("editarCapacitacionesRecibidas").value;
        trabajador.Docrecibidos = document.getElementById("editarDocrecibidos").value;
        trabajador.tipoCuenta = document.getElementById("editarTipoCuenta").value;
        trabajador.banco = document.getElementById("editarBanco").value;
        trabajador.tipoDocumentoTitular = document.getElementById("editarTipoDocumentoTitular").value;
        trabajador.nombreTitular = document.getElementById("editarNombreTitular").value;
        trabajador.numeroDocumentoTitular = document.getElementById("editarNumeroDocumentoTitular").value;
        trabajador.numeroCuenta = document.getElementById("editarNumeroCuenta").value;

        // Actualizar el estado y motivo de inactivación
        trabajador.estado = document.getElementById("editarEstado").value;
        if (trabajador.estado === "Inactivo") {
            trabajador.motivoInactivacion = document.getElementById("editarMotivoInactivacion").value;
        } else {
            delete trabajador.motivoInactivacion;
        }

        // Guardar cambios en localStorage
        localStorage.setItem("trabajadores", JSON.stringify(trabajadores));

        // Actualizar la lista de trabajadores
        actualizarListaTrabajadores();

        // Mostrar mensaje de éxito
        Swal.fire("Éxito", "Trabajador actualizado correctamente", "success");

        // Cerrar el modal
        cerrarModalEditarTrabajador();
    } else {
        Swal.fire("Error", "No se pudo actualizar el trabajador.", "error");
    }
});

function eliminarJornada(index) {
Swal.fire({
    title: '¿Eliminar registro?',
    text: "Esta acción no se puede deshacer",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Sí, eliminar!'
}).then((result) => {
    if (result.isConfirmed) {
        registrosJornadas.splice(index, 1);
        localStorage.setItem("registrosJornadas", JSON.stringify(registrosJornadas));
        mostrarRegistrosJornadas();
        Swal.fire('Eliminado!', 'El registro fue eliminado.', 'success');
    }
});
}


function editarJornada(index) {
const jornada = registrosJornadas[index];
// Llenar formulario con los datos
document.getElementById("nombreTrabajadorJornada").value = jornada.trabajador;
document.getElementById("sede").value = jornada.sede;
document.getElementById("operacion").value = jornada.operacion;
document.getElementById("fechaJornada").value = jornada.fecha;
document.getElementById("horaInicio").value = jornada.horaInicio;
document.getElementById("horaFin").value = jornada.horaFin;
document.getElementById("tipoJornada").value = jornada.tipoJornada;

// Eliminar el registro antiguo
registrosJornadas.splice(index, 1);

// Abrir modal
abrirModalJornada();
}


function cerrarModalEditarTrabajador() {
document.getElementById("modalEditarTrabajador").style.display = "none";
}
    // Mostrar secciones
function mostrarSeccion(id) {
document.querySelectorAll('.container').forEach(seccion => seccion.style.display = 'none');
document.getElementById(id).style.display = 'block';

if (id === 'sedes') {
    mostrarSedes(); // Llamar directamente la función
    actualizarFiltroSedes(); // Actualizar filtros si es necesario
}
}

function mostrarSubseccion(id) {
    try {
        document.querySelectorAll('.subseccion').forEach(subseccion => {
            subseccion.style.display = 'none';
        });
        const elemento = document.getElementById(id);
        if (elemento) {
            elemento.style.display = 'block';
            if (id === 'tarifas') {
                llenarTablaTarifas();
            } else if (id === 'registro') {
                // Asegurarse de que los datos estén actualizados
                trabajadores = JSON.parse(localStorage.getItem("trabajadores")) || [];
                console.log("Trabajadores al mostrar 'registro':", trabajadores);
                actualizarListaTrabajadores();
            }
        } else {
            console.error(`No se encontró el elemento con id: ${id}`);
        }
    } catch (error) {
        console.error('Error en mostrarSubseccion:', error);
    }
}
function llenarTablaTarifas() {
    const tarifas = [
        { tipo: "Hora Diurna", nomina: 8000, facturacion: 10350 },
        { tipo: "Hora Extra Diurna", nomina: 8000, facturacion: 12650 },
        { tipo: "Hora Nocturna", nomina: 9500, facturacion: 10925 },
        { tipo: "Hora Extra Nocturna", nomina: 12000, facturacion: 13800 },
        { tipo: "Hora Fin de Semana/Festiva", nomina: 12500, facturacion: 14375 }
    ];

    const tbody = document.getElementById('tablaTarifas');
    if (tbody) {
        tbody.innerHTML = ''; // Limpia la tabla para evitar duplicados
        tarifas.forEach(tarifa => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${tarifa.tipo}</td>
                <td class="text-right">${tarifa.nomina}</td>
                <td class="text-right">${tarifa.facturacion}</td>
                <td><button onclick="editarTarifa(this)" class="btn btn-editar">Editar</button></td>
            `;
            tbody.appendChild(row);
        });
    } else {
        console.error('No se encontró el elemento con id: tablaTarifas');
    }
}

function mostrarUsuarios() {
const tbody = document.getElementById("tablaUsuarios");
tbody.innerHTML = ""; // Limpia la tabla

// Obtiene usuarios del localStorage
const usuarios = JSON.parse(localStorage.getItem("usuarios")) || [];

usuarios.forEach((usuario, index) => {
    const fila = `
        <tr>
            <td>${usuario.nombre}</td>
            <td>${usuario.accesoTrabajadores ? "✅" : "❌"}</td>
            <td>${usuario.accesoJornadas ? "✅" : "❌"}</td>
            <td>${usuario.accessoTarifas ? "✅" : "❌"}</td>
            <td>${usuario.accessoSedes ? "✅" : "❌"}</td>
            <td class="acciones">
                <button class="btn-editar" onclick="abrirModalEditarUsuario(${index})">Editar</button>
                <button class="btn-eliminar" onclick="eliminarUsuario(${index})">Eliminar</button>
            </td>
        </tr>
    `;
    tbody.innerHTML += fila;
});
}

//Función Generar Nomina
document.getElementById("nominaForm").addEventListener("submit", function(event) {
event.preventDefault();
let periodo = document.getElementById("periodoNomina").value;
// Lógica para generar la nómina
let resultado = `Nómina generada para el período: ${periodo}`;
document.getElementById("resultadoNomina").textContent = resultado;
});

//Función Generar Factura

document.getElementById("facturacionForm").addEventListener("submit", function(event) {
event.preventDefault();
let cliente = document.getElementById("clienteFacturacion").value;
let monto = document.getElementById("montoFacturacion").value;
let fecha = document.getElementById("fechaFacturacion").value;
// Lógica para generar la factura
let resultado = `Factura generada para ${cliente} por un monto de $${monto} el ${fecha}`;
document.getElementById("resultadoFacturacion").textContent = resultado;
});

//Función Generar Informe

function generarInforme() {
// Lógica para generar el informe
let resultado = "Informe generado con éxito.";
document.getElementById("resultadoInforme").textContent = resultado;
}

    // Funciones para abrir y cerrar modales
    function abrirModalJornada() {
        actualizarFiltroTrabajadores();
        actualizarFiltroSedes();
        document.getElementById("modalJornadas").style.display = "flex";
    }
    function cerrarModalJornada() {
        document.getElementById("modalJornadas").style.display = "none";
    }

function cerrarModalMasInformacion() {
document.getElementById("modalMasInformacion").style.display = "none";
}
   

function abrirModalEditarJornada(index) {
let registro = registrosJornadas[index];
document.getElementById("editarJornadaId").value = index;

// Cargar datos en los campos (solo lectura para nombre, sede y operación)
document.getElementById("editarNombreTrabajadorJornada").value = registro.nombre;
document.getElementById("editarSede").value = registro.sede;
document.getElementById("editarOperacion").value = registro.operacion;

// Permitir edición solo de fecha, hora de inicio y hora de fin
document.getElementById("editarFechaJornada").value = registro.fecha;
document.getElementById("editarHoraInicio").value = registro.horaInicio;
document.getElementById("editarHoraFin").value = registro.horaFin;

// Mostrar el modal
document.getElementById("modalEditarJornada").style.display = "flex";
}

//Guardar cambios jornadas

document.getElementById("editarJornadaForm").addEventListener("submit", function(event) {
event.preventDefault();
let index = document.getElementById("editarJornadaId").value;
let registro = registrosJornadas[index];

// Actualizar solo los campos editables
registro.fecha = document.getElementById("editarFechaJornada").value;
registro.horaInicio = document.getElementById("editarHoraInicio").value;
registro.horaFin = document.getElementById("editarHoraFin").value;

// Recalcular horas trabajadas y valor total
registro.horasTrabajadas = calcularHoras(registro.horaInicio, registro.horaFin);
registro.horasExtras = Math.max(0, registro.horasTrabajadas - 8);

// Buscar tarifa para la sede
let tarifaSede = tarifas.find(t => t.sede === registro.sede);
if (tarifaSede) {
    if (registro.tipoJornada === "diurna") {
        registro.valorTotal = (Math.min(registro.horasTrabajadas, 8) * tarifaSede.diurna) + (registro.horasExtras * tarifaSede.extraDiurna);
    } else if (registro.tipoJornada === "nocturna") {
        registro.valorTotal = (Math.min(registro.horasTrabajadas, 8) * tarifaSede.nocturna) + (registro.horasExtras * tarifaSede.extraNocturna);
    } else if (registro.tipoJornada === "dominical") {
        registro.valorTotal = registro.horasTrabajadas * tarifaSede.dominical;
    }
}

// Guardar cambios en localStorage
localStorage.setItem("registrosJornadas", JSON.stringify(registrosJornadas));

// Actualizar la tabla de jornadas
mostrarRegistrosJornadas();

// Cerrar el modal
Swal.fire("Éxito", "Jornada actualizada correctamente", "success");
cerrarModalEditarJornada();
});
   
function cerrarModalEditarJornada() {
        document.getElementById("modalEditarJornada").style.display = "none";
    }
    function abrirModalTrabajador() {
        document.getElementById("modalTrabajadores").style.display = "flex";
    }
// Corregir la llamada incorrecta
function cerrarModalTrabajador() {
document.getElementById("modalTrabajadores").style.display = "none";
}
    function abrirModalTarifa() {
        actualizarFiltroSedes();
        document.getElementById("modalTarifas").style.display = "flex";
    }
    function cerrarModalTarifa() {
        document.getElementById("modalTarifas").style.display = "none";
    }
    function abrirModalSede() {
        document.getElementById("modalSedes").style.display = "flex";
    }
    function cerrarModalSede() {
        document.getElementById("modalSedes").style.display = "none";
    }
    function abrirModalUsuario() {
        document.getElementById("modalUsuarios").style.display = "flex";
    }
    function cerrarModalUsuario() {
        document.getElementById("modalUsuarios").style.display = "none";
    }

function abrirModalEditarUsuario(index) {
let usuario = usuarios[index];
document.getElementById("editarUsuarioId").value = index;
document.getElementById("editarNombreUsuario").value = usuario.nombre;
document.getElementById("editarAccesoTrabajadores").checked = usuario.accesoTrabajadores;
document.getElementById("editarAccesoJornadas").checked = usuario.accesoJornadas;
document.getElementById("editarAccessoTarifas").checked = usuario.accessoTarifas;
document.getElementById("editarAccessoSedes").checked = usuario.accessoSedes;
document.getElementById("modalEditarUsuario").style.display = "flex";

        document.getElementById("modalEditarUsuario").style.display = "flex";
    }
    function cerrarModalEditarUsuario() {
        document.getElementById("modalEditarUsuario").style.display = "none";
    }

    // Registrar usuario
document.getElementById("usuariosForm").addEventListener("submit", function(event) {
    event.preventDefault();
    let nombreUsuario = document.getElementById("nombreUsuario").value;
    let contrasenaUsuario = document.getElementById("contrasenaUsuario").value;
    let accesoTrabajadores = document.getElementById("accesoTrabajadores").checked;
    let accesoJornadas = document.getElementById("accesoJornadas").checked;
    let accessoTarifas = document.getElementById("accessoTarifas").checked;
    let accessoSedes = document.getElementById("accessoSedes").checked;

if (usuarios.some(u => u.nombre === nombreUsuario)) {
Swal.fire("Error", "El nombre de usuario ya existe", "error");
return;
}
function validarEdad(input) {
const fechaNacimiento = new Date(input.value);
const hoy = new Date();
let edad = hoy.getFullYear() - fechaNacimiento.getFullYear();
const mes = hoy.getMonth() - fechaNacimiento.getMonth();
if (mes < 0 || (mes === 0 && hoy.getDate() < fechaNacimiento.getDate())) {
    edad--;
}
if (edad < 18) {
    Swal.fire("Error", "El trabajador debe ser mayor de 18 años", "error");
    input.value = "";
    return false;
}
return true;
}

function calcularEdad(fechaNacimiento) {
const hoy = new Date();
const fechaNac = new Date(fechaNacimiento);
let edad = hoy.getFullYear() - fechaNac.getFullYear();
const mes = hoy.getMonth() - fechaNac.getMonth();
if (mes < 0 || (mes === 0 && hoy.getDate() < fechaNac.getDate())) {
    edad--;
}
return edad;
}

// Obtener el campo de subida de foto
const inputFoto = document.getElementById("fotoTrabajador");

// Mostrar vista previa de la imagen
inputFoto.addEventListener("change", function () {
const archivo = this.files[0]; // Obtener el archivo seleccionado
if (archivo) {
    const lector = new FileReader(); // Crear un lector de archivos
    lector.onload = function (e) {
        // Mostrar la imagen en un elemento <img>
        const vistaPrevia = document.createElement("img");
        vistaPrevia.src = e.target.result; // Asignar la imagen cargada
        vistaPrevia.style.maxWidth = "100px"; // Tamaño máximo de la vista previa
        vistaPrevia.style.marginTop = "10px"; // Espacio superior
        document.getElementById("registroForm").appendChild(vistaPrevia); // Agregar al formulario
    };
    lector.readAsDataURL(archivo); // Leer el archivo como URL
}
});
function registrarTrabajador() {

const camposObligatorios = [
    "nombreApellidos", "correoElectronico", "tipoDocumento", 
    "numeroDocumento", "fechaNacimiento", "rh", "genero", 
    "ciudad", "barrioResidencia", "direccionResidencia", 
    "telefonoContacto", "telefonoEmergencia", "estadoCivil", 
    "numeroHijos", "arl", "eps", "pension", "cesantias", 
    "tituloObtenido", "institucion", "ciudadAcademica", 
    "ultimoGrado", "anioCulminado", "empresa", "cargo"
];

for (let campo of camposObligatorios) {
    if (!document.getElementById(campo).value) {
        Swal.fire("Error", "Todos los campos son obligatorios", "error");
        return;
    }
}

// Obtener el número de documento del formulario
const numeroDocumento = document.getElementById("numeroDocumento").value;

// Verificar si ya existe un trabajador con el mismo número de documento
const existeTrabajador = trabajadores.some(trabajador => trabajador.numeroDocumento === numeroDocumento);

if (existeTrabajador) {
    Swal.fire("Error", "Ya existe un trabajador con este número de documento", "error");
    return; // Detener la ejecución si el número de documento ya existe
}

const fechaNacimientoInput = document.getElementById("fechaNacimiento");

// Validar la edad antes de continuar
if (!validarEdad(fechaNacimientoInput)) {
    return; // Detener la ejecución si la validación falla
}

// Obtener la fecha de nacimiento del formulario
const fechaNacimiento = document.getElementById("fechaNacimiento").value;

// Calcular la edad
const edad = calcularEdad(fechaNacimiento);

// Verificar si la edad es menor a 18 años
if (edad < 18) {
    Swal.fire("Error", "El trabajador debe ser mayor de 18 años", "error");
    return; // Detener la ejecución si la edad es menor a 18
}

let capacitacionesRecibidas = {
    capacitacion1: document.getElementById("capacitacion1").checked,
    capacitacion2: document.getElementById("capacitacion2").checked,
    capacitacion3: document.getElementById("capacitacion3").checked,
    capacitacion4: document.getElementById("capacitacion4").checked,
    capacitacion5: document.getElementById("capacitacion5").checked,
    capacitacion6: document.getElementById("capacitacion6").checked,
    capacitacion7: document.getElementById("capacitacion7").checked,
    capacitacion8: document.getElementById("capacitacion8").checked,
    capacitacion9: document.getElementById("capacitacion9").checked,
    capacitacion10: document.getElementById("capacitacion10").checked,
};

let documentosRecibidos = {
    documento1: document.getElementById("documento1").checked,
    documento2: document.getElementById("documento2").checked,
    documento3: document.getElementById("documento3").checked,
    documento4: document.getElementById("documento4").checked,
    documento5: document.getElementById("documento5").checked,
    documento6: document.getElementById("documento6").checked,
    documento7: document.getElementById("documento7").checked,
    documento8: document.getElementById("documento8").checked,
    documento9: document.getElementById("documento9").checked,
    documento10: document.getElementById("documento10").checked,
    documento11: document.getElementById("documento11").checked,
    documento12: document.getElementById("documento12").checked,
    documento13: document.getElementById("documento13").checked,
    documento14: document.getElementById("documento14").checked
};

const fotoTrabajador = document.getElementById("fotoTrabajador").files[0];

if (fotoTrabajador) {
    const reader = new FileReader();
    reader.onload = function (e) {
        const fotoBase64 = e.target.result;

        // Generar un ID único para el trabajador
        const idUnico = generarIdUnico();

        // Crear el objeto trabajador con la foto en base64
        let trabajador = {

            id: idUnico,
    foto: fotoBase64, // Guardar la foto en base64
            nombreApellidos: document.getElementById("nombreApellidos").value,
            correoElectronico: document.getElementById("correoElectronico").value,
            tipoDocumento: document.getElementById("tipoDocumento").value,
            numeroDocumento: document.getElementById("numeroDocumento").value,
            fechaNacimiento: document.getElementById("fechaNacimiento").value,
            rh: document.getElementById("rh").value,
            genero: document.getElementById("genero").value,
            ciudad: document.getElementById("ciudad").value,
            barrioResidencia: document.getElementById("barrioResidencia").value,
            direccionResidencia: document.getElementById("direccionResidencia").value,
            telefonoContacto: document.getElementById("telefonoContacto").value,
            telefonoEmergencia: document.getElementById("telefonoEmergencia").value,
            estadoCivil: document.getElementById("estadoCivil").value,
            numeroHijos: document.getElementById("numeroHijos").value,
            edadHijos: document.getElementById("edadHijos").value,
            arl: document.getElementById("arl").value,
            eps: document.getElementById("eps").value,
            pension: document.getElementById("pension").value,
            cesantias: document.getElementById("cesantias").value,
            tituloObtenido: document.getElementById("tituloObtenido").value,
            institucion: document.getElementById("institucion").value,
            ciudadAcademica: document.getElementById("ciudadAcademica").value,
            ultimoGrado: document.getElementById("ultimoGrado").value,
            anioCulminado: document.getElementById("anioCulminado").value,
            empresa: document.getElementById("empresa").value,
            cargo: document.getElementById("cargo").value,
            fechaIngresoLaboral: document.getElementById("fechaIngresoLaboral").value,
            fechaRetiroLaboral: document.getElementById("fechaRetiroLaboral").value,
            telefonoLaboral: document.getElementById("telefonoLaboral").value,
            parentesco: document.getElementById("parentesco").value,
            nombreFamiliar: document.getElementById("nombreFamiliar").value,
            telefonoFamiliar: document.getElementById("telefonoFamiliar").value,
            Modcontrato: document.getElementById("Modcontrato").value,
capacitacionesRecibidas: {}, // Inicializar como objeto vacío
documentosRecibidos: {},      // Inicializar como objeto vacío
    tipoCuenta: document.getElementById("TipoCuenta").value,
    banco: document.getElementById("Banco").value,
    tipoDocumentoTitular: document.getElementById("tipoDocumentoTitular").value,
    nombreTitular: document.getElementById("nombreTitular").value,
    numeroDocumentoTitular: document.getElementById("numeroDocumentoTitular").value,
    numeroCuenta: document.getElementById("numeroCuenta").value
        };

        // Guardar el trabajador en el localStorage
        trabajadores.push(trabajador);
        localStorage.setItem("trabajadores", JSON.stringify(trabajadores));

        // Mostrar mensaje de éxito
        Swal.fire("Éxito", "Trabajador registrado correctamente", "success");

        // Limpiar el formulario y cerrar el modal
        document.getElementById("registroForm").reset();
        cerrarModalTrabajador();

        // Actualizar la lista de trabajadores
        actualizarListaTrabajadores();
    };
    reader.readAsDataURL(fotoTrabajador);
} else {
    Swal.fire("Error", "Debes subir una foto del trabajador", "error");
}
}


const express = require("express");
const multer = require("multer"); // Middleware para manejar la carga de archivos
const app = express();

// Configurar multer para guardar las imágenes en la carpeta "uploads"
const upload = multer({ dest: "uploads/" });

// Ruta para manejar el registro de trabajadores
app.post("/ruta-del-backend", upload.single("fotoTrabajador"), (req, res) => {
const datosTrabajador = req.body; // Datos del formulario
const fotoTrabajador = req.file; // Archivo de la foto

console.log("Datos del trabajador:", datosTrabajador);
console.log("Foto del trabajador:", fotoTrabajador);

// Aquí puedes guardar los datos en la base de datos
// ...

res.json({ mensaje: "Trabajador registrado correctamente" });
});

app.listen(3000, () => {
console.log("Servidor escuchando en el puerto 3000");
});

        // Si el usuario es Gerente, asignar todos los permisos
        if (nombreUsuario === "Gerente") {
            accesoTrabajadores = true;
            accesoJornadas = true;
            accessoTarifas = true;
            accessoSedes = true;
        }

let usuario = {
    nombre: nombreUsuario,
    contrasena: contrasenaUsuario,
    accesoTrabajadores,
    accesoJornadas,
    accessoTarifas,
    accessoSedes
};
usuarios.push(usuario);
localStorage.setItem("usuarios", JSON.stringify(usuarios));
mostrarUsuarios();
Swal.fire("Éxito", "Usuario registrado correctamente", "success");
this.reset();
cerrarModalUsuario();
});

    // Editar usuario
document.getElementById("editarUsuarioForm").addEventListener("submit", function(event) {
event.preventDefault();
let index = document.getElementById("editarUsuarioId").value;
let usuario = usuarios[index];
usuario.accesoTrabajadores = document.getElementById("editarAccesoTrabajadores").checked;
usuario.accesoJornadas = document.getElementById("editarAccesoJornadas").checked;
usuario.accessoTarifas = document.getElementById("editarAccessoTarifas").checked;
usuario.accessoSedes = document.getElementById("editarAccessoSedes").checked;
localStorage.setItem("usuarios", JSON.stringify(usuarios));
mostrarUsuarios();
Swal.fire("Éxito", "Usuario actualizado correctamente", "success");
cerrarModalEditarUsuario();
});

    // Mostrar usuarios
function mostrarUsuarios() {
let tbody = document.getElementById("tablaUsuarios");
tbody.innerHTML = "";
usuarios.forEach((usuario, index) => {
    let fila = `<tr>
        <td>${usuario.nombre}</td>
        <td>${usuario.accesoTrabajadores ? "Sí" : "No"}</td>
        <td>${usuario.accesoJornadas ? "Sí" : "No"}</td>
        <td>${usuario.accessoTarifas ? "Sí" : "No"}</td>
        <td>${usuario.accessoSedes ? "Sí" : "No"}</td>
        <td>
            <button class="btn-editar" onclick="abrirModalEditarUsuario(${index})">Editar</button>
            <button class="btn-eliminar" onclick="eliminarUsuario(${index})">Eliminar</button>
        </td>
    </tr>`;
    tbody.innerHTML += fila;
});
}
    document.addEventListener("DOMContentLoaded", mostrarUsuarios);

    // Eliminar usuario
function eliminarUsuario(index) {
usuarios.splice(index, 1);
localStorage.setItem("usuarios", JSON.stringify(usuarios));
mostrarUsuarios();
Swal.fire("Éxito", "Usuario eliminado correctamente", "success");
}


document.addEventListener("DOMContentLoaded", function () {
const inputFoto = document.getElementById("fotoTrabajador");

inputFoto.addEventListener("change", function () {
    const archivo = this.files[0];
    if (archivo) {
        const reader = new FileReader();
        reader.onload = function (e) {
            // Asegúrate de que el elemento exista antes de acceder a él
            const nombreApellidos = document.getElementById("nombreApellidos");
            if (nombreApellidos) {
                nombreApellidos.value = ""; // Ejemplo de acceso al valor
            } else {
                console.error("El elemento 'nombreApellidos' no existe en el DOM.");
            }
        };
        reader.readAsDataURL(archivo);
    }
});
});


document.addEventListener("DOMContentLoaded", function () {
let usuarios = JSON.parse(localStorage.getItem("usuarios")) || [];

// Verificar si el usuario Gerente ya existe
let gerenteExistente = usuarios.find(u => u.nombre === "Gerente");

if (!gerenteExistente) {
    let usuarioGerente = {
        nombre: "Gerente",
        contrasena: "AMALOGISTICA",
        accesoTrabajadores: true,
        accesoJornadas: true,
        accessoTarifas: true,
        accessoSedes: true
    };
    usuarios.push(usuarioGerente);
    localStorage.setItem("usuarios", JSON.stringify(usuarios));
}

mostrarUsuarios();
});

document.addEventListener("DOMContentLoaded", function () {
let capacitacionesRecibidas = {
    capacitacion1: document.getElementById("capacitacion1").checked,
    capacitacion2: document.getElementById("capacitacion2").checked,
    capacitacion3: document.getElementById("capacitacion3").checked,
    capacitacion4: document.getElementById("capacitacion4").checked,
    capacitacion5: document.getElementById("capacitacion5").checked,
    capacitacion6: document.getElementById("capacitacion6").checked,
    capacitacion7: document.getElementById("capacitacion7").checked,
    capacitacion8: document.getElementById("capacitacion8").checked,
    capacitacion9: document.getElementById("capacitacion9").checked,
    capacitacion10: document.getElementById("capacitacion10").checked,
};

console.log("Capacitaciones Recibidas:", capacitacionesRecibidas);
});

document.addEventListener("DOMContentLoaded", function () {
const tarifasForm = document.getElementById("tarifasForm");
if (tarifasForm) {
    tarifasForm.addEventListener("submit", function (event) {
        event.preventDefault();
        // Lógica para registrar la tarifa
    });
} else {
    console.error("El formulario de tarifas no existe en el DOM.");
}
});

    // Descargar registro de jornadas en Excel
    function descargarExcel() {
        const datos = registrosJornadas.map(registro => ({
            Nombre: registro.nombre,
            Sede: registro.sede,
            Línea: registro.linea,
            Fecha: registro.fecha,
            "Hora Inicio": registro.horaInicio,
            "Hora Fin": registro.horaFin,
            "Horas Trabajadas": registro.horasTrabajadas,
            "Horas Extras": registro.horasExtras,
            "Tipo de Jornada": registro.tipoJornada,
            "Valor Total": registro.valorTotal
        }));

        const hoja = XLSX.utils.json_to_sheet(datos);
        const libro = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(libro, hoja, "Jornadas");
        XLSX.writeFile(libro, "registro_jornadas.xlsx");
    }

// Actualizar lista de trabajadores en el modal de jornadas
    function actualizarFiltroTrabajadores() {
        let select = document.getElementById("nombreTrabajadorJornada");
        select.innerHTML = `<option value="">Seleccione un trabajador</option>`;
        trabajadores.forEach(trabajador => {
        let option = new Option(`${trabajador.nombreApellido} - ${trabajador.numeroDocumento}`, trabajador.numeroDocumento);
            select.appendChild(option);
        });
    }

    // Actualizar lista de sedes en los modales
function actualizarFiltroSedes() {
const sedesUnicas = Array.from(new Set(sedes.map(sede => 
    `${sede.ciudad} - ${sede.cliente}`
)));

document.querySelectorAll('#filtroSede, #sedeTarifa, #sede').forEach(select => {
    select.innerHTML = '<option value="">Seleccione sede</option>';
    sedesUnicas.forEach(combinacion => {
        const [ciudad, cliente] = combinacion.split(' - ');
        const option = document.createElement('option');
        option.value = combinacion;
        option.textContent = combinacion;
        select.appendChild(option);
    });
});
}

function validarCombinacionEnTiempoReal() {
const ciudad = document.getElementById("ciudadSede").value.trim().toLowerCase();
const cliente = document.getElementById("clienteSede").value.trim().toLowerCase();
const feedback = document.getElementById("feedbackCombinacion");

const existe = sedes.some(sede => 
    sede.ciudad.toLowerCase() === ciudad && 
    sede.cliente.toLowerCase() === cliente
);

if (existe) {
    feedback.textContent = "⚠️ Combinación ya registrada";
    feedback.style.color = "#dc3545";
    return false;
}
feedback.textContent = "✅ Combinación válida";
feedback.style.color = "#28a745";
return true;
}


    // Cargar líneas según la sede seleccionada
function cargarLineas() {
    let sedeSeleccionada = document.getElementById("sede").value;
    // Ya no necesitamos obtener ni manipular 'selectLinea'

    // En lugar de buscar por ciudad, ahora asumimos que 'sede' directamente tiene la información necesaria
    if (sedeSeleccionada) {
        let sede = sedes.find(s => s.id === sedeSeleccionada); // Asumo que el value de 'sede' es el id de la sede
        if (sede) {
            // Aquí puedes realizar cualquier acción que necesites con la 'sede' seleccionada
            // Por ejemplo, podrías habilitar o deshabilitar otros campos del formulario
            console.log("Sede seleccionada:", sede);
        }
    }
}

    // Cargar tarifas existentes para la sede seleccionada
function cargarTarifas() {
    let sedeSeleccionada = document.getElementById("sedeTarifa").value;
    let operacionSeleccionada = document.getElementById("operacionTarifa").value;
    if (sedeSeleccionada && operacionSeleccionada) {
        let tarifaExistente = tarifas.find(t => t.sede === sedeSeleccionada && t.operacion === operacionSeleccionada);
        if (tarifaExistente) {
            document.getElementById("tarifaDiurnaPago").value = tarifaExistente.tarifasPago.diurna;
            document.getElementById("tarifaExtraDiurnaPago").value = tarifaExistente.tarifasPago.extraDiurna;
            document.getElementById("tarifaNocturnaPago").value = tarifaExistente.tarifasPago.nocturna;
            document.getElementById("tarifaExtraNocturnaPago").value = tarifaExistente.tarifasPago.extraNocturna;
            document.getElementById("tarifaDominicalPago").value = tarifaExistente.tarifasPago.dominical;
            document.getElementById("tarifaDiurnaCobro").value = tarifaExistente.tarifasCobro.diurna;
            document.getElementById("tarifaExtraDiurnaCobro").value = tarifaExistente.tarifasCobro.extraDiurna;
            document.getElementById("tarifaNocturnaCobro").value = tarifaExistente.tarifasCobro.nocturna;
            document.getElementById("tarifaExtraNocturnaCobro").value = tarifaExistente.tarifasCobro.extraNocturna;
            document.getElementById("tarifaDominicalCobro").value = tarifaExistente.tarifasCobro.dominical;

            const tbody = document.getElementById('tablaTarifas');
            if (tbody) {
                tbody.innerHTML = '';
                const tipos = [
                    { tipo: "Hora Diurna", pago: tarifaExistente.tarifasPago.diurna, cobro: tarifaExistente.tarifasCobro.diurna },
                    { tipo: "Hora Extra Diurna", pago: tarifaExistente.tarifasPago.extraDiurna, cobro: tarifaExistente.tarifasCobro.extraDiurna },
                    { tipo: "Hora Nocturna", pago: tarifaExistente.tarifasPago.nocturna, cobro: tarifaExistente.tarifasCobro.nocturna },
                    { tipo: "Hora Extra Nocturna", pago: tarifaExistente.tarifasPago.extraNocturna, cobro: tarifaExistente.tarifasCobro.extraNocturna },
                    { tipo: "Hora Fin de Semana/Festiva", pago: tarifaExistente.tarifasPago.dominical, cobro: tarifaExistente.tarifasCobro.dominical }
                ];
                tipos.forEach(tipo => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${tipo.tipo}</td>
                        <td class="text-right">${tipo.pago}</td>
                        <td class="text-right">${tipo.cobro}</td>
                        <td><button onclick="editarTarifa(this)" class="btn btn-editar">Editar</button></td>
                    `;
                    tbody.appendChild(row);
                });
            } else {
                console.error('No se encontró el elemento con id: tablaTarifas');
            }
        } else {
            document.getElementById("tarifaDiurnaPago").value = "";
            document.getElementById("tarifaExtraDiurnaPago").value = "";
            document.getElementById("tarifaNocturnaPago").value = "";
            document.getElementById("tarifaExtraNocturnaPago").value = "";
            document.getElementById("tarifaDominicalPago").value = "";
            document.getElementById("tarifaDiurnaCobro").value = "";
            document.getElementById("tarifaExtraDiurnaCobro").value = "";
            document.getElementById("tarifaNocturnaCobro").value = "";
            document.getElementById("tarifaExtraNocturnaCobro").value = "";
            document.getElementById("tarifaDominicalCobro").value = "";
            const tbody = document.getElementById('tablaTarifas');
            if (tbody) {
                tbody.innerHTML = '<tr><td colspan="4">No hay tarifas para esta sede y operación</td></tr>';
            }
        }
    } else {
        llenarTablaTarifas();
    }
}

function editarTarifa(boton) {
    const row = boton.parentElement.parentElement;
    console.log("Editando tarifa:", row.cells[0].textContent);
    // Aquí puedes abrir un modal con los datos de la fila
}

function abrirModalTarifa() {
    console.log("Abriendo modal para nueva tarifa...");
    // Aquí puedes mostrar el modal con el formulario
}

// Registrar trabajador
document.getElementById("registroForm").addEventListener("submit", function(event) {
event.preventDefault();

const fotoTrabajador = document.getElementById("fotoTrabajador").files[0];

if (fotoTrabajador) {
    const reader = new FileReader();
    reader.onload = function (e) {
        const fotoBase64 = e.target.result; // Convertir la foto a base64

        // Obtener valores de los campos
    
        const nombreApellidos = document.getElementById("nombreApellidos").value;
        const correoElectronico = document.getElementById("correoElectronico").value;
        const tipoDocumento = document.getElementById("tipoDocumento").value;
        const numeroDocumento = document.getElementById("numeroDocumento").value;
        const fechaNacimiento = document.getElementById("fechaNacimiento").value;
        const rh = document.getElementById("rh").value;
        const genero = document.getElementById("genero").value;
        const ciudad = document.getElementById("ciudad").value;
        const barrioResidencia = document.getElementById("barrioResidencia").value;
        const direccionResidencia = document.getElementById("direccionResidencia").value;
        const telefonoContacto = document.getElementById("telefonoContacto").value;
        const telefonoEmergencia = document.getElementById("telefonoEmergencia").value;
        const estadoCivil = document.getElementById("estadoCivil").value;
        const numeroHijos = document.getElementById("numeroHijos").value;
        const edadHijos = document.getElementById("edadHijos").value;
        const arl = document.getElementById("arl").value;
        const eps = document.getElementById("eps").value;
        const pension = document.getElementById("pension").value;
        const cesantias = document.getElementById("cesantias").value;
        const tituloObtenido = document.getElementById("tituloObtenido").value;
        const institucion = document.getElementById("institucion").value;
        const ciudadAcademica = document.getElementById("ciudadAcademica").value;
        const ultimoGrado = document.getElementById("ultimoGrado").value;
        const anioCulminado = document.getElementById("anioCulminado").value;
        const empresa = document.getElementById("empresa").value;
        const cargo = document.getElementById("cargo").value;
        const laborEx = document.getElementById("LaborEx").value;
        const fechaIngresoLaboral = document.getElementById("fechaIngresoLaboral").value;
        const fechaRetiroLaboral = document.getElementById("fechaRetiroLaboral").value;
        const telefonoLaboral = document.getElementById("telefonoLaboral").value;
        const parentesco = document.getElementById("parentesco").value;
        const nombreFamiliar = document.getElementById("nombreFamiliar").value;
        const telefonoFamiliar = document.getElementById("telefonoFamiliar").value;
        const ModContrato = document.getElementById("Modcontrato").value;
        const perfilCargo = document.getElementById("PerfilCargo").value;
    const tipoCuenta = document.getElementById("TipoCuenta").value; // ID: "TipoCuenta"
    const banco = document.getElementById("Banco").value; // ID: "Banco"
    const tipoDocumentoTitular = document.getElementById("tipoDocumentoTitular").value; // ID: "tipoDocumentoTitular"
    const nombreTitular = document.getElementById("nombreTitular").value; // ID: "nombreTitular"
    const numeroDocumentoTitular = document.getElementById("numeroDocumentoTitular").value; // ID: "numeroDocumentoTitular"
    const numeroCuenta = document.getElementById("numeroCuenta").value; // ID: "numeroCuenta" (corregido)


        // Obtener los valores de los checklist
        const capacitacionesRecibidas = Array.from(document.querySelectorAll('input[name="capacitaciones"]:checked')).map(cb => cb.value);
        const documentosRecibidos = Array.from(document.querySelectorAll('input[name="documentos"]:checked')).map(cb => cb.value);

        // Verificar si ya existe un trabajador con el mismo número de documento
        if (trabajadores.some(trabajador => trabajador.numeroDocumento === numeroDocumento)) {
            Swal.fire("Error", "Ya existe un trabajador con este número de documento", "error");
            return;
        }

        // Crear el objeto trabajador con los nuevos campos
        const trabajador = {
            foto: fotoBase64, // Guardar la foto en el objeto trabajador
            nombreApellidos,
            correoElectronico,
            tipoDocumento,
            numeroDocumento,
            fechaNacimiento,
            rh,
            genero,
            ciudad,
            barrioResidencia,
            direccionResidencia,
            telefonoContacto,
            telefonoEmergencia,
            estadoCivil,
            numeroHijos,
            edadHijos,
            arl,
            eps,
            pension,
            cesantias,
            tituloObtenido,
            institucion,
            ciudadAcademica,
            ultimoGrado,
            anioCulminado,
            empresa,
            cargo,
            laborEx,
            fechaIngresoLaboral,
            fechaRetiroLaboral,
            telefonoLaboral,
            parentesco,
            nombreFamiliar,
            telefonoFamiliar,
            Modcontrato,
            perfilCargo,
            capacitacionesRecibidas, // Agregado
            documentosRecibidos, // Agregado
    tipoCuenta: tipoCuenta,
    banco: banco,
    tipoDocumentoTitular: tipoDocumentoTitular,
    nombreTitular: nombreTitular,
    numeroDocumentoTitular: numeroDocumentoTitular,
    numeroCuenta: numeroCuenta
    

        };

        // Guardar el trabajador en el localStorage
        trabajadores.push(trabajador);
        localStorage.setItem("trabajadores", JSON.stringify(trabajadores));

        // Generar un usuario automáticamente
        const usuario = {
            nombre: numeroDocumento, // Usuario es el número de documento
            contrasena: fechaNacimiento.replace(/-/g, ""), // Contraseña es la fecha de nacimiento sin guiones
            accesoTrabajadores: false,
            accesoJornadas: false,
            accessoTarifas: false,
            accessoSedes: false
        };

        // Guardar el usuario en el localStorage
        usuarios.push(usuario);
        localStorage.setItem("usuarios", JSON.stringify(usuarios));

        // Actualizar la lista de trabajadores
        actualizarListaTrabajadores();

        // Mostrar mensaje de éxito
        Swal.fire("Éxito", "Trabajador registrado correctamente", "success");

        // Limpiar el formulario
        document.getElementById("registroForm").reset();

        // Limpiar el formulario y cerrar el modal
        this.reset();
        cerrarModalTrabajador();
    };
    reader.readAsDataURL(fotoTrabajador); // Leer la foto como URL base64
} else {
    Swal.fire("Error", "Debes subir una foto del trabajador", "error");
}
});


    // Actualizar lista de trabajadores
function actualizarListaTrabajadores() {
    let tbody = document.getElementById("listaTrabajadores");
    console.log("Actualizando tabla, trabajadores:", trabajadores);
    tbody.innerHTML = "";

    trabajadores.forEach((trabajador, index) => {
        if (!trabajador) {
            console.error("Trabajador no definido en el índice:", index);
            return;
        }

        const capacitacionesRecibidas = trabajador.capacitacionesRecibidas || {};
        const documentosRecibidos = trabajador.documentosRecibidos || {};
        const capacitacionesCompletas = Object.values(capacitacionesRecibidas).every(c => c);
        const documentosCompletos = Object.values(documentosRecibidos).every(d => d);
        let estadoCapacitaciones = capacitacionesCompletas ? "✅" : "❌";
        let estadoDocumentos = documentosCompletos ? "✅" : "❌";

        const estadoTrabajador = trabajador.estado || "Activo";
        const estadoARL = calcularEstadoARL(trabajador.arlFecha);

        let row = `
            <tr>
                <td>${index + 1}</td>
                <td>${trabajador.nombreApellidos || "No disponible"}</td>
                <td>${trabajador.tipoDocumento || "No disponible"}</td>
                <td>${trabajador.numeroDocumento || "No disponible"}</td>
                <td>${estadoTrabajador}</td>
                <td>${estadoARL}</td>
                <td>
                    <button class="btn-mas-informacion" onclick="mostrarMasInformacion(${index})">
                        <span style="font-size: 1em; color: blue;">➕</span> <span style="margin-left: 5px;">Más</span>
                    </button>
                </td>
                <td class="acciones">
                    <button class="btn-editar" onclick="abrirModalEditarTrabajador(${index})">
                        <span style="font-size: 1em; color: green;">✏️</span>
                    </button>
                    <button class="btn-eliminar" onclick="eliminarTrabajador(${index})">
                        <span style="font-size: 1em; color: red;">❌</span>
                    </button>
                </td>
            </tr>
        `;
        tbody.innerHTML += row;
    });
}


// Definir todos los documentos y capacitaciones que deberían ser recibidos
const todosLosDocumentos = [
"Formato único de hoja de vida",
"Pruebas psicotécnicas",
"Fotocopia documentos de identidad",
"Antecedentes disciplinarios (Procuraduría-Policía-Contraloría)",
"Certificados laborales",
"Certificados de estudios",
"Certificados de experiencia laboral",
"Validación de referencias",
"Certificado afiliación a E.P.S.",
"Certificado afiliación a A.F.P.",
"Fotocopia registro unitario (R.U.T.)",
"Examen médico de ingreso",
"Certificación bancaria",
"Contrato y anexos"
];

const todasLasCapacitaciones = [
"Inducción y reinducción",
"Buenas prácticas",
"Accidentes",
"Riesgos",
"Comités y brigada",
"Actos y condiciones inseguras",
"¿Qué hacer en casos de emergencias?",
"Dotación y EPP",
"Política SST",
"Política de Prevención del Consumo de Alcohol, Tabaco y otras Sustancias Psicoactivas"
];

function mostrarMasInformacion(index) {
let trabajador = trabajadores[index];

// Mostrar la foto del trabajador si está disponible
const fotoTrabajadorDetalle = document.getElementById("fotoTrabajadorDetalle");
if (trabajador.foto) {
    fotoTrabajadorDetalle.src = trabajador.foto;
    fotoTrabajadorDetalle.style.display = "block";
} else {
    fotoTrabajadorDetalle.style.display = "none";
}

// Filtrar las capacitaciones y documentos que faltan
const capacitacionesFaltantes = todasLasCapacitaciones.filter(cap => !trabajador.capacitacionesRecibidas.includes(cap));
const documentosFaltantes = todosLosDocumentos.filter(doc => !trabajador.documentosRecibidos.includes(doc));

// Mostrar los detalles del trabajador en el formato deseado
let detalles = `

<div class="full-width">
    <h4>Información Personal</h4>
</div>

    <div class="form-group">
        <label>ID del Trabajador:</label>
        <span>${trabajador.id || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Nombre y Apellidos:</label>
        <span>${trabajador.nombreApellidos || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Correo Electrónico:</label>
        <span>${trabajador.correoElectronico || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Tipo de Documento:</label>
        <span>${trabajador.tipoDocumento || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Número de Documento:</label>
        <span>${trabajador.numeroDocumento || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Fecha de Nacimiento:</label>
        <span>${trabajador.fechaNacimiento || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>RH:</label>
        <span>${trabajador.rh || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Género:</label>
        <span>${trabajador.genero || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Ciudad:</label>
        <span>${trabajador.ciudad || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Barrio de Residencia:</label>
        <span>${trabajador.barrioResidencia || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Dirección de Residencia:</label>
        <span>${trabajador.direccionResidencia || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Teléfono de Contacto:</label>
        <span>${trabajador.telefonoContacto || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Teléfono de Emergencia:</label>
        <span>${trabajador.telefonoEmergencia || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Estado Civil:</label>
        <span>${trabajador.estadoCivil || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Número de Hijos:</label>
        <span>${trabajador.numeroHijos || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Edad de los Hijos:</label>
        <span>${trabajador.edadHijos || "No disponible"}</span>
    </div>

<div class="full-width">
    <h4>Información Laboral</h4>
</div>

    <div class="form-group">
        <label>Última Experiencia Laboral:</label>
        <span>${trabajador.ultimaExperiencia || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Empresa:</label>
        <span>${trabajador.empresa || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Cargo:</label>
        <span>${trabajador.cargo || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Fecha de Ingreso Laboral:</label>
        <span>${trabajador.fechaIngresoLaboral || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Fecha de Retiro Laboral:</label>
        <span>${trabajador.fechaRetiroLaboral || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Teléfono Laboral:</label>
        <span>${trabajador.telefonoLaboral || "No disponible"}</span>
    </div>

<div class="full-width">
    <h4>Información de Salud</h4>
</div>

    <div class="form-group">
        <label>ARL:</label>
        <span>${trabajador.arl || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>EPS:</label>
        <span>${trabajador.eps || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Pensión:</label>
        <span>${trabajador.pension || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Cesantías:</label>
        <span>${trabajador.cesantias || "No disponible"}</span>
    </div>

                <div class="full-width">
                    <h4>Información academica</h4>
                </div>
    <div class="form-group">
        <label>Título Obtenido:</label>
        <span>${trabajador.tituloObtenido || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Institución:</label>
        <span>${trabajador.institucion || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Ciudad Académica:</label>
        <span>${trabajador.ciudadAcademica || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Último Grado:</label>
        <span>${trabajador.ultimoGrado || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Año Culminado:</label>
        <span>${trabajador.anioCulminado || "No disponible"}</span>
    </div>

<div class="full-width">
    <h4>Información Familiar</h4>
</div>

    <div class="form-group">
        <label>Parentesco:</label>
        <span>${trabajador.parentesco || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Nombre del Familiar:</label>
        <span>${trabajador.nombreFamiliar || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Teléfono del Familiar:</label>
        <span>${trabajador.telefonoFamiliar || "No disponible"}</span>
    </div>

<div class="full-width">
    <h4>Información Financiera</h4>
</div>

    <div class="form-group">
        <label>Modelo de Contrato:</label>
        <span>${trabajador.Modcontrato || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Tipo de Cuenta:</label>
        <span>${trabajador.tipoCuenta || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Banco:</label>
        <span>${trabajador.banco || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Tipo de Documento del Titular:</label>
        <span>${trabajador.tipoDocumentoTitular || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Nombre del Titular:</label>
        <span>${trabajador.nombreTitular || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Número de Documento del Titular:</label>
        <span>${trabajador.numeroDocumentoTitular || "No disponible"}</span>
    </div>
    <div class="form-group">
        <label>Número de Cuenta:</label>
        <span>${trabajador.numeroCuenta || "No disponible"}</span>
    </div>

<div class="full-width">
    <h4>Capacitaciones y Documentos</h4>
</div>

    <div class="form-group">
        <label>Capacitaciones Faltantes:</label>
        <span>${capacitacionesFaltantes.length > 0 ? capacitacionesFaltantes.join(", ") : "Todas las capacitaciones están completas"}</span>
        <span style="color: ${capacitacionesFaltantes.length === 0 ? 'green' : 'red'};">(${capacitacionesFaltantes.length === 0 ? 'Completo' : 'Incompleto'})</span>
    </div>
    <div class="form-group">
        <label>Documentos Faltantes:</label>
        <span>${documentosFaltantes.length > 0 ? documentosFaltantes.join(", ") : "Todos los documentos están completos"}</span>
        <span style="color: ${documentosFaltantes.length === 0 ? 'green' : 'red'};">(${documentosFaltantes.length === 0 ? 'Completo' : 'Incompleto'})</span>
    </div>
`;

// Mostrar los detalles en el modal
document.getElementById("detallesTrabajador").innerHTML = detalles;

// Mostrar el modal
document.getElementById("modalMasInformacion").style.display = "flex";
}
function cerrarModalMasInformacion() {
document.getElementById("modalMasInformacion").style.display = "none";
}

// Filtrar trabajadores
function filtrarTrabajadores() {
    const filtroInput = document.getElementById("filtroTrabajadores");
    if (!filtroInput) {
        console.error("No se encontró el elemento con id: filtroTrabajadores");
        return;
    }
    const filtro = filtroInput.value.toLowerCase();
    const filas = document.querySelectorAll("#listaTrabajadores tr");

    if (filas.length === 0) {
        console.warn("No hay trabajadores para filtrar");
        return;
    }

    filas.forEach(fila => {
        const celdas = fila.querySelectorAll("td");
        let coincide = false;

        // Solo buscar en las columnas relevantes (por ejemplo, número de documento y nombre)
        for (let i = 0; i < Math.min(celdas.length - 1, 2); i++) {
            const textoCelda = celdas[i].textContent.toLowerCase();
            if (textoCelda.includes(filtro)) {
                coincide = true;
                break;
            }
        }

        fila.style.display = coincide ? "" : "none";
    });
}

// Eliminar trabajador
function eliminarTrabajador(index) {
    if (!trabajadores || index < 0 || index >= trabajadores.length) {
        Swal.fire("Error", "Índice de trabajador inválido", "error");
        return;
    }

    Swal.fire({
        title: '¿Estás seguro?',
        text: "¡No podrás revertir esto!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Sí, eliminar!'
    }).then((result) => {
        if (result.isConfirmed) {
            trabajadores.splice(index, 1);
            localStorage.setItem("trabajadores", JSON.stringify(trabajadores));
            actualizarListaTrabajadores();
            Swal.fire('¡Eliminado!', 'El trabajador fue eliminado.', 'success');
        }
    });
}

// Registrar jornada laboral
document.getElementById("registroJornadaForm").addEventListener("submit", function(e) {
    e.preventDefault();

    // Obtener valores del formulario
    const trabajadorId = document.getElementById("nombreTrabajadorJornada")?.value;
    const ciudad = document.getElementById("ciudadJornada")?.value;
    const sede = document.getElementById("sede")?.value;
    const fecha = document.getElementById("fechaJornada")?.value;
    const horaInicio = document.getElementById("horaInicio")?.value;
    const horaFin = document.getElementById("horaFin")?.value;
    const horasDescuento = parseFloat(document.getElementById("horasDescuento")?.value) || 0;
    const tipoJornada = document.getElementById("tipoJornada")?.value;

    // Validar que los campos obligatorios estén llenos
    if (!trabajadorId || !ciudad || !sede || !fecha || !horaInicio || !horaFin || !tipoJornada) {
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Todos los campos obligatorios deben estar completos"
        });
        return;
    }

    // Validar horasDescuento
    if (horasDescuento < 0) {
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Las horas a descontar no pueden ser negativas"
        });
        return;
    }

    // Validar que la sede exista
    const sedeExiste = sedes.find(s => s.id === sede);
    if (!sedeExiste) {
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "La sede seleccionada no existe"
        });
        return;
    }

    // Buscar trabajador
    const trabajador = trabajadores.find(t => t.numeroDocumento === trabajadorId);
    if (!trabajador) {
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Trabajador no encontrado"
        });
        return;
    }

    // Depurar datos del trabajador
    console.log("Trabajador encontrado:", trabajador);

    // Calcular horas
    const horasTrabajadasBrutas = parseFloat(calcularHoras(horaInicio, horaFin));
    console.log("Horas trabajadas brutas:", horasTrabajadasBrutas);
    if (isNaN(horasTrabajadasBrutas) || horasTrabajadasBrutas <= 0) {
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Horas trabajadas inválidas"
        });
        return;
    }

    // Aplicar descuento
    const horasTrabajadas = Math.max(horasTrabajadasBrutas - horasDescuento, 0);
    if (horasTrabajadas < 0) {
        Swal.fire({
            icon: "error",
            title: "Error",
            text: "Las horas trabajadas no pueden ser negativas tras el descuento"
        });
        return;
    }
    const horasExtras = Math.max(horasTrabajadas - 8, 0);
    console.log("Horas trabajadas:", horasTrabajadas, "Horas extras:", horasExtras);

    // Calcular valor total con tarifas fijas
    let valorTotal = 0;
    switch (tipoJornada.toLowerCase()) {
        case "diurna":
            valorTotal = (Math.min(horasTrabajadas, 8) * tarifasFijas.tarifasPago.diurna) +
                         (horasExtras * tarifasFijas.tarifasPago.extraDiurna);
            break;
        case "nocturna":
            valorTotal = (Math.min(horasTrabajadas, 8) * tarifasFijas.tarifasPago.nocturna) +
                         (horasExtras * tarifasFijas.tarifasPago.extraNocturna);
            break;
        case "dominical":
            valorTotal = horasTrabajadas * tarifasFijas.tarifasPago.dominical;
            break;
        default:
            Swal.fire({
                icon: "error",
                title: "Error",
                text: `Tipo de jornada inválido: ${tipoJornada}`
            });
            return;
    }
    console.log("Valor total calculado:", valorTotal);

    // Obtener el cliente desde la sede
    const cliente = sedeExiste.cliente || "Sin cliente";

    // Crear o actualizar registro
    const editId = this.dataset.editId;
    const nuevaJornada = {
        id: editId ? parseInt(editId) : Date.now(),
        trabajador: trabajador.numeroDocumento,
        cliente, // Nuevo campo para cliente
        nombre: trabajador.nombreApellidos,
        ciudad,
        sede,
        fecha,
        horaInicio,
        horaFin,
        horasDescuento,
        horasTrabajadas,
        horasExtras,
        tipoJornada,
        estado: editId ? (registrosJornadas.find(r => r.id === parseInt(editId))?.estado || "Pendiente") : "Pendiente",
        valorTotal
    };

    // Depurar el objeto nuevaJornada
    console.log("Nueva jornada:", nuevaJornada);

    if (editId) {
        // Actualizar registro existente
        const index = registrosJornadas.findIndex(r => r.id === parseInt(editId));
        registrosJornadas[index] = nuevaJornada;
        delete this.dataset.editId;
    } else {
        // Agregar nuevo registro
        registrosJornadas.push(nuevaJornada);
    }

    // Guardar en localStorage
    localStorage.setItem("registrosJornadas", JSON.stringify(registrosJornadas));

    // Actualizar interfaz y cerrar modal
    mostrarRegistrosJornadas();
    Swal.fire({
        icon: "success",
        title: "Éxito",
        text: editId ? "Jornada actualizada correctamente" : "Jornada registrada correctamente"
    });
    this.reset();
    cerrarModalJornada();
});

// Calcular horas trabajadas
function calcularHoras(horaInicio, horaFin) {
    if (!horaInicio || !horaFin) {
        Swal.fire("Error", "Hora de inicio o fin no especificada", "error");
        return 0;
    }
    let inicio = new Date(`2000-01-01T${horaInicio}`);
    let fin = new Date(`2000-01-01T${horaFin}`);

    if (isNaN(inicio) || isNaN(fin)) {
        Swal.fire("Error", "Formato de hora inválido", "error");
        return 0;
    }

    // Manejar jornadas que cruzan la medianoche
    if (fin < inicio) {
        fin.setDate(fin.getDate() + 1);
    }

    const diferencia = fin - inicio;
    const horas = (diferencia / 1000 / 60 / 60).toFixed(2);
    console.log(`Calcular horas: ${horaInicio} a ${horaFin} = ${horas} horas`);
    return horas;
}
// Validar permisos
function validarPermisos(usuario) {
    if (!usuario || typeof usuario !== 'object') {
        console.error("Usuario inválido");
        return null;
    }

    const permisos = {
        accesoTrabajadores: false,
        accesoJornadas: false,
        accesoTarifas: false,
        accesoSedes: false
    };

    if (usuario.nombre === "Gerente") {
        permisos.accesoTrabajadores = true;
        permisos.accesoJornadas = true;
        permisos.accesoTarifas = true;
        permisos.accesoSedes = true;
    }

    return permisos;
}

// Mostrar foto en modal
function mostrarFotoEnModal(foto) {
    const fotoPreview = document.getElementById("fotoTrabajadorPreview");
    if (!fotoPreview) {
        console.error("No se encontró el elemento con id: fotoTrabajadorPreview");
        return;
    }

    if (foto) {
        fotoPreview.src = foto;
        fotoPreview.style.display = "block";
    } else {
        fotoPreview.src = "";
        fotoPreview.style.display = "none";
    }
}

// Mostrar registros de jornadas
function mostrarRegistrosJornadas(filtros = {}) {
    const tbody = document.getElementById("tablaRegistrosJornadas");
    if (!tbody) {
        console.error("Elemento tablaRegistrosJornadas no encontrado");
        return;
    }

    tbody.innerHTML = ""; // Limpiar tabla

    // Depurar datos iniciales
    console.log("Contenido de registrosJornadas:", registrosJornadas);
    console.log("Contenido de sedes:", sedes);

    // Normalizar registros
    let registrosNormalizados = registrosJornadas.map((registro, index) => {
        const normalizedRegistro = {
            originalIndex: index, // Guardar el índice original para los botones
            id: registro.id || index + 1,
            cliente: registro.cliente || "Sin cliente", // Nuevo campo para cliente
            sede: registro.sede || null, // Mantener sede para filtros
            nombre: registro.nombre || "Sin nombre",
            fecha: registro.fecha || "Sin fecha",
            horaInicio: registro.horaInicio || "Sin hora",
            horaFin: registro.horaFin || "Sin hora",
            horasTrabajadas: parseFloat(registro.horasTrabajadas) || 0,
            horasExtras: parseFloat(registro.horasExtras) || 0,
            tipoJornada: registro.tipoJornada || "Sin tipo",
            estado: registro.estado || "Pendiente",
            valorTotal: parseFloat(registro.valorTotal) || 0
        };
        console.log(`Registro ${index + 1} normalizado:`, normalizedRegistro);
        return normalizedRegistro;
    });

    // Aplicar filtros
    let registrosFiltrados = [...registrosNormalizados];
    if (filtros.fechaInicio) {
        const startDate = new Date(filtros.fechaInicio);
        registrosFiltrados = registrosFiltrados.filter(r => new Date(r.fecha) >= startDate);
    }
    if (filtros.fechaFin) {
        const endDate = new Date(filtros.fechaFin);
        endDate.setHours(23, 59, 59, 999);
        registrosFiltrados = registrosFiltrados.filter(r => new Date(r.fecha) <= endDate);
    }
    if (filtros.sede) {
        registrosFiltrados = registrosFiltrados.filter(r => r.sede === filtros.sede);
    }
    if (filtros.cliente) {
        registrosFiltrados = registrosFiltrados.filter(r => r.cliente === filtros.cliente);
    }

    // Ordenar registros
    registrosFiltrados.sort((a, b) => {
        let valueA, valueB;
        switch (sortColumn) {
            case 'cliente':
                valueA = a.cliente || '';
                valueB = b.cliente || '';
                break;
            case 'colaborador':
                valueA = a.nombre || '';
                valueB = b.nombre || '';
                break;
            case 'fecha':
                valueA = new Date(a.fecha);
                valueB = new Date(b.fecha);
                break;
            case 'horaInicio':
                valueA = a.horaInicio || '';
                valueB = b.horaInicio || '';
                break;
            case 'horaFin':
                valueA = a.horaFin || '';
                valueB = b.horaFin || '';
                break;
            case 'horas':
                valueA = parseFloat(a.horasTrabajadas) + parseFloat(a.horasExtras || 0);
                valueB = parseFloat(b.horasTrabajadas) + parseFloat(b.horasExtras || 0);
                break;
            case 'tipo':
                valueA = a.tipoJornada || '';
                valueB = b.tipoJornada || '';
                break;
            case 'estado':
                valueA = a.estado || 'Pendiente';
                valueB = b.estado || 'Pendiente';
                break;
            case 'valor':
                valueA = parseFloat(a.valorTotal || 0);
                valueB = parseFloat(b.valorTotal || 0);
                break;
            default:
                valueA = a[sortColumn] || '';
                valueB = b[sortColumn] || '';
        }
        if (valueA < valueB) return sortDirection === 'asc' ? -1 : 1;
        if (valueA > valueB) return sortDirection === 'asc' ? 1 : -1;
        return 0;
    });

    // Actualizar resumen
    const totalHoras = registrosFiltrados.reduce((sum, r) => sum + (parseFloat(r.horasTrabajadas || 0) + parseFloat(r.horasExtras || 0)), 0).toFixed(2);
    const totalExtras = registrosFiltrados.reduce((sum, r) => sum + parseFloat(r.horasExtras || 0), 0).toFixed(2);
    const totalPago = registrosFiltrados.reduce((sum, r) => sum + parseFloat(r.valorTotal || 0), 0);
    const totalHorasElement = document.getElementById("totalHoras");
    const totalExtrasElement = document.getElementById("totalExtras");
    const totalPagoElement = document.getElementById("totalPago");

    if (totalHorasElement) {
        totalHorasElement.textContent = totalHoras;
    } else {
        console.error("Elemento totalHoras no encontrado");
    }
    if (totalExtrasElement) {
        totalExtrasElement.textContent = totalExtras;
    } else {
        console.error("Elemento totalExtras no encontrado");
    }
    if (totalPagoElement) {
        totalPagoElement.textContent = totalPago.toLocaleString('es-CO', { style: 'currency', currency: 'COP' });
    } else {
        console.error("Elemento totalPago no encontrado");
    }

    // Llenar tabla
    if (registrosFiltrados.length === 0) {
        const tr = document.createElement("tr");
        tr.innerHTML = `<td colspan="10" class="text-center">No hay registros disponibles</td>`;
        tbody.appendChild(tr);
    } else {
        registrosFiltrados.forEach((registro) => {
            const totalHoras = (parseFloat(registro.horasTrabajadas || 0) + parseFloat(registro.horasExtras || 0)).toFixed(2);

            // Depurar datos de cada fila
            console.log(`Fila para registro ID ${registro.id}:`, {
                cliente: registro.cliente,
                nombre: registro.nombre,
                fecha: registro.fecha,
                horaInicio: registro.horaInicio,
                horaFin: registro.horaFin,
                totalHoras,
                tipoJornada: registro.tipoJornada,
                estado: registro.estado,
                valorTotal: registro.valorTotal
            });

            const tr = document.createElement("tr");
            tr.innerHTML = `
                <td>${registro.cliente}</td>
                <td>${registro.nombre}</td>
                <td class="text-center">${registro.fecha}</td>
                <td class="text-center">${registro.horaInicio}</td>
                <td class="text-center">${registro.horaFin}</td>
                <td class="text-center">${totalHoras}</td>
                <td class="text-center">${registro.tipoJornada}</td>
                <td class="text-center ${registro.estado === 'Pendiente' ? 'estado-pendiente' : 'estado-completo'}">${registro.estado}</td>
                <td class="text-right">${parseFloat(registro.valorTotal).toLocaleString('es-CO', { style: 'currency', currency: 'COP' })}</td>
                <td class="acciones">
                    <button class="btn-editar" data-tooltip="Editar" onclick="editarJornada(${registro.originalIndex})">✏️</button>
                    <button class="btn-eliminar" data-tooltip="Eliminar" onclick="eliminarJornada(${registro.originalIndex})">✖️</button>
                </td>
            `;
            tbody.appendChild(tr);
        });
    }
}

// Ejecutar la función al cargar la página
document.addEventListener("DOMContentLoaded", () => {
    mostrarRegistrosJornadas(); // Llamar sin filtros inicialmente
});

    // Actualizar jornadas con las nuevas tarifas
function actualizarJornadas() {
registrosJornadas.forEach(registro => {
    let tarifaSede = tarifas.find(t => t.sede === registro.sede && t.operacion === registro.operacion);
    if (tarifaSede) {
        let horasExtras = Math.max(0, registro.horasTrabajadas - 8);
        if (registro.tipoJornada === "diurna") {
            registro.valorTotal = (Math.min(registro.horasTrabajadas, 8) * tarifaSede.diurna) + (horasExtras * tarifaSede.extraDiurna);
        } else if (registro.tipoJornada === "nocturna") {
            registro.valorTotal = (Math.min(registro.horasTrabajadas, 8) * tarifaSede.nocturna) + (horasExtras * tarifaSede.extraNocturna);
        } else if (registro.tipoJornada === "dominical") {
            registro.valorTotal = registro.horasTrabajadas * tarifaSede.dominical;
        }
    }
});
localStorage.setItem("registrosJornadas", JSON.stringify(registrosJornadas));
mostrarRegistrosJornadas();
Swal.fire("Éxito", "Jornadas actualizadas con las nuevas tarifas", "success");
}
    // Registrar tarifas
document.getElementById("tarifasForm").addEventListener("submit", function(event) {
event.preventDefault();



let sede = document.getElementById("sedeTarifa").value;
let operacion = document.getElementById("operacionTarifa").value;

// Tarifas de pago
let tarifaDiurnaPago = parseFloat(document.getElementById("tarifaDiurnaPago").value);
let tarifaExtraDiurnaPago = parseFloat(document.getElementById("tarifaExtraDiurnaPago").value);
let tarifaNocturnaPago = parseFloat(document.getElementById("tarifaNocturnaPago").value);
let tarifaExtraNocturnaPago = parseFloat(document.getElementById("tarifaExtraNocturnaPago").value);
let tarifaDominicalPago = parseFloat(document.getElementById("tarifaDominicalPago").value);

// Tarifas de cobro
let tarifaDiurnaCobro = parseFloat(document.getElementById("tarifaDiurnaCobro").value);
let tarifaExtraDiurnaCobro = parseFloat(document.getElementById("tarifaExtraDiurnaCobro").value);
let tarifaNocturnaCobro = parseFloat(document.getElementById("tarifaNocturnaCobro").value);
let tarifaExtraNocturnaCobro = parseFloat(document.getElementById("tarifaExtraNocturnaCobro").value);
let tarifaDominicalCobro = parseFloat(document.getElementById("tarifaDominicalCobro").value);

// Verificar si ya existe una tarifa para esta sede y operación
let tarifaExistente = tarifas.find(t => t.sede === sede && t.operacion === operacion);
if (tarifaExistente) {
    // Actualizar tarifa existente
    tarifaExistente.tarifasPago = {
        diurna: tarifaDiurnaPago,
        extraDiurna: tarifaExtraDiurnaPago,
        nocturna: tarifaNocturnaPago,
        extraNocturna: tarifaExtraNocturnaPago,
        dominical: tarifaDominicalPago
    };
    tarifaExistente.tarifasCobro = {
        diurna: tarifaDiurnaCobro,
        extraDiurna: tarifaExtraDiurnaCobro,
        nocturna: tarifaNocturnaCobro,
        extraNocturna: tarifaExtraNocturnaCobro,
        dominical: tarifaDominicalCobro
    };
} else {
    // Crear nueva tarifa
    tarifas.push({
        sede: sede,
        operacion: operacion,
        tarifasPago: {
            diurna: tarifaDiurnaPago,
            extraDiurna: tarifaExtraDiurnaPago,
            nocturna: tarifaNocturnaPago,
            extraNocturna: tarifaExtraNocturnaPago,
            dominical: tarifaDominicalPago
        },
        tarifasCobro: {
            diurna: tarifaDiurnaCobro,
            extraDiurna: tarifaExtraDiurnaCobro,
            nocturna: tarifaNocturnaCobro,
            extraNocturna: tarifaExtraNocturnaCobro,
            dominical: tarifaDominicalCobro
        }
    });
}
localStorage.setItem("tarifas", JSON.stringify(tarifas));
mostrarTarifas();
Swal.fire("Éxito", "Tarifa registrada correctamente", "success");
this.reset();
cerrarModalTarifa();
});

    // Mostrar tarifas
function mostrarTarifas() {
    const tbody = document.getElementById("tablaTarifas");
    tbody.innerHTML = `
        <tr>
            <td>Hora Diurna</td>
            <td>${tarifasFijas.tarifasPago.diurna.toLocaleString()}</td>
            <td>${tarifasFijas.tarifasCobro.diurna.toLocaleString()}</td>
            <td><button onclick="editarTarifa(this)">Editar</button></td>
        </tr>
        <tr>
            <td>Hora Extra Diurna</td>
            <td>${tarifasFijas.tarifasPago.extraDiurna.toLocaleString()}</td>
            <td>${tarifasFijas.tarifasCobro.extraDiurna.toLocaleString()}</td>
            <td><button onclick="editarTarifa(this)">Editar</button></td>
        </tr>
        <tr>
            <td>Hora Nocturna</td>
            <td>${tarifasFijas.tarifasPago.nocturna.toLocaleString()}</td>
            <td>${tarifasFijas.tarifasCobro.nocturna.toLocaleString()}</td>
            <td><button onclick="editarTarifa(this)">Editar</button></td>
        </tr>
        <tr>
            <td>Hora Extra Nocturna</td>
            <td>${tarifasFijas.tarifasPago.extraNocturna.toLocaleString()}</td>
            <td>${tarifasFijas.tarifasCobro.extraNocturna.toLocaleString()}</td>
            <td><button onclick="editarTarifa(this)">Editar</button></td>
        </tr>
        <tr>
            <td>Hora Fin de Semana/Festiva</td>
            <td>${tarifasFijas.tarifasPago.dominical.toLocaleString()}</td>
            <td>${tarifasFijas.tarifasCobro.dominical.toLocaleString()}</td>
            <td><button onclick="editarTarifa(this)">Editar</button></td>
        </tr>
    `;
}
    document.addEventListener("DOMContentLoaded", mostrarTarifas);

    // Eliminar tarifa
function eliminarTarifa(index) {
tarifas.splice(index, 1);
localStorage.setItem("tarifas", JSON.stringify(tarifas));
mostrarTarifas();
Swal.fire("Éxito", "Tarifa eliminada correctamente", "success");
}

function mostrarSedes() {
let tbody = document.getElementById("tablaSedes");
tbody.innerHTML = "";
sedes.forEach((sede, index) => {
    let fila = `<tr>
        <td>${sede.id || "N/A"}</td>
        <td>${sede.cliente || "N/A"}</td>
        <td>${sede.nit || "N/A"}</td>
        <td>${sede.direccion || "N/A"}</td>
        <td>${sede.ciudad || "N/A"}</td>
        <td>${sede.telefono || "N/A"}</td>
        <td>${sede.fechaCreacion || "N/A"}</td>
        <td>
            <button class="btn-editar" onclick="abrirModalEditarSede(${index})">Editar</button>
            <button class="btn-eliminar" onclick="eliminarSede(${index})">Eliminar</button>
        </td>
    </tr>`;
    tbody.innerHTML += fila;
});
}



    document.addEventListener("DOMContentLoaded", mostrarSedes);

    // Eliminar sede
function eliminarSede(index) {
Swal.fire({
    title: '¿Estás seguro?',
    text: "¡No podrás revertir esto!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Sí, eliminar!'
}).then((result) => {
    if (result.isConfirmed) {
        sedes.splice(index, 1);
        localStorage.setItem("sedes", JSON.stringify(sedes));
        mostrarSedes();
        Swal.fire('¡Eliminado!', 'La sede fue eliminada.', 'success');
    }
});
}
function generarCarnet() {
const trabajadorId = document.getElementById("editarTrabajadorId").value;

if (trabajadorId === undefined || trabajadorId === null || trabajadorId === "") {
    Swal.fire("Error", "No se ha seleccionado un trabajador válido.", "error");
    return;
}

const trabajador = trabajadores[trabajadorId];

if (!trabajador) {
    Swal.fire("Error", "No se encontró información del trabajador.", "error");
    return;
}

if (!trabajador.numeroDocumento) {
    Swal.fire("Error", "El número de documento del trabajador no está definido.", "error");
    return;
}

const doc = new jspdf.jsPDF({
    orientation: "portrait",
    unit: "mm",
    format: [85, 54]
});

doc.setFontSize(16);
doc.setFont("helvetica", "bold");
doc.text("RMRPLUS", 42.5, 10, { align: "center" });

doc.setFontSize(12);
doc.setFont("helvetica", "normal");
doc.text("LOGISTICS", 42.5, 16, { align: "center" });

doc.setFontSize(10);
doc.text(`NOMBRE: ${trabajador.nombreApellidos}`, 10, 25);
doc.text(`CARGO: ${trabajador.cargo}`, 10, 30);
doc.text(`TIPO DOC-NUM.DOC: ${trabajador.tipoDocumento} - ${trabajador.numeroDocumento}`, 10, 35);
doc.text(`RH: ${trabajador.rh}`, 10, 40);

doc.save(`carnet_${trabajador.numeroDocumento}.pdf`);
}

function abrirModalEditarSede(index) {
let sede = sedes[index];
document.getElementById("ciudadSede").value = sede.ciudad;
document.getElementById("clienteSede").value = sede.cliente;
document.getElementById("nitSede").value = sede.nit;
document.getElementById("direccionSede").value = sede.direccion;
document.getElementById("telefonoSede").value = sede.telefono;
document.getElementById("fechaCreacion").value = sede.fechaCreacion;

// Marcar los checkboxes de las operaciones seleccionadas
document.querySelectorAll('#operacionesChecklist input[type="checkbox"]').forEach(checkbox => {
    checkbox.checked = sede.operaciones.includes(checkbox.value);
});

// Guardar el índice de la sede que se está editando
document.getElementById("modalSede").dataset.index = index;

// Cambiar el texto del botón de guardar
document.querySelector("#modalSede button").textContent = "Guardar Cambios";

// Mostrar el modal
document.getElementById("modalSede").style.display = "flex";
}

function guardarSede() {
const ciudadInput = document.getElementById("ciudadSede");
const clienteInput = document.getElementById("clienteSede");

const ciudad = ciudadInput.value.trim().toLowerCase();
const cliente = clienteInput.value.trim().toLowerCase();

// Obtener el índice de la sede que se está editando
const index = document.getElementById("modalSede").dataset.index;

// Verificar si ya existe una sede con la misma combinación, excluyendo la sede que se está editando
const existeCombinacion = sedes.some((sede, i) => 
    sede.ciudad.toLowerCase() === ciudad && 
    sede.cliente.toLowerCase() === cliente && 
    i !== index // Excluir la sede que se está editando
);

if (existeCombinacion) {
    Swal.fire("Error", "¡Esta combinación Ciudad-Cliente ya existe!", "error");
    return;
}

// Obtener valores restantes
const nit = document.getElementById("nitSede").value.trim();
const direccion = document.getElementById("direccionSede").value.trim();
const telefono = document.getElementById("telefonoSede").value.trim();
const fechaCreacion = document.getElementById("fechaCreacion").value;

// Capitalizar para almacenamiento
const ciudadCapitalizada = ciudad.charAt(0).toUpperCase() + ciudad.slice(1);
const clienteCapitalizado = cliente.charAt(0).toUpperCase() + cliente.slice(1);

// Obtener operaciones
const operaciones = Array.from(document.querySelectorAll('#operacionesChecklist input:checked'))
                        .map(checkbox => checkbox.value);

// Validación completa
if (!ciudad || !cliente || !nit || !direccion || !telefono || operaciones.length === 0) {
    Swal.fire("Error", "Todos los campos son obligatorios y debe seleccionar al menos una operación", "warning");
    return;
}

// Lógica de edición/creación corregida
if (index !== undefined && index !== "") {
    // Editar existente
    sedes[index] = { 
        ...sedes[index],
        ciudad: ciudadCapitalizada,
        cliente: clienteCapitalizado,
        operaciones,
        nit,
        direccion,
        telefono,
        fechaCreacion
    };
} else {
    // Nueva sede
    const nuevaSede = { 
        id: generarIdSede(),
        ciudad: ciudadCapitalizada,
        cliente: clienteCapitalizado,
        operaciones,
        nit,
        direccion,
        telefono,
        fechaCreacion: new Date().toISOString().split('T')[0] // Fecha actual si no se especifica
    };
    sedes.push(nuevaSede);
}

localStorage.setItem("sedes", JSON.stringify(sedes));
mostrarSedes();
Swal.fire("Éxito", "Sede guardada correctamente", "success");
cerrarModalSede();
}

function abrirModalSede() {
console.log("Abriendo modal de sedes"); // Verifica si la función se está ejecutando
let modal = document.getElementById("modalSede");
if (modal) {
    modal.style.display = "flex";
} else {
    console.error("El modal de sedes no existe.");
}
}

function abrirModalEditarTarifa(index) {
const tarifa = tarifas[index];

// Llenar los campos del modal con los datos de la tarifa
document.getElementById("editarClienteTarifa").value = tarifa.cliente;
document.getElementById("editarSedeTarifa").value = tarifa.sede;
document.getElementById("editarOperacionTarifa").value = tarifa.operacion;
document.getElementById("editarTarifaDiurnaPago").value = tarifa.tarifasPago.diurna;
document.getElementById("editarTarifaExtraDiurnaPago").value = tarifa.tarifasPago.extraDiurna;
document.getElementById("editarTarifaNocturnaPago").value = tarifa.tarifasPago.nocturna;
document.getElementById("editarTarifaExtraNocturnaPago").value = tarifa.tarifasPago.extraNocturna;
document.getElementById("editarTarifaDominicalPago").value = tarifa.tarifasPago.dominical;
document.getElementById("editarTarifaDiurnaCobro").value = tarifa.tarifasCobro.diurna;
document.getElementById("editarTarifaExtraDiurnaCobro").value = tarifa.tarifasCobro.extraDiurna;
document.getElementById("editarTarifaNocturnaCobro").value = tarifa.tarifasCobro.nocturna;
document.getElementById("editarTarifaExtraNocturnaCobro").value = tarifa.tarifasCobro.extraNocturna;
document.getElementById("editarTarifaDominicalCobro").value = tarifa.tarifasCobro.dominical;

// Guardar el índice de la tarifa que se está editando
document.getElementById("modalEditarTarifa").dataset.index = index;

// Mostrar el modal
document.getElementById("modalEditarTarifa").style.display = "flex";
}


function cerrarModalSede() {
let modal = document.getElementById("modalSede");
if (modal) {
    modal.style.display = "none";
    document.getElementById("ciudadSede").value = "";
    document.getElementById("clienteSede").value = "";
    document.getElementById("nitSede").value = "";
    document.getElementById("direccionSede").value = "";
    document.getElementById("telefonoSede").value = "";
    document.getElementById("fechaCreacion").value = "";

    // Limpiar los checkboxes
    document.querySelectorAll('#operacionesChecklist input[type="checkbox"]').forEach(checkbox => {
        checkbox.checked = false;
    });

    delete modal.dataset.index; // Elimina el índice de edición
}
}

function generarIdSede() {
const ultimoId = sedes.length > 0 ? 
    Math.max(...sedes.map(s => parseInt(s.id.replace('C','')))) : 0;
return `C${String(ultimoId + 1).padStart(3, '0')}`;
}

document.addEventListener("DOMContentLoaded", function () {

document.getElementById("editarTarifasForm").addEventListener("submit", function (event) {
event.preventDefault();

// Obtener el índice de la tarifa que se está editando
const index = document.getElementById("modalEditarTarifa").dataset.index;

// Actualizar los datos de la tarifa
tarifas[index].sede = document.getElementById("editarSedeTarifa").value;
tarifas[index].operacion = document.getElementById("editarOperacionTarifa").value;
tarifas[index].tarifasPago.diurna = parseFloat(document.getElementById("editarTarifaDiurnaPago").value);
tarifas[index].tarifasPago.extraDiurna = parseFloat(document.getElementById("editarTarifaExtraDiurnaPago").value);
tarifas[index].tarifasPago.nocturna = parseFloat(document.getElementById("editarTarifaNocturnaPago").value);
tarifas[index].tarifasPago.extraNocturna = parseFloat(document.getElementById("editarTarifaExtraNocturnaPago").value);
tarifas[index].tarifasPago.dominical = parseFloat(document.getElementById("editarTarifaDominicalPago").value);
tarifas[index].tarifasCobro.diurna = parseFloat(document.getElementById("editarTarifaDiurnaCobro").value);
tarifas[index].tarifasCobro.extraDiurna = parseFloat(document.getElementById("editarTarifaExtraDiurnaCobro").value);
tarifas[index].tarifasCobro.nocturna = parseFloat(document.getElementById("editarTarifaNocturnaCobro").value);
tarifas[index].tarifasCobro.extraNocturna = parseFloat(document.getElementById("editarTarifaExtraNocturnaCobro").value);
tarifas[index].tarifasCobro.dominical = parseFloat(document.getElementById("editarTarifaDominicalCobro").value);

// Guardar los cambios en localStorage
localStorage.setItem("tarifas", JSON.stringify(tarifas));

// Actualizar la tabla de tarifas
mostrarTarifas();

// Cerrar el modal
cerrarModalEditarTarifa();

// Mostrar mensaje de éxito
Swal.fire("Éxito", "Tarifa actualizada correctamente", "success");
});
});
function cerrarModalEditarTarifa() {
document.getElementById("modalEditarTarifa").style.display = "none";
}

function importarDesdeExcel(event) {
    const file = event.target.files[0];
    if (!file) {
        return;
    }

    const reader = new FileReader();
    reader.onload = function (e) {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: 'array' });

        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];

        const json = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

        // Reemplaza la lógica de importación de sedes con esto:
        const trabajadoresImportados = json.slice(1).map(row => ({
            id: generarIdTrabajador(),
            nombreApellidos: row[0],
            correoElectronico: row[1],
            tipoDocumento: row[2],
            numeroDocumento: row[3],
            fechaNacimiento: row[4],
            rh: row[5],
            genero: row[6],
            ciudad: row[7],
            barrioResidencia: row[8],
            direccionResidencia: row[9],
            telefonoContacto: row[10],
            telefonoEmergencia: row[11],
            estadoCivil: row[12],
            numeroHijos: row[13],
            edadHijos: row[14],
            arl: row[15],
            eps: row[16],
            pension: row[17],
            cesantias: row[18],
            tituloObtenido: row[19],
            institucion: row[20],
            ciudadAcademica: row[21],
            ultimoGrado: row[22],
            anioCulminado: row[23],
            ultimaExperiencia: row[24],
            empresa: row[25],
            cargo: row[26],
            fechaIngresoLaboral: row[27],
            fechaRetiroLaboral: row[28],
            telefonoLaboral: row[29],
            parentesco: row[30],
            nombreFamiliar: row[31],
            telefonoFamiliar: row[32],
            modcontrato: row[33],
            capacitacionesRecibidas: row[34],
            docrecibidos: row[35],
            tipoCuenta: row[36],
            banco: row[37],
            tipoDocumentoTitular: row[38],
            nombreTitular: row[39],
            numeroDocumentoTitular: row[40],
            numeroCuenta: row[41],
            estado: "Activo"
        }));

        trabajadores.push(...trabajadoresImportados);
        localStorage.setItem("trabajadores", JSON.stringify(trabajadores));
        mostrarTrabajadores(); // Asegúrate de tener esta función definida
        Swal.fire("Éxito", "Trabajadores importados correctamente", "success");
    };
    reader.readAsArrayBuffer(file);
}


function abrirModalTarifa() {
// Limpiar el select de clientes
const selectCliente = document.getElementById("clienteTarifa");
selectCliente.innerHTML = '<option value="">Seleccione un cliente</option>';

// Obtener la lista de clientes únicos desde las sedes
const clientesUnicos = [...new Set(sedes.map(sede => sede.cliente))];

// Llenar el select con los clientes
clientesUnicos.forEach(cliente => {
    const option = document.createElement("option");
    option.value = cliente;
    option.textContent = cliente;
    selectCliente.appendChild(option);
});

actualizarFiltroSedes(); // Asegúrate de que esta línea esté presente
document.getElementById("modalTarifas").style.display = "flex";

}

document.getElementById("tarifasForm").addEventListener("submit", function (event) {
event.preventDefault();

// Obtener los valores del formulario

const sede = document.getElementById("sedeTarifa").value;
const cliente = document.getElementById("clienteTarifa").value;
const operacion = document.getElementById("operacionTarifa").value;

// Tarifas de pago
const tarifaDiurnaPago = parseFloat(document.getElementById("tarifaDiurnaPago").value);
const tarifaExtraDiurnaPago = parseFloat(document.getElementById("tarifaExtraDiurnaPago").value);
const tarifaNocturnaPago = parseFloat(document.getElementById("tarifaNocturnaPago").value);
const tarifaExtraNocturnaPago = parseFloat(document.getElementById("tarifaExtraNocturnaPago").value);
const tarifaDominicalPago = parseFloat(document.getElementById("tarifaDominicalPago").value);

// Tarifas de cobro
const tarifaDiurnaCobro = parseFloat(document.getElementById("tarifaDiurnaCobro").value);
const tarifaExtraDiurnaCobro = parseFloat(document.getElementById("tarifaExtraDiurnaCobro").value);
const tarifaNocturnaCobro = parseFloat(document.getElementById("tarifaNocturnaCobro").value);
const tarifaExtraNocturnaCobro = parseFloat(document.getElementById("tarifaExtraNocturnaCobro").value);
const tarifaDominicalCobro = parseFloat(document.getElementById("tarifaDominicalCobro").value);

// Verificar si ya existe una tarifa para este cliente, sede y operación
const tarifaExistente = tarifas.find(t => t.cliente === cliente && t.sede === sede && t.operacion === operacion);

if (tarifaExistente) {
    // Actualizar tarifa existente
    tarifaExistente.tarifasPago = {
        diurna: tarifaDiurnaPago,
        extraDiurna: tarifaExtraDiurnaPago,
        nocturna: tarifaNocturnaPago,
        extraNocturna: tarifaExtraNocturnaPago,
        dominical: tarifaDominicalPago
    };
    tarifaExistente.tarifasCobro = {
        diurna: tarifaDiurnaCobro,
        extraDiurna: tarifaExtraDiurnaCobro,
        nocturna: tarifaNocturnaCobro,
        extraNocturna: tarifaExtraNocturnaCobro,
        dominical: tarifaDominicalCobro
    };
} else {
    // Crear nueva tarifa
    tarifas.push({
        cliente,
        sede,
        operacion,
        tarifasPago: {
            diurna: tarifaDiurnaPago,
            extraDiurna: tarifaExtraDiurnaPago,
            nocturna: tarifaNocturnaPago,
            extraNocturna: tarifaExtraNocturnaPago,
            dominical: tarifaDominicalPago
        },
        tarifasCobro: {
            diurna: tarifaDiurnaCobro,
            extraDiurna: tarifaExtraDiurnaCobro,
            nocturna: tarifaNocturnaCobro,
            extraNocturna: tarifaExtraNocturnaCobro,
            dominical: tarifaDominicalCobro
        }
    });
}

// Guardar en localStorage
localStorage.setItem("tarifas", JSON.stringify(tarifas));

// Actualizar la tabla de tarifas
mostrarTarifas();

// Mostrar mensaje de éxito
Swal.fire("Éxito", "Tarifa registrada correctamente", "success");

// Limpiar el formulario y cerrar el modal
this.reset();
cerrarModalTarifa();
});

function cambiarSeccion(seccionId) {
document.querySelectorAll('.seccion').forEach(sec => {
    sec.classList.remove('activo');
});
document.getElementById(seccionId).classList.add('activo');
}

// Funciones de exportación
function generarExcel() {
/* Implementar lógica usando xlsx.full.min.js */
console.log("Exportando a Excel...");
}

function generarPDF() {
/* Implementar lógica usando jsPDF */
console.log("Exportando a PDF...");
}

// Variables globales
    let clientes = JSON.parse(localStorage.getItem("clientes")) || [];
    let prefacturas = JSON.parse(localStorage.getItem("prefacturas")) || [];
// Inicialización de clientes
function inicializarClientes() {
const select = document.getElementById('clientePrefactura');
select.innerHTML = '<option value="">Seleccionar Cliente</option>';
clientes.forEach(cliente => {
    const option = document.createElement('option');
    option.value = cliente.nit;
    option.textContent = `${cliente.razonSocial} (${cliente.nit})`;
    select.appendChild(option);
});
}

// Función para procesar CSV
async function procesarCSV(archivo) {
return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = (e) => {
        const data = new Uint8Array(e.target.result);
        const workbook = XLSX.read(data, { type: 'array' });
        const sheet = workbook.Sheets[workbook.SheetNames[0]];
        resolve(XLSX.utils.sheet_to_json(sheet));
    };
    reader.readAsArrayBuffer(archivo);
});
}



function populateClientePrefacturaSeleccion() {
    console.log("Ejecutando populateClientePrefacturaSeleccion");
    const select = document.getElementById("clientePrefacturaSeleccion");
    if (!select) {
        console.warn("Elemento clientePrefacturaSeleccion no encontrado");
        return;
    }
    select.innerHTML = '<option value="">-- Seleccionar --</option>';

    const uniqueClients = Array.from(new Set(sedes.map(sede => sede.cliente).filter(cliente => cliente)));
    console.log("Clientes únicos:", uniqueClients);
    uniqueClients.forEach(client => {
        const option = document.createElement("option");
        option.value = client;
        option.textContent = client;
        select.appendChild(option);
    });
}

function calcularValoresPrefactura(registros) {
    if (!tarifasFijas.tarifasCobro) {
        console.error("tarifasFijas.tarifasCobro no está definido");
        return [];
    }

    return registros.map(registro => {
        if (!registro || !registro.tipoJornada) {
            console.warn("Registro inválido:", registro);
            return null;
        }

        const tipoJornada = registro.tipoJornada.toLowerCase();
        const tarifaKey = {
            'diurna': 'diurna',
            'nocturna': 'nocturna',
            'dominical': 'dominical'
        }[tipoJornada] || 'diurna';

        const valorUnitario = tarifasFijas.tarifasCobro[tarifaKey] || tarifasFijas.tarifasCobro.diurna;
        const valorExtra = tarifasFijas.tarifasCobro[`extra${tarifaKey.charAt(0).toUpperCase() + tarifaKey.slice(1)}`] || tarifasFijas.tarifasCobro.extraDiurna;

        const horasTrabajadas = parseFloat(registro.horasTrabajadas || 0);
        const horasExtras = parseFloat(registro.horasExtras || 0);
        const totalHoras = horasTrabajadas + horasExtras;
        const total = (horasTrabajadas * valorUnitario) + (horasExtras * valorExtra);

        return {
            ...registro,
            valorUnitario,
            valorExtra,
            total
        };
    }).filter(item => item !== null);
}

function actualizarTablaPrefacturas() {
    const tbody = document.getElementById("tablaRegistrosPrefacturas");
    if (!tbody) {
        console.warn("Elemento tablaRegistrosPrefacturas no encontrado");
        return;
    }
    tbody.innerHTML = '';

    if (registrosPrefacturas.length === 0) {
        const tr = document.createElement("tr");
        tr.innerHTML = `<td colspan="4" class="border px-4 py-2 text-center">No hay prefacturas generadas</td>`;
        tbody.appendChild(tr);
        return;
    }

    registrosPrefacturas.forEach((prefactura, index) => {
        const totalHoras = prefactura.registros.reduce((sum, r) => sum + (parseFloat(r.horasTrabajadas || 0) + parseFloat(r.horasExtras || 0)), 0);
        const tr = document.createElement("tr");
        tr.innerHTML = `
            <td class="border px-4 py-2">${prefactura.cliente}</td>
            <td class="border px-4 py-2">${prefactura.fechaInicio} al ${prefactura.fechaFin}</td>
            <td class="border px-4 py-2 text-right">${prefactura.total.toLocaleString('es-CO', { style: 'currency', currency: 'COP' })}</td>
            <td class="border px-4 py-2 text-center">
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded text-sm" onclick="verDetallePrefactura(${index})">Ver</button>
                <button class="bg-red-500 hover:bg-red-700 text-white font-bold py-1 px-2 rounded text-sm" onclick="eliminarPrefactura(${index})">Eliminar</button>
            </td>
        `;
        tbody.appendChild(tr);
    });
}

function eliminarPrefactura(index) {
    if (!registrosPrefacturas[index]) {
        Swal.fire("Error", "Prefactura no encontrada", "error");
        return;
    }
    Swal.fire({
        title: "¿Eliminar prefactura?",
        text: "Esta acción no se puede deshacer",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Eliminar"
    }).then((result) => {
        if (result.isConfirmed) {
            registrosPrefacturas.splice(index, 1);
            localStorage.setItem("registrosPrefacturas", JSON.stringify(registrosPrefacturas));
            actualizarTablaPrefacturas();
            Swal.fire("¡Eliminada!", "La prefactura fue eliminada.", "success");
        }
    });
}

function verDetallePrefactura(index) {
    const prefactura = registrosPrefacturas[index];
    if (!prefactura) {
        Swal.fire("Error", "Prefactura no encontrada", "error");
        return;
    }

    let detalles = '<h5>Detalles de la Prefactura</h5><table style="width:100%; border-collapse:collapse;"><thead><tr style="background-color:#e5e7eb;">';
    detalles += '<th style="border:1px solid #d1d5db; padding:8px;">Sede</th><th style="border:1px solid #d1d5db; padding:8px;">Tipo Jornada</th><th style="border:1px solid #d1d5db; padding:8px;">Horas</th><th style="border:1px solid #d1d5db; padding:8px;">Tarifa</th><th style="border:1px solid #d1d5db; padding:8px;">Total</th></tr></thead><tbody>';

    prefactura.registros.forEach(registro => {
        const totalHoras = parseFloat(registro.horasTrabajadas || 0) + parseFloat(registro.horasExtras || 0);
        detalles += `<tr>
            <td style="border:1px solid #d1d5db; padding:8px;">${registro.sede || 'N/A'}</td>
            <td style="border:1px solid #d1d5db; padding:8px;">${registro.tipoJornada || 'N/A'}</td>
            <td style="border:1px solid #d1d5db; padding:8px;">${totalHoras.toFixed(2)}</td>
            <td style="border:1px solid #d1d5db; padding:8px;">${(registro.valorUnitario || 0).toLocaleString('es-CO', { style: 'currency', currency: 'COP' })}</td>
            <td style="border:1px solid #d1d5db; padding:8px;">${(registro.total || 0).toLocaleString('es-CO', { style: 'currency', currency: 'COP' })}</td>
        </tr>`;
    });

    detalles += `</tbody></table><p style="margin-top:16px; font-weight:bold;">Total Prefactura: ${(prefactura.total || 0).toLocaleString('es-CO', { style: 'currency', currency: 'COP' })}</p>`;

    Swal.fire({
        title: `Prefactura para ${prefactura.cliente}`,
        html: detalles,
        width: '800px',
        customClass: {
            popup: 'swal-wide'
        }
    });
}

function generarPrefacturaPDF() {
    const cliente = document.getElementById("clientePrefacturaSeleccion").value;
    const fechaInicio = document.getElementById("fechaInicioPrefactura").value;
    const fechaFin = document.getElementById("fechaFinPrefactura").value;
    
    if (!cliente || !fechaInicio || !fechaFin) {
        Swal.fire("Error", "Por favor seleccione cliente y fechas", "error");
        return;
    }
    
    const startDate = new Date(fechaInicio);
    const endDate = new Date(fechaFin);
    endDate.setHours(23, 59, 59, 999);
    
    if (startDate > endDate) {
        Swal.fire("Error", "La fecha de inicio no puede ser posterior a la fecha de fin", "error");
        return;
    }
    
    const registrosFiltrados = registrosJornadas.filter(registro => {
        const registroDate = new Date(registro.fecha);
        const sede = sedes.find(s => s.nombre === registro.sede);
        return sede && sede.cliente === cliente && registroDate >= startDate && registroDate <= endDate;
    });
    
    if (registrosFiltrados.length === 0) {
        Swal.fire("Advertencia", "No se encontraron registros para el cliente y fechas seleccionadas", "warning");
        document.getElementById("resumenPrefacturaPDF").style.display = "none";
        return;
    }
    
    const prefacturaCalculada = calcularValoresPrefactura(registrosFiltrados);
    const total = prefacturaCalculada.reduce((sum, item) => sum + item.total, 0);
    
    const prefactura = {
        fecha: fechaInicio,
        cliente,
        registros: prefacturaCalculada,
        total
    };
    
    prefacturas.push(prefactura);
    localStorage.setItem('prefacturas', JSON.stringify(prefacturas));
    
    let detalleHTML = `
        <table class="w-full text-left border-collapse">
            <thead>
                <tr class="bg-gray-200">
                    <th class="border p-2">Trabajador</th>
                    <th class="border p-2">Sede</th>
                    <th class="border p-2">Operación</th>
                    <th class="border p-2">Fecha</th>
                    <th class="border p-2">Horas</th>
                    <th class="border p-2">Tarifa</th>
                    <th class="border p-2">Total</th>
                </tr>
            </thead>
            <tbody>
    `;
    
    prefacturaCalculada.forEach(registro => {
        const trabajador = trabajadores.find(t => t.numeroDocumento === registro.nombre) || { nombreApellidos: registro.nombre };
        const totalHoras = parseFloat(registro.horasTrabajadas || 0) + parseFloat(registro.horasExtras || 0);
        detalleHTML += `
            <tr>
                <td class="border p-2">${trabajador.nombreApellidos}</td>
                <td class="border p-2">${registro.sede}</td>
                <td class="border p-2">${registro.linea}</td>
                <td class="border p-2">${registro.fecha}</td>
                <td class="border p-2">${totalHoras.toFixed(2)}</td>
                <td class="border p-2">${registro.valorUnitario.toLocaleString('es-CO', { style: 'currency', currency: 'COP' })}</td>
                <td class="border p-2">${registro.total.toLocaleString('es-CO', { style: 'currency', currency: 'COP' })}</td>
            </tr>
        `;
    });
    
    detalleHTML += `
            </tbody>
        </table>
    `;
    
    document.getElementById("infoClientePrefactura").innerHTML = `
        <p><strong>Cliente:</strong> ${cliente}</p>
        <p><strong>Período:</strong> ${fechaInicio} al ${fechaFin}</p>
    `;
    document.getElementById("detallePrefacturaPDF").innerHTML = detalleHTML;
    document.getElementById("montoTotalPrefacturaPDF").textContent = total.toLocaleString('es-CO', { style: 'currency', currency: 'COP' });
    document.getElementById("resumenPrefacturaPDF").style.display = "block";
    
    window.prefacturaData = {
        cliente,
        fechaInicio,
        fechaFin,
        registros: prefacturaCalculada,
        total
    };
    
    actualizarTablaPrefacturas();
    Swal.fire("Éxito", "Prefactura generada correctamente", "success");
}

function descargarPrefacturaPDF(index) {
    const prefactura = index !== undefined ? registrosPrefacturas[index] : registrosPrefacturas[registrosPrefacturas.length - 1];
    if (!prefactura) {
        Swal.fire("Error", "Prefactura no encontrada", "error");
        return;
    }

    if (!window.jspdf) {
        Swal.fire("Error", "Librería jsPDF no cargada", "error");
        return;
    }

    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    doc.setFontSize(18);
    doc.text("Prefactura - AMA LOGISTIC", 20, 20);
    doc.setFontSize(12);
    doc.text(`Cliente: ${prefactura.cliente}`, 20, 30);
    doc.text(`Período: ${prefactura.fechaInicio} al ${prefactura.fechaFin}`, 20, 40);

    const tableData = prefactura.registros.map(registro => [
        registro.nombre || 'N/A',
        registro.sede || 'N/A',
        registro.tipoJornada || 'N/A',
        registro.fecha || 'N/A',
        (parseFloat(registro.horasTrabajadas || 0) + parseFloat(registro.horasExtras || 0)).toFixed(2),
        (registro.valorUnitario || 0).toLocaleString('es-CO', { style: 'currency', currency: 'COP' }),
        (registro.total || 0).toLocaleString('es-CO', { style: 'currency', currency: 'COP' })
    ]);

    doc.autoTable({
        startY: 50,
        head: [['Trabajador', 'Sede', 'Tipo Jornada', 'Fecha', 'Horas', 'Tarifa', 'Total']],
        body: tableData,
        theme: 'grid',
        styles: { fontSize: 10 },
        headStyles: { fillColor: [200, 200, 200] }
    });

    doc.setFontSize(12);
    doc.text(`Monto Total: ${(prefactura.total || 0).toLocaleString('es-CO', { style: 'currency', currency: 'COP' })}`, 20, doc.lastAutoTable.finalY + 10);

    doc.save(`prefactura_${prefactura.cliente}_${prefactura.fechaInicio.replace(/-/g, '')}.pdf`);
}

document.addEventListener("DOMContentLoaded", function() {
    populateClientePrefacturaSeleccion();
    actualizarTablaPrefacturas();
});



// Función de comparación con nómina
function actualizarComparativo() {
const totalPrefacturado = prefacturas.reduce((sum, p) => sum + p.total, 0);
const totalNomina = registrosJornadas.reduce((sum, j) => sum + j.valorTotal, 0);
const porcentaje = (totalPrefacturado / totalNomina * 100).toFixed(1);

document.getElementById('comparativoNomina').innerHTML = `
    <div class="progress mb-3">
        <div class="progress-bar" role="progressbar" 
             style="width: ${porcentaje}%">${porcentaje}%</div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <span class="badge bg-primary">Prefacturado: $${totalPrefacturado.toLocaleString()}</span>
        </div>
        <div class="col-md-6">
            <span class="badge bg-warning">Nómina: $${totalNomina.toLocaleString()}</span>
        </div>
    </div>
`;
}

// Inicialización al cargar
document.addEventListener('DOMContentLoaded', () => {
inicializarClientes();
actualizarTablaPrefacturas();
actualizarComparativo();
});

    function cargarClientesPrefactura() {
        const select = document.getElementById('clientePrefactura');
        select.innerHTML = '<option value="">Seleccionar Cliente</option>';
        clientes.forEach(cliente => {
            const option = document.createElement('option');
            option.value = cliente.nit;
            option.textContent = `${cliente.razonSocial} (${cliente.nit})`;
            select.appendChild(option);
        });
    }

    async function procesarCSV(archivo) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = async (e) => {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    const sheet = workbook.Sheets[workbook.SheetNames[0]];
                    const jsonData = XLSX.utils.sheet_to_json(sheet);
                    resolve(jsonData);
                } catch (error) {
                    reject(error);
                }
            };
            reader.onerror = (error) => reject(error);
            reader.readAsArrayBuffer(archivo);
        });
    }


    function actualizarComparativo() {
        const totalPrefacturado = prefacturas.reduce((sum, p) => sum + p.total, 0);
        const totalNomina = registrosJornadas.reduce((sum, j) => sum + j.valorTotal, 0);
        const porcentaje = totalNomina > 0 ? (totalPrefacturado / totalNomina * 100).toFixed(1) : 0;
        
        document.getElementById('comparativoNomina').innerHTML = `
            <div class="progress-container">
                <div class="progress-bar" style="width: ${porcentaje}%"></div>
            </div>
            <div class="comparativo-numbers">
                <span class="prefacturado">Prefacturado: $${totalPrefacturado.toLocaleString()}</span>
                <span class="nomina">Nómina: $${totalNomina.toLocaleString()}</span>
            </div>
        `;
    }


        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('formCarguePrefactura').addEventListener('submit', async (e) => {
                e.preventDefault();

                try {
                    const archivo = document.getElementById('archivoCSV').files[0];
                    if (!archivo) {
                        Swal.fire('Error', 'Debe seleccionar un archivo CSV', 'error');
                        return;
                    }

                    const datos = await procesarCSV(archivo);
                    const registrosValidos = calcularValoresPrefactura(datos);

                    if (registrosValidos.length === 0) {
                        Swal.fire('Error', 'El archivo no contiene datos válidos o no se encontraron tarifas', 'error');
                        return;
                    }

                    const nuevaPrefactura = {
                        fecha: document.getElementById('fechaPrefactura').value,
                        cliente: document.getElementById('clientePrefactura').value,
                        registros: registrosValidos,
                        total: registrosValidos.reduce((sum, item) => sum + item.total, 0)
                    };

                    prefacturas.push(nuevaPrefactura);
                    localStorage.setItem('prefacturas', JSON.stringify(prefacturas));

                    actualizarTablaPrefacturas();
                    actualizarComparativo();

                    Swal.fire('Éxito', 'Prefactura generada correctamente', 'success');
                    e.target.reset();
                    cerrarModalCargarPrefactura();
                } catch (error) {
                    console.error(error);
                    Swal.fire('Error', 'Error al procesar el archivo CSV', 'error');
                }
            });
        });

    document.addEventListener('DOMContentLoaded', () => {
        // ... (tu código existente) ...
        
        // Añadir estas líneas
        prefacturas = JSON.parse(localStorage.getItem('prefacturas')) || [];
        cargarClientesPrefactura();
        actualizarTablaPrefacturas();
        actualizarComparativo();
    });


// Variables globales
let incidentes = JSON.parse(localStorage.getItem("incidentes")) || [];
let epps = JSON.parse(localStorage.getItem("epps")) || [];
let checklists = JSON.parse(localStorage.getItem("checklists")) || [];

// Funciones HSEQ
function mostrarSubseccionHSEQ(id) {
document.querySelectorAll('#hseq .subseccion').forEach(sec => {
    sec.style.display = 'none';
});
document.getElementById(id).style.display = 'block';
}

// Incidentes
function abrirModalIncidente() {
document.getElementById("modalIncidente").style.display = "flex";
}

function cerrarModalIncidente() {
document.getElementById("modalIncidente").style.display = "none";
}

document.getElementById("formIncidente").addEventListener("submit", function(e) {
e.preventDefault();
const nuevoIncidente = {
    fecha: document.getElementById("fechaIncidente").value,
    tipo: document.getElementById("tipoIncidente").value,
    descripcion: document.getElementById("descripcionIncidente").value,
    gravedad: document.getElementById("gravedadIncidente").value
};
incidentes.push(nuevoIncidente);
localStorage.setItem("incidentes", JSON.stringify(incidentes));
actualizarListaIncidentes();
cerrarModalIncidente();
});

function actualizarListaIncidentes() {
const tbody = document.getElementById("listaIncidentes");
tbody.innerHTML = incidentes.map((incidente, index) => `
    <tr>
        <td>${incidente.fecha}</td>
        <td>${incidente.tipo}</td>
        <td>${incidente.descripcion}</td>
        <td>${incidente.gravedad}</td>
        <td>
            <button class="btn-editar">Editar</button>
            <button class="btn-eliminar" onclick="eliminarIncidente(${index})">Eliminar</button>
        </td>
    </tr>
`).join('');
}

// EPP
function abrirModalEPP() {
actualizarListaTrabajadoresEPP();
document.getElementById("modalEPP").style.display = "flex";
}

function actualizarListaTrabajadoresEPP() {
const select = document.getElementById("trabajadorEPP");
select.innerHTML = trabajadores.map(t => 
    `<option value="${t.numeroDocumento}">${t.nombreApellidos}</option>`
).join('');
}

document.getElementById("formEPP").addEventListener("submit", function(e) {
e.preventDefault();
const nuevoEPP = {
    trabajador: document.getElementById("trabajadorEPP").value,
    tipo: document.getElementById("tipoEPP").value,
    entrega: document.getElementById("fechaEntregaEPP").value,
    vencimiento: document.getElementById("vencimientoEPP").value,
    estado: "Vigente"
};
epps.push(nuevoEPP);
localStorage.setItem("epps", JSON.stringify(epps));
actualizarListaEPP();
cerrarModalEPP();
});

function actualizarListaEPP() {
const tbody = document.getElementById("listaEPP");
tbody.innerHTML = epps.map((epp, index) => `
    <tr>
        <td>${trabajadores.find(t => t.numeroDocumento === epp.trabajador)?.nombreApellidos}</td>
        <td>${epp.tipo}</td>
        <td>${epp.entrega}</td>
        <td>${epp.vencimiento}</td>
        <td>${epp.estado}</td>
    </tr>
`).join('');
}

// Checklist
function cargarChecklist() {
const container = document.getElementById("checklistContainer");
container.innerHTML = `
    <div class="checklist-item">
        <label><input type="checkbox"> Verificación de EPP</label>
    </div>
    <div class="checklist-item">
        <label><input type="checkbox"> Estado de áreas comunes</label>
    </div>
    <!-- Agregar más items según necesidad -->
`;
}

// Actualizar KPIs
function actualizarKPIs() {
const totalTrabajadores = trabajadores.length;
const incidentesGraves = incidentes.filter(i => i.gravedad === "Grave").length;
const eppVigentes = epps.filter(e => new Date(e.vencimiento) > new Date()).length;

document.getElementById("tasaIncidentes").textContent = 
    `${((incidentesGraves / totalTrabajadores) * 100).toFixed(1)}%`;
    
document.getElementById("cumplimientoEPP").textContent = 
    `${((eppVigentes / epps.length) * 100).toFixed(1)}%`;
}

// Inicialización
document.addEventListener("DOMContentLoaded", () => {
// Cargar datos existentes
trabajadores = JSON.parse(localStorage.getItem("trabajadores")) || [];
tarifas = JSON.parse(localStorage.getItem("tarifas")) || [];
registrosJornadas = JSON.parse(localStorage.getItem("registrosJornadas")) || [];

// Llenar selectores
actualizarFiltroTrabajadores();
actualizarFiltroSedes();
mostrarRegistrosJornadas();
});

function actualizarFiltroTrabajadores() {
const select = document.getElementById("nombreTrabajadorJornada");
select.innerHTML = '<option value="">Seleccione trabajador</option>';
trabajadores.forEach(t => {
    select.innerHTML += `<option value="${t.numeroDocumento}">${t.nombreApellidos} - ${t.numeroDocumento}</option>`;
});
}

document.addEventListener('DOMContentLoaded', function() {
    // Registrar sede
    document.getElementById("sedesForm").addEventListener("submit", function(event) {
        event.preventDefault();
        let nombreSede = document.getElementById("nombreSede").value;

        // Validar campo obligatorio (solo el nombre de la sede ahora)
        if (!nombreSede) {
            Swal.fire("Error", "El nombre de la sede es obligatorio", "error");
            return;
        }

        // Verificar si ya existe una sede con el mismo nombre
        if (sedes.some(sede => sede.nombre === nombreSede)) {
            Swal.fire("Error", "Ya existe una sede con este nombre", "error");
            return;
        }

        // Registrar la sede (sin la propiedad 'linea')
        let sede = { nombre: nombreSede };
        sedes.push(sede);
        localStorage.setItem("sedes", JSON.stringify(sedes));
        mostrarSedes();
        Swal.fire("Éxito", "Sede registrada correctamente", "success");
        this.reset();
        cerrarModalSede();
    });
});

    document.addEventListener("DOMContentLoaded", mostrarSedes);

// Actualizar funciones existentes para incluir resumen
function actualizarResumen() {
const totalHoras = registrosJornadas.reduce((sum, j) => sum + parseFloat(j.horasTrabajadas), 0);
const totalExtras = registrosJornadas.reduce((sum, j) => sum + parseFloat(j.horasExtras), 0);
const totalPago = registrosJornadas.reduce((sum, j) => sum + parseFloat(j.valorTotal), 0);

document.getElementById('totalHoras').textContent = totalHoras.toFixed(2);
document.getElementById('totalExtras').textContent = totalExtras.toFixed(2);
document.getElementById('totalPago').textContent = `$${totalPago.toLocaleString()}`;
}

// Modificar función mostrarRegistrosJornadas
function mostrarRegistrosJornadas() {
  const tbody = document.getElementById("tablaRegistrosJornadas");
  tbody.innerHTML = "";

  registrosJornadas.forEach((jornada, index) => {
    const totalHoras = (parseFloat(jornada.horasTrabajadas || 0) + parseFloat(jornada.horasExtras || 0)).toFixed(2);
    const row = `
      <tr>
        <td>${jornada.cliente || ''}</td>
        <td>${jornada.nombre || ''}</td>
        <td class="text-center">${jornada.fecha || ''}</td>
        <td class="text-center">${jornada.horaInicio || ''}</td>
        <td class="text-center">${jornada.horaFin || ''}</td>
        <td class="text-center">${totalHoras}</td>
        <td class="text-center"><span class="tag-jornada ${jornada.tipoJornada}">${jornada.tipoJornada || ''}</span></td>
        <td class="text-center ${jornada.estado === 'Pendiente' ? 'estado-pendiente' : 'estado-completo'}">${jornada.estado || 'Pendiente'}</td>
        <td class="text-right">$${(parseFloat(jornada.valorTotal) || 0).toLocaleString()}</td>
        <td class="text-center">
          <button class="btn-editar" onclick="editarJornada(${index})">
            <i class="fas fa-edit">Editar</i>
          </button>
          <button class="btn-eliminar" onclick="eliminarJornada(${index})">
            <i class="fas fa-trash">Eliminar</i>
          </button>
        </td>
      </tr>`;
    tbody.innerHTML += row;
  });

  actualizarResumen(); // Actualizar resumen al cambiar datos
}


// Llenar dropdown de ciudades al abrir el modal
function actualizarFiltroCiudades() {
const ciudadesUnicas = [...new Set(sedes.map(sede => sede.ciudad))];
const selectCiudad = document.getElementById("ciudadJornada");

selectCiudad.innerHTML = '<option value="">Seleccione ciudad</option>';
ciudadesUnicas.forEach(ciudad => {
    const option = document.createElement('option');
    option.value = ciudad;
    option.textContent = ciudad;
    selectCiudad.appendChild(option);
});
}

function actualizarClientesPorCiudad() {
    const ciudad = document.getElementById("ciudadJornada").value;
    const selectSede = document.getElementById("sede");

    // Limpiar las opciones existentes del select de sede
    selectSede.innerHTML = '<option value="">Seleccione una sede</option>';

    // Filtrar sedes por la ciudad seleccionada
    const sedesEnCiudad = sedes.filter(s => s.ciudad === ciudad);

    // Agregar las sedes (clientes) como opciones
    sedesEnCiudad.forEach(sede => {
        const option = document.createElement("option");
        option.value = sede.id; // Asumo que 'id' es un identificador único de la sede
        option.textContent = sede.cliente; // Mostrar el nombre del cliente como sede
        selectSede.appendChild(option);
    });
}

function abrirModalJornada() {
    actualizarFiltroCiudades(); // Llenar ciudades primero
    actualizarFiltroTrabajadores(); // 
    document.getElementById("modalJornadas").style.display = "flex";
}


console.log("Datos del trabajador:", trabajador);


// Función para cerrar el modal
function cerrarModalEPP() {
document.getElementById("modalEPP").style.display = "none";
}

function exportarTrabajadoresExcel() {
const datos = trabajadores.map(trabajador => ({
    "ID": trabajador.id || "",
    "Nombre": trabajador.nombreApellidos || "",
    "Documento": `${trabajador.tipoDocumento} - ${trabajador.numeroDocumento}`,
    "Fecha Nacimiento": trabajador.fechaNacimiento || "",
    "RH": trabajador.rh || "",
    "Género": trabajador.genero || "",
    "Ciudad": trabajador.ciudad || "",
    "Teléfono": trabajador.telefonoContacto || "",
    "EPS": trabajador.eps || "",
    "ARL": trabajador.arl || "",
    "Cargo": trabajador.cargo || "",
    "Tipo Cuenta": trabajador.tipoCuenta || "",  // <- Campo agregado
    "Banco": trabajador.banco || "",
    "Tipo Doc. Titular": trabajador.tipoDocumentoTitular || "",  // <- Campo corregido
    "Nombre Titular": trabajador.nombreTitular || "",  // <- Campo agregado
    "Doc. Titular": trabajador.numeroDocumentoTitular || "",  // <- Campo agregado
    "Número Cuenta": trabajador.numeroCuenta || ""  // <- Nombre corregido

}));

const hoja = XLSX.utils.json_to_sheet(datos);
const libro = XLSX.utils.book_new();
XLSX.utils.book_append_sheet(libro, hoja, "Trabajadores");
XLSX.writeFile(libro, "base_trabajadores.xlsx");
}

function triggerImportTrabajadores() {
    const fileInput = document.getElementById("importTrabajadoresFile");
    if (fileInput) {
        fileInput.click();
    } else {
        Swal.fire("Error", "Elemento de importación no encontrado", "error");
    }
}

function importarTrabajadoresExcel(event) {
    if (typeof XLSX === "undefined") {
        Swal.fire("Error", "Librería SheetJS no cargada", "error");
        return;
    }

    const file = event.target.files[0];
    if (!file) {
        Swal.fire("Error", "No se seleccionó ningún archivo", "error");
        return;
    }

    if (!file.name.endsWith(".xlsx") && !file.name.endsWith(".xls")) {
        Swal.fire("Error", "Por favor, seleccione un archivo Excel (.xlsx o .xls)", "error");
        return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
        try {
            const data = new Uint8Array(e.target.result);
            const workbook = XLSX.read(data, { type: "array" });
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

            if (jsonData.length < 2) {
                Swal.fire("Error", "El archivo Excel está vacío o no contiene datos válidos", "error");
                return;
            }

            // Map headers to internal field names
            const headerMap = {
                "nombre y apellidos": "nombre",
                "correo electrónico": "correo",
                "tipo de documento": "tipoDocumento",
                "número de documento": "numeroDocumento",
                "fecha de nacimiento": "fechaNacimiento",
                "rh": "rh",
                "género": "genero",
                "ciudad": "ciudad",
                "barrio de residencia": "barrio",
                "dirección de residencia": "direccion",
                "teléfono de contacto": "telefonoContacto",
                "teléfono de emergencia": "telefonoEmergencia",
                "estado civil": "estadoCivil",
                "número de hijos": "numeroHijos",
                "edad de los hijos": "edadHijos",
                "arl": "arl",
                "eps": "eps",
                "pensión": "pension",
                "cesantías": "cesantias",
                "título obtenido": "tituloObtenido",
                "institución": "institucion",
                "ciudad académica": "ciudadAcademica",
                "último grado": "ultimoGrado",
                "año culminado": "anioCulminado",
                "última experiencia laboral": "ultimaExperiencia",
                "empresa": "empresa",
                "cargo": "cargo",
                "fecha de ingreso laboral": "fechaIngresoLaboral",
                "fecha de retiro laboral": "fechaRetiroLaboral",
                "teléfono laboral": "telefonoLaboral",
                "parentesco": "parentesco",
                "nombre del familiar": "nombreFamiliar",
                "teléfono del familiar": "telefonoFamiliar",
                "modelo de contrato": "modeloContrato",
                "capacitaciones recibidas": "capacitacionesRecibidas",
                "documentos entregados": "documentosEntregados",
                "tipo de cuenta": "tipoCuenta",
                "banco": "banco",
                "tipo de documento del titular": "tipoDocumentoTitular",
                "nombre del titular": "nombreTitular",
                "número de documento del titular": "numeroDocumentoTitular",
                "número de cuenta": "numeroCuenta"
            };

            const headers = jsonData[0].map(h => h.toString().toLowerCase().trim());
            const fieldMap = {};
            headers.forEach((header, index) => {
                const field = headerMap[header] || header;
                fieldMap[field] = index;
            });

            // Required fields
            const requiredFields = [
                "nombre", "correo", "tipoDocumento", "numeroDocumento", "fechaNacimiento",
                "rh", "genero", "ciudad", "barrio", "direccion", "telefonoContacto",
                "telefonoEmergencia", "estadoCivil", "numeroHijos", "arl", "eps", "pension",
                "cesantias", "tituloObtenido", "institucion", "ciudadAcademica", "ultimoGrado",
                "anioCulminado", "ultimaExperiencia", "empresa", "cargo", "fechaIngresoLaboral",
                "telefonoLaboral", "parentesco", "nombreFamiliar", "telefonoFamiliar",
                "modeloContrato", "tipoCuenta", "banco", "tipoDocumentoTitular", "nombreTitular",
                "numeroDocumentoTitular", "numeroCuenta"
            ];

            // Check for missing required headers
            const missingFields = requiredFields.filter(field => !(field in fieldMap));
            if (missingFields.length > 0) {
                Swal.fire("Error", `Faltan columnas requeridas: ${missingFields.join(", ")}`, "error");
                return;
            }

            // Validation rules
            const validTipoDocumento = ["CC", "CE", "TI"];
            const validRh = ["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"];
            const validGenero = ["Masculino", "Femenino", "Otro"];
            const validEstadoCivil = ["Soltero", "Casado", "Unión Libre", "Divorciado", "Viudo"];
            const validTipoCuenta = ["Ahorros", "Corriente"];
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            const dateRegex = /^\d{4}-\d{2}-\d{2}$/;

            const newTrabajadores = [];
            const errors = [];

            // Process each row
            for (let i = 1; i < jsonData.length; i++) {
                const row = jsonData[i];
                if (!row || row.length === 0) continue;

                const trabajador = { id: Date.now() + i };
                let rowValid = true;

                // Map row data to trabajador object
                Object.keys(fieldMap).forEach(field => {
                    const colIndex = fieldMap[field];
                    let value = row[colIndex];
                    if (value === undefined || value === null) value = "";

                    // Convert to appropriate type
                    if (field === "numeroHijos" || field === "anioCulminado") {
                        value = parseInt(value) || 0;
                    } else {
                        value = value.toString().trim();
                    }

                    trabajador[field] = value;
                });

                // Validate required fields
                for (const field of requiredFields) {
                    if (!trabajador[field] && field !== "numeroHijos") {
                        errors.push(`Fila ${i + 1}: El campo ${field} es obligatorio`);
                        rowValid = false;
                    }
                }

                // Specific validations
                if (trabajador.correo && !emailRegex.test(trabajador.correo)) {
                    errors.push(`Fila ${i + 1}: Correo inválido (${trabajador.correo})`);
                    rowValid = false;
                }
                if (trabajador.tipoDocumento && !validTipoDocumento.includes(trabajador.tipoDocumento)) {
                    errors.push(`Fila ${i + 1}: Tipo de documento inválido (${trabajador.tipoDocumento})`);
                    rowValid = false;
                }
                if (trabajador.numeroDocumento && trabajadores.some(t => t.numeroDocumento === trabajador.numeroDocumento)) {
                    errors.push(`Fila ${i + 1}: Número de documento duplicado (${trabajador.numeroDocumento})`);
                    rowValid = false;
                }
                if (trabajador.fechaNacimiento && !dateRegex.test(trabajador.fechaNacimiento)) {
                    errors.push(`Fila ${i + 1}: Fecha de nacimiento inválida (${trabajador.fechaNacimiento})`);
                    rowValid = false;
                }
                if (trabajador.rh && !validRh.includes(trabajador.rh)) {
                    errors.push(`Fila ${i + 1}: RH inválido (${trabajador.rh})`);
                    rowValid = false;
                }
                if (trabajador.genero && !validGenero.includes(trabajador.genero)) {
                    errors.push(`Fila ${i + 1}: Género inválido (${trabajador.genero})`);
                    rowValid = false;
                }
                if (trabajador.estadoCivil && !validEstadoCivil.includes(trabajador.estadoCivil)) {
                    errors.push(`Fila ${i + 1}: Estado civil inválido (${trabajador.estadoCivil})`);
                    rowValid = false;
                }
                if (trabajador.tipoCuenta && !validTipoCuenta.includes(trabajador.tipoCuenta)) {
                    errors.push(`Fila ${i + 1}: Tipo de cuenta inválido (${trabajador.tipoCuenta})`);
                    rowValid = false;
                }
                if (trabajador.tipoDocumentoTitular && !validTipoDocumento.includes(trabajador.tipoDocumentoTitular)) {
                    errors.push(`Fila ${i + 1}: Tipo de documento del titular inválido (${trabajador.tipoDocumentoTitular})`);
                    rowValid = false;
                }
                if (trabajador.anioCulminado && (trabajador.anioCulminado < 1900 || trabajador.anioCulminado > 2025)) {
                    errors.push(`Fila ${i + 1}: Año culminado inválido (${trabajador.anioCulminado})`);
                    rowValid = false;
                }
                if (trabajador.numeroHijos < 0) {
                    errors.push(`Fila ${i + 1}: Número de hijos no puede ser negativo`);
                    rowValid = false;
                }

                if (rowValid) {
                    newTrabajadores.push(trabajador);
                }
            }

            if (errors.length > 0) {
                Swal.fire({
                    title: "Errores en la importación",
                    html: `<ul>${errors.slice(0, 5).map(e => `<li>${e}</li>`).join("")}${errors.length > 5 ? `<li>...y ${errors.length - 5} errores más</li>` : ""}</ul>`,
                    icon: "error",
                    width: "600px"
                });
            }

            if (newTrabajadores.length > 0) {
                trabajadores.push(...newTrabajadores);
                localStorage.setItem("trabajadores", JSON.stringify(trabajadores));
                actualizarListaTrabajadores();
                Swal.fire("Éxito", `${newTrabajadores.length} trabajadores importados correctamente`, "success");
            } else if (errors.length === 0) {
                Swal.fire("Advertencia", "No se encontraron datos válidos para importar", "warning");
            }

            // Reset file input
            event.target.value = "";
        } catch (err) {
            console.error("Error al importar Excel:", err);
            Swal.fire("Error", "No se pudo procesar el archivo Excel. Verifique el formato.", "error");
        }
    };
    reader.readAsArrayBuffer(file);
}

/* Initialize on DOM load */
document.addEventListener("DOMContentLoaded", () => {
    if (document.getElementById("registro")?.style.display === "block") {
        actualizarListaTrabajadores();
    }
});

</script>

</body>
</html>
